{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SnpEff &amp; SnpSift","text":"<p>Genomic variant annotations, and functional effect prediction toolbox.</p> <p>Download SnpEff Documentation SnpSift Documentation</p> <p>Latest version 5.2 (2023-09-29)</p>"},{"location":"#snpeff","title":"SnpEff","text":"<p>Genetic variant annotation, and functional effect prediction toolbox. It annotates and predicts the effects of genetic variants on genes and proteins (such as amino acid changes).</p> <p>Features:</p> <ul> <li>Supports over 38,000 genomes.</li> <li>Standard ANN annotation format</li> <li>Cancer variants analysis</li> <li>GATK compatible (<code>-o gatk</code>)</li> <li>HGVS notation</li> <li>Sequence Ontology standardized terms</li> <li>Implements VCF annotation standard <code>ANN</code> field.</li> </ul> <p>SnpEff Documentation</p>"},{"location":"#snpsift","title":"SnpSift","text":"<p>SnpSift annotates genomic variants using databases, filters, and manipulates genomic annotated variants.</p> <p>Once you annotated your files using SnpEff, you can use SnpSift to help you filter large genomic datasets in order to find the most significant variants for your experiment.</p>"},{"location":"#citing-snpeff-snpsift","title":"Citing SnpEff &amp; SnpSift","text":"<p>If you are using SnpEff or SnpSift in an research or academic environment, please cite our paper.</p>"},{"location":"#citing-snpeff","title":"Citing SnpEff","text":"<p>You can find the paper here.</p> <p>In order to cite SnpEff, please use the following reference:</p> <p>Snpeff</p> <p>\"A program for annotating and predicting the effects of single nucleotide polymorphisms, SnpEff: SNPs in the genome of Drosophila melanogaster strain w1118; iso-2; iso-3.\", Cingolani P, Platts A, Wang le L, Coon M, Nguyen T, Wang L, Land SJ, Lu X, Ruden DM. Fly (Austin). 2012 Apr-Jun;6(2):80-92.  PMID: 22728672</p> <p>BibTex entry: <pre><code>@article{cingolani2012program,\ntitle={A program for annotating and predicting the effects of single nucleotide polymorphisms, SnpEff: SNPs in the genome of Drosophila melanogaster strain w1118; iso-2; iso-3},\nauthor={Cingolani, P. and Platts, A. and Coon, M. and Nguyen, T. and Wang, L. and Land, S.J. and Lu, X. and Ruden, D.M.},\n    journal={Fly},\n    volume={6},\n    number={2},\n    pages={80-92},\n    year={2012}\n}\n</code></pre></p>"},{"location":"#citing-snpsift","title":"Citing SnpSift","text":"<p>You can find the paper here.</p> <p>In order to cite SnpSift, please use the following reference:</p> <p>Snpsift</p> <p>\"Using Drosophila melanogaster as a model for genotoxic chemical mutational studies with a new program, SnpSift\", Cingolani, P., et. al., Frontiers in Genetics, 3, 2012.</p> <p>BibTex entry: <pre><code>@article{cingolani2012using,\n    title={Using Drosophila melanogaster as a model for genotoxic chemical mutational studies with a new program, SnpSift},\n    author={Cingolani, P. and Patel, V.M. and Coon, M. and Nguyen, T. and Land, S.J. and Ruden, D.M. and Lu, X.},\n    journal={Frontiers in Genetics},\n    volume={3},\n    year={2012},\n    publisher={Frontiers Media SA}\n}\n</code></pre></p>"},{"location":"#microsoft-genomics","title":"Microsoft Genomics","text":"<p>All SnpEff &amp; SnpSift genomic databases are kindly hosted by Microsoft Genomics and Azure</p>"},{"location":"#galaxy-gatk","title":"Galaxy &amp; GATK","text":"<p>SnpEff is integrated with other tools commonly used in sequencing data analysis pipelines.</p> <p>Most notably Galaxy and GATK projects support SnpEff.</p> <p>View details</p>"},{"location":"#in-memory-of-dr-xiangyi-lu","title":"In memory of Dr. Xiangyi Lu","text":"<p>Please donate</p> <p></p> <p>On October 22, 2017, Xiangyi Lu, a co-author on the SnpEff and SnpSift papers, died of ovarian cancer after a three year struggle.</p> <p>Douglas Ruden, Xiangyi's husband and senior author on the papers, has requested that a non-mandatory gift of at least $10 for using SnpEff or SnpSift be donated to WSU to honor Xiangyi Lu. All gifts will go to a fund named \"The Xiangyi Lu Graduate Student Fellowship in Bioinformatics Fund.\" with the goal of raising $1 million, in order to permanently endow one graduate student research position in bioinformatics every year.</p>"},{"location":"about/","title":"About","text":""},{"location":"about/#about_1","title":"About","text":"<p>This project is maintained by Pablo Cingolani</p>"},{"location":"about/#acknowledgements","title":"Acknowledgements","text":"<p>Acknowledgements and special thanks to (in order of appearance):</p> <ul> <li>Adrian Platts (McGill): tons of feedback, feature suggestions, test cases, etc.</li> <li>Doug Ruden (WSU): feedback, features request, debugging.</li> <li>Louis Letourneau (McGill / Genome Quebec): bug fixes, features suggestions, etc.</li> <li>Dave OConnor (UW-Madison): feature suggestions, HIV genome.</li> <li>Denis Reshetov (Rogaev lab): VCF output support and debugging on GTF parsing.</li> <li>Louis Letourneau (McGill / Genome Quebec): Maven project.</li> <li>Mark DePristo, Eric Banks &amp; David Rozen (Broad): VCF parsing and VCF output.</li> <li>Jonathan Fresnedo (University of California, Davis): P.Persica genome support.</li> <li>GATK: integration was performed by Broad's Genome Analysis Team: David Rozen, Eric Banks and Mark DePristo</li> <li>Arno Velds (NKI: Netherlands Cancer Institute): Annomalities in ENSEMBL annotation files that led to '-onlyCoding = auto' development, as well as \"rogue transcript filters\".</li> <li>Giulio Genovese: ENSEMBL annotation problems, fixing and improving \"rogue transcript\" problem.</li> <li>Louis Letourneau (McGill / Genome Quebec): dbNSFP implementation</li> <li>Peter Briggs (Manchester University) : Improved Galaxy interface and wrappers.</li> <li>Jim Johnson (Minnesota Supercomputing Institute, University of Minnesota): SnpSift improvements and bugfixes.</li> <li>Davide Cittaro (Center for Translational Genomics and Bioinformatics, Ospedale San Raffaele): Debugging and beta-testing for both SnpEff &amp; SnpSift. Helped to debug many interoperability, compatibility and format specification issues. </li> <li>Louis Letourneau (McGill / Genome Quebec): Cancer effects, HSGV notation, etc.</li> <li>Sarmady, Mahdi (Children's hospital of Philadelphia): hg19 using transcript version from UCSC.</li> <li>Leipzig, Jeremy &amp; Sarmady, Mahdi (Children's hospital of Philadelphia): HGVS notation</li> <li>Jinghua (Frank) Feng  (University of Adelaide) : Losts of feedback, debugging and improvements in SnpSift annotations.</li> <li>Andrea Mafficini (University of Verona, Italy) : Support for dbNSFP 2.1</li> <li>Jim Johnson (Minnesota Supercomputing Institute, University of Minnesota): SnpSift 'rmFilter' bugfix.</li> <li>Brad Chapman (Harvad): HomeBrew (HomeBrew-Science) support and bash wrapper.</li> <li>Marco Cusumano-Towner &amp;  Eugene Brevdo (SVBio): Insertions in reverse strand bug report and bugfix.</li> <li>Uma Devi (U. Virginia), Karen Eilbeck (U. Utah) &amp; Nicole Marie Ruiz (U. Utah): Sequence Ontology, made right.</li> <li>Ryan Calhoun (Apistry): SnpSift annotate, tabix index bug.</li> </ul>"},{"location":"about/#contact-information","title":"Contact information","text":"<p>Pablo Cingolani.</p>"},{"location":"download/","title":"Download and install","text":""},{"location":"download/#downloading-snpeff-snpsift","title":"Downloading SnpEff &amp; SnpSift","text":"<p>SnpEff and SnpSift are bundled together.</p> <p>Download SnpEff</p> <p>Old versions here.</p>"},{"location":"download/#license","title":"License","text":"<p>SnpEff is open source, released as \"MIT\".</p>"},{"location":"download/#system-requirements","title":"System requirements","text":"<p>SnpEff requires that you have Java v1.11 or later installed (any modern operating system has it).</p> <p>The amount of memory used can vary significantly depending on genome size and data analysis type you are doing. For large genomes, such as the human genome, you'll probably need at least 4Gb of memory.</p>"},{"location":"download/#installing-snpeff","title":"Installing SnpEff","text":"<p>Installing SnpEff is very easy, you just have to uncompress the ZIP file.</p> <p>How to install using command line (unix systems)</p> <p>It is better if you install SnpEff in <code>snpEff</code> directory in your home directory (<code>$HOME/snpEff</code> in unix systems). <pre><code># Go to home dir\ncd\n\n# Download latest version\nwget https://snpeff.blob.core.windows.net/versions/snpEff_latest_core.zip\n\n# Unzip file\nunzip snpEff_latest_core.zip\n</code></pre></p>"},{"location":"download/#configuration","title":"Configuration","text":"<p>In most cases you DO NOT need to configure anything.</p> <p>The only configuration file is <code>snpEff.config</code>. Most configuration parameters, are explained in the comments in the same config file, so I won't repeat the explanation here :-)</p> <p>Usually you do NOT need to change the configuration. Some peoeple may need to change the location of the databases (<code>data.dir</code> parameter). By default, this parameter points to the <code>data</code> directory where you installed the tool (i.e. in unix systems, this is <code>./data</code>). If you want to change this, you can edit the <code>snpEff.config</code> file and change the <code>data_dir</code> entry: <pre><code>#---\n# Databases are stored here\n# E.g.: Information for 'hg19' is stored in data_dir/hg19/\n#\n# You can use tilde ('~') as first character to refer to your home directory.\n# Also, a non-absolute path will be relative to config's file dir\n#\n#---\ndata.dir = ./data/\n</code></pre></p>"},{"location":"download/#downloading-snpeff-databases","title":"Downloading SnpEff databases","text":"<p>In order to perform annotations, SnpEff automatically downloads and installs genomic database.</p> <p>Info</p> <p>By default SnpEff automatically downloads and installs the database for you, so you don't need to do it manually.</p> <p>Databases can be downloaded in three different ways:</p> <ul> <li>The easiest way is to let SnpEff download and install databases automatically</li> <li> <p>You can pre-install databases manually using the <code>SnpEff download</code> command (once SnpEff is installed).       E.g. to download the human genome database:</p> <pre><code> java -jar snpEff.jar download GRCh38.76\n</code></pre> <p>Note: Current human genome version at the time of writing is GRCh38.76.</p> </li> </ul>"},{"location":"download/#available-databases","title":"Available databases","text":"<p>There are over 20,000 databases available.</p> <p>A list of databases is available in snpEff.config file. You can also see all available databases by running the following command (once SnpEff has been installed):</p> <pre><code>java -jar snpEff.jar databases\n</code></pre>"},{"location":"download/#source-code","title":"Source code","text":""},{"location":"download/#getting-the-source","title":"Getting the source","text":"<p>The source code is in GitHub (although we keep the binary distribution is at SourceForge). Here is the <code>git</code> command to check out the development version of the code:</p> <pre><code># Get SnpEff\ngit clone https://github.com/pcingola/SnpEff.git\n\n# Get SnpSift as well\ngit clone https://github.com/pcingola/SnpSift.git\n</code></pre>"},{"location":"download/#building-from-the-source","title":"Building from the source","text":"<p>Most libraries should be install using Maven, so you just need to run <code>mvn</code> command.</p> <ul> <li>Java (JDK)</li> <li>ANT</li> <li>Maven</li> </ul> <p>Some libraries are not available through maven, so you have to install them into via Maven manually (these libraries are in <code>SnpEff/lib</code>) <pre><code># Go to 'lib' dir\ncd SnpEff/lib\n\n# Antlr\nmvn install:install-file \\\n    -Dfile=antlr-4.5.1-complete.jar \\\n    -DgroupId=org.antlr \\\n    -DartifactId=antlr \\\n    -Dversion=4.5.1 \\\n    -Dpackaging=jar\n\n# BioJava core\nmvn install:install-file \\\n    -Dfile=biojava3-core-3.0.7.jar \\\n    -DgroupId=org.biojava \\\n    -DartifactId=biojava3-core \\\n    -Dversion=3.0.7 \\\n    -Dpackaging=jar\n\n# BioJava structure\nmvn install:install-file \\\n    -Dfile=biojava3-structure-3.0.7.jar \\\n    -DgroupId=org.biojava \\\n    -DartifactId=biojava3-structure \\\n    -Dversion=3.0.7 \\\n    -Dpackaging=jar\n</code></pre> Once the libraries are installed, you can use <code>make.sh</code> to build the code <pre><code>cd $HOME/snpEff\n\n# Create link to scripts_build directory if it doesn't exist\nln -s $HOME/workspace/SnpEff/scripts_build\n\n# Invoke the build script\n./scripts_build/make.sh\n</code></pre></p>"},{"location":"download/#installing-test-cases","title":"Installing test cases","text":"<p>Test cases require special \"test cases databases and genome\", you can find them here:</p> <pre><code># Install test databases in SnpEff's development directory (not the soruce code dir!)\ncd $HOME/snpEff\n\n# Download databases and genome for test cases\nwget https://snpeff.blob.core.windows.net/databases/test_cases.tgz\n\n# Uncompress\ntar -xvzf test_cases.tgz\n\n# Go to Eclipse's workspace directory (where the source code is)\ncd $HOME/workspace/SnpEff\n\n# Create a link to the 'data' dir, so that we can run test cases within Eclipse\nln -s $HOME/snpEff/data\n\n# Add data dir to 'gitignore'\necho \"/data\" &gt;&gt; .gitignore\n</code></pre>"},{"location":"examples/","title":"Usage examples","text":""},{"location":"examples/#materials","title":"Materials","text":"<p>In this protocol we show how to analyze genomic variants using the SnpEff pipeline.</p> <p>Computer hardware: The materials required for this protocol are:</p> <ul> <li>a computer running a Unix operating system (Linux, OS.X),</li> <li>at least 16GB of RAM</li> <li>at least 8Gb of free disk space,</li> <li>Java</li> <li>a reasonably fast internet connection</li> </ul> <p>Users of Windows computers can install CygWin, a free Linux-like environment for Windows, although the precise commands listed in the protocol may need to adapted.</p> <p>Software: We use the SnpEff annotation program and its companion tool SnpSift. These programs can perform annotation, primary impact assessment and variants filtering, as well as many other tasks beyond the scope of this protocol. We highly recommend reading their comprehensive documentation available here.</p> <p>Before starting the protocol, it is necessary to download and install SnpEff. To do this, open a Unix, Linux or Cygwin shell and execute the following commands: <pre><code># Move to home directory\ncd\n\n# Download and install SnpEff\ncurl -v -L 'https://snpeff.blob.core.windows.net/versions/snpEff_latest_core.zip' &gt; snpEff_latest_core.zip\nunzip snpEff_latest_core.zip\n</code></pre></p> <p>Notes:</p> <ul> <li>SnpEff &amp; SnpSift annotation software used in this protocol are under very active development and some command line option may change in the future.</li> <li>The standard installation is to add the package in the \"$HOME/snpEff\" directory (where $HOME is your home directory). To install SnpEff elsewhere, update the \"data_dir\" parameter in your \"snpEff.config\" file, as described in the SnpEff documentation.</li> </ul> <p>Once SnpEff is installed, we will enter the following commands to download the pre-built human database (GRCh37.75) that will be used to annotate our data. <pre><code>cd snpEff\njava -jar snpEff.jar download -v GRCh37.75\n</code></pre></p> <p>A list of pre-built databases for all other species is available by running the following command:</p> <pre><code>java -jar snpEff.jar databases\n</code></pre>"},{"location":"examples/#example-1-coding-variants","title":"Example 1: Coding variants","text":"<p>We show how to use SnpEff &amp; SnpSift to annotate, prioritize and filter coding variants.</p> <p>Dataset: In this genomic annotation example, we use a simulated dataset to show how to find genetic variants of a Mendelian recessive disease, Cystic fibrosis, caused by a high impact coding variant, a nonsense mutation in CFTR gene (G542*). The data files come from the publicly available \"CEPH_1463\" dataset, sequenced by Complete Genomics, and contains sequencing information for a family consisting of 4 grandparents, 2 parents and 11 siblings.</p> <p></p> <p>Although these are healthy individuals, we artificially introduced a known Cystic fibrosis mutation on three siblings (cases) in a manner that was consistent with the underlying haplotype structure.</p> <p>We now download and un-compress the example data used in this protocol, which, for reasons of space and time, is limited to only chromosome 7 and 17: <pre><code># Go to SnpEff's dir\ncd ~/snpEff\n\n# Download sample data\ncurl -v -L `https://datasetsnpeff.blob.core.windows.net/dataset/protocols.zip?sv=2019-10-10&amp;st=2020-09-01T00%3A00%3A00Z&amp;se=2050-09-01T00%3A00%3A00Z&amp;si=prod&amp;sr=c&amp;sig=isafOa9tGnYBAvsXFUMDGMTbsG2z%2FShaihzp7JE5dHw%3D` &gt; protocols.zip\nunzip protocols.zip\n</code></pre></p> <p>The goal in this example is to use SnpEff to find a mutation causing a Mendelian recessive trait. This will be done using a dataset of variant calls for chromosome 7 from a pedigree of 17 healthy individuals, sequenced by Complete Genomics, in which a coding variant causing cystic fibrosis was artificially introduced in three siblings (see Materials). For the purpose of this example, we assume that we do not know the causative variant, but that we know that we are dealing with a Mendelian recessive disorder, where the three siblings are affected (cases), but the 14 parents and grandparents are not (controls).</p> <p>Genomic variants are usually provided in a VCF file containing variant information of all the samples; storing the variant data in a single VCF file is the standard practice, not only because variant calling algorithms have better accuracy when run on all samples simultaneously, but also because it is much easier to annotate, manipulate and compare individuals when the data is stored and transferred together. A caveat of this approach is that VCF files can become very large when performing experiments with thousands of samples (from several Gigabytes to Terabytes in size).</p> <p>In the following protocol, SnpEff will add annotation fields to each variant record in the input VCF file. We will then use SnpSift, a filtering program to extract the most significant variants having annotations meeting certain criteria.</p>"},{"location":"examples/#step-1-primary-variant-annotation-and-quality-control","title":"Step 1: Primary variant annotation and quality control.","text":"<p>Our first step is to annotate each of the ~500,000 variants contained in the VCF file. By default, SnpEff adds primary annotations and basic impact assessment for coding and non-coding variants as described above. SnpEff has several command line options that can be used in this annotation stage and which are described in detail in the online manual.</p> <p>In this example, we annotate (all these annotations are activated by default when using SnpEff):</p> <ul> <li>loss of function and nonsense mediated decay predictions;</li> <li>protein domain annotations from the curated NextProt database;</li> <li>putative transcription factor binding sites from the ENSEMBL 'Regulatory Build' and Jaspar database;</li> <li>use HGVS notation for amino acid changes; and</li> <li>to create a web page summarizing the annotation results in \"ex1.html\" (option <code>-stats</code>):<pre><code>java -Xmx8g -jar snpEff.jar -v -stats ex1.html GRCh37.75 protocols/ex1.vcf &gt; protocols/ex1.ann.vcf\n</code></pre> </li> </ul> <p>SnpEff produces three output files :</p> <ul> <li>the HTML file containing summary statistics about the variants and their annotations;</li> <li>an annotated VCF file; and</li> <li>a text file summarizing the number of variant types per gene.</li> </ul> <p>Creation of the summary files can be de-activated to speed up the program (for example, when the application is used together with Galaxy). By default, the statistics file \"ex1.html\" is a standard HTML file that can be opened in any web browser to view quality control (QC) metrics. It can also be created in comma-separated values format (CSV) to be used by downstream processing programs as part of an automated pipeline. In our example, the summary file contains basic quality control statistics calculated from the variant file: for our data, the Ts/Ts ratio is close to 2.0 (Figure 1c) and missense / silent ratio is around 1.0 (Figure 1d), both of which are expected for human data (but these numbers may differ for other species).</p> <p></p> <p>Large deviations from the expected values for the organism being sequenced might indicate problems with either the sequencing or variant calling pipelines. The summary file also contains QC information for the gene annotation used as input. In this example, 829 warnings (Figure 1a) were identified as a result of possible genomic annotation errors or small inconsistencies identified in the reference genome so we have to be careful analyzing those genes/transcripts. Other summary statistics are available, such as variant types (Figure 1e), variants effects (Figure 1d and 1g), and primary impacts (Figure 1b and 1g).</p>"},{"location":"examples/#step-2-counting-variants-in-case-and-control-subjects","title":"Step 2: Counting variants in case and control subjects.","text":"<p>In the first step of our protocol, SnpEff created a VCF file with half million annotated variants. Rather than scanning each annotation manually, we will use the SnpSift program to create a filter that will identify a small subset of variants with interesting functional properties. Since the VCF files used in most sequencing studies are even larger than the one in this example, our overall approach is to start by creating a filter using a very restrictive set of criteria. If no relevant variant is found using this stringent filter, we will relax the criteria to include variants with lower predicted impact.</p> <p>In our example, since the pedigree is consistent with a Mendelian recessive disease, so we will first use SnpEff to find high impact variants that are homozygous in cases and either absent or heterozygous in controls. This provides a very strong genetic argument to select the promising variants and will be used as the first step in our filter. To do this, we will identify the case and control samples by providing SnpEff with pedigree information using a \"TFAM\" file (a standard file format used to describe pedigrees). In our example, the TFAM file (\"pedigree.tfam\") identifies the three cases (NA12879, NA12885, NA12886), and lists the other family members as controls. The \"caseControl\" command instructs the SnpSift program to count the number homozygous non-reference, heterozygous and allele count (number of non-reference alleles in each DNA sample) for both cases and controls groups (running time: ~60 minutes):</p> <pre><code>java -Xmx1g -jar SnpSift.jar \\\n    caseControl \\\n    -v \\\n    -tfam protocols/pedigree.tfam \\\n    protocols/ex1.ann.vcf \\\n    &gt; protocols/ex1.ann.cc.vcf\n</code></pre> <p>This analysis creates an output VCF file (\"ex1.ann.cc.vcf\") by adding new information to the INFO field for each variant: this includes information such as <code>Cases=1,1,3</code> and <code>Controls=8,6,22</code> which correspond to the number of homozygous non-reference, heterozygous and total allele counts in cases and controls for each variant. The program also calculates basic statistics for each variant based on the allele frequencies in the two groups using different models, which can be useful as a starting point for more in-depth statistical analysis.</p>"},{"location":"examples/#step-3-filtering-variants","title":"Step 3: Filtering variants.","text":"<p>We can use the <code>SnpSift filter</code> command to reduce the number of candidate loci base on alleles in cases and controls. SnpSift filter allows users to create powerful filters that select variants using Boolean expressions containing data from the VCF fields. The expression we use to filter the VCF file \"ex1.ann.vcf\" is developed as follows.</p> <p>We expect all the three cases and none of the controls to be homozygous for the mutation. This is expressed using the following filter: <code>(Cases[0] = 3) &amp; (Controls[0] = 0)</code> The full command line is:</p> <pre><code>cat protocols/ex1.ann.cc.vcf | java -jar SnpSift.jar filter \\\n    \"(Cases[0] = 3) &amp; (Controls[0] = 0)\" \\\n    &gt; protocols/ex1.filtered.hom.vcf\n</code></pre> <p>The filtered output file, filtered.hom_cases.vcf, contains over 400 variants satisfying our criteria. This is still too large to analyze by hand, so can we can add another filter to see if any of these variants is expected to have a high impact. To identify variants where any of these impacts is classified as either <code>HIGH</code> or <code>MODERATE</code> we add the condition <code>(ANN[*].IMPACT = 'HIGH') | (ANN[*].IMPACT = 'MODERATE')</code>. The new filtering commands become:</p> <p><pre><code>cat protocols/ex1.ann.cc.vcf \\\n    | java -jar SnpSift.jar filter \\\n    \"(Cases[0] = 3) &amp; (Controls[0] = 0) &amp; ((ANN[*].IMPACT = 'HIGH') | (ANN[*].IMPACT = 'MODERATE'))\" \\\n    &gt; protocols/ex1.filtered.vcf\n</code></pre> After filtering, only two variants satisfy our criteria, one of them is a <code>stop_gained</code> loss of function variant, whereas the other one is a <code>missense_variant</code> amino acid change. The first one is a known Cystic fibrosis variant. <pre><code>$ cat protocols/ex1.filtered.vcf     | ./scripts/vcfInfoOnePerLine.pl\n7   117227832   .   G    T      .    .\n                                AC      14\n                                AN      22\n                                ANN     T|stop_gained|HIGH|CFTR|ENSG00000001626|transcript|ENST00000003084|protein_coding|12/27|c.1624G&gt;T|p.Gly542*|1756/6128|1624/4443|542/1480||\n                                ANN     T|stop_gained|HIGH|CFTR|ENSG00000001626|transcript|ENST00000454343|protein_coding|11/26|c.1441G&gt;T|p.Gly481*|1573/5949|1441/4260|481/1419||\n                                ANN     T|stop_gained|HIGH|CFTR|ENSG00000001626|transcript|ENST00000426809|protein_coding|11/26|c.1534G&gt;T|p.Gly512*|1534/4316|1534/4316|512/1437||WARNING_TRANSCRIPT_INCOMPLETE\n                                ANN     T|sequence_feature|LOW|CFTR|ENSG00000001626|topological_domain:Cytoplasmic|ENST00000003084|protein_coding||c.1624G&gt;T||||||\n                                ANN     T|sequence_feature|LOW|CFTR|ENSG00000001626|domain:ABC_transporter_1|ENST00000003084|protein_coding||c.1624G&gt;T||||||\n                                ANN     T|sequence_feature|LOW|CFTR|ENSG00000001626|beta_strand|ENST00000003084|protein_coding|12/27|c.1624G&gt;T||||||\n                                ANN     T|sequence_feature|LOW|CFTR|ENSG00000001626|beta_strand|ENST00000454343|protein_coding|11/26|c.1441G&gt;T||||||\n                                ANN     T|upstream_gene_variant|MODIFIER|AC000111.5|ENSG00000234001|transcript|ENST00000448200|processed_pseudogene||n.-1C&gt;A|||||1362|\n                                ANN     T|downstream_gene_variant|MODIFIER|CFTR|ENSG00000001626|transcript|ENST00000472848|processed_transcript||n.*148G&gt;T|||||29|\n                                LOF     (CFTR|ENSG00000001626|11|0.27)\n                                NMD     (CFTR|ENSG00000001626|11|0.27)\n                                Cases   3\n                                Cases   0\n                                Cases   6\n                                Controls        0\n                                Controls        8\n                                Controls        8\n                                CC_TREND        9.111e-04\n                                CC_GENO NaN\n                                CC_ALL  4.025e-02\n                                CC_DOM  6.061e-03\n                                CC_REC  1.000e+00\n\n17    39135205   .    ACA       GCA,GCG .       .\n                                AC      16\n                                AC      8\n                                AN      31\n                                ANN     GCG|missense_variant|MODERATE|KRT40|ENSG00000204889|transcript|ENST00000377755|protein_coding||c.1045_1047delTGTinsCGC|p.Cys349Arg|1082/1812|1045/1296|349/431||\n                                ANN     GCG|missense_variant|MODERATE|KRT40|ENSG00000204889|transcript|ENST00000398486|protein_coding||c.1045_1047delTGTinsCGC|p.Cys349Arg|1208/1772|1045/1296|349/431||\n                                ANN     GCA|synonymous_variant|LOW|KRT40|ENSG00000204889|transcript|ENST00000377755|protein_coding|6/7|c.1047T&gt;C|p.Cys349Cys|1082/1812|1047/1296|349/431||\n                                ANN     GCA|synonymous_variant|LOW|KRT40|ENSG00000204889|transcript|ENST00000398486|protein_coding|8/9|c.1047T&gt;C|p.Cys349Cys|1208/1772|1047/1296|349/431||\n                                ANN     GCA|sequence_feature|LOW|KRT40|ENSG00000204889|region_of_interest:Coil_2|ENST00000398486|protein_coding|6/9|c.1047T&gt;C||||||\n                                ANN     GCG|sequence_feature|LOW|KRT40|ENSG00000204889|region_of_interest:Coil_2|ENST00000398486|protein_coding|7/9|c.1045_1047delTGTinsCGC||||||\n                                ANN     GCA|sequence_feature|LOW|KRT40|ENSG00000204889|region_of_interest:Rod|ENST00000398486|protein_coding|3/9|c.1047T&gt;C||||||\n                                ANN     GCG|sequence_feature|LOW|KRT40|ENSG00000204889|region_of_interest:Rod|ENST00000398486|protein_coding|3/9|c.1045_1047delTGTinsCGC||||||\n                                ANN     GCA|3_prime_UTR_variant|MODIFIER|KRT40|ENSG00000204889|transcript|ENST00000461923|nonsense_mediated_decay|8/9|n.*509T&gt;C|||||2348|\n                                ANN     GCG|3_prime_UTR_variant|MODIFIER|KRT40|ENSG00000204889|transcript|ENST00000461923|nonsense_mediated_decay|8/9|n.*507_*509delTGTinsCGC|||||2346|\n                                ANN     GCA|downstream_gene_variant|MODIFIER|AC004231.2|ENSG00000234477|transcript|ENST00000418393|antisense||n.*815A&gt;G|||||3027|\n                                ANN     GCG|downstream_gene_variant|MODIFIER|AC004231.2|ENSG00000234477|transcript|ENST00000418393|antisense||n.*815_*815delACAinsGCG|||||3027|\n                                ANN     GCA|non_coding_exon_variant|MODIFIER|KRT40|ENSG00000204889|transcript|ENST00000461923|nonsense_mediated_decay|8/9|n.*509T&gt;C||||||\n                                ANN     GCG|non_coding_exon_variant|MODIFIER|KRT40|ENSG00000204889|transcript|ENST00000461923|nonsense_mediated_decay|8/9|n.*507_*509delTGTinsCGC||||||\n                                Cases   3\n                                Cases   0\n                                Cases   6\n                                Controls        0\n                                Controls        12\n                                Controls        18\n                                CC_TREND        7.008e-02\n                                CC_GENO NaN\n                                CC_ALL  1.700e-01\n                                CC_DOM  1.231e-01\n                                CC_REC  1.000e+00\n</code></pre> A chart showing how the variant propagates across the pedigree structure can be created as follows: <pre><code>java -jar SnpSift.jar pedShow \\\n    protocols/pedigree.tfam \\\n    protocols/ex1.filtered.vcf \\\n    protocols/chart\n</code></pre></p>"},{"location":"examples/#step-4-using-clinical-databases","title":"Step 4. Using clinical databases.","text":"<p>So far, since the purpose of the example was to show how annotations and filtering are performed to uncover new variants, we assumed that the causative variant was not known. In reality the variant is known and databases, such as ClinVar, have this information in convenient VCF format that can be used for annotations.</p> <p>We can annotate using ClinVar by using the following command: <pre><code>java -Xmx1g -jar SnpSift.jar \\\n    annotate \\\n    -v \\\n    protocols/db/clinvar_00-latest.vcf \\\n    protocols/ex1.ann.cc.vcf \\\n    &gt; protocols/ex1.ann.cc.clinvar.vcf\n</code></pre></p> <p>Our variant of interest is then annotated as \"Cystic Fibrosis\"  (to find the variant, we filter for variants having ClinVar annotation \"CLNDBN\" that are in CFTR gene and have a <code>stop_gained</code> annotation): <pre><code>$ cat protocols/ex1.ann.cc.clinvar.vcf \\\n    | java -jar SnpSift.jar filter \\\n    \"(exists CLNDBN) &amp; (ANN[*].EFFECT has 'stop_gained') &amp; (ANN[*].GENE = 'CFTR')\" \\\n    &gt; protocols/ex1.ann.cc.clinvar.filtered.vcf\n\n$ cat protocols/ex1.ann.cc.clinvar.filtered.vcf | ./scripts/vcfInfoOnePerLine.pl\n7    117227832    rs113993959      G    T       .    .\n                                                AC              14\n                                                AN              22\n                                                ANN             T|stop_gained|HIGH|CFTR|ENSG00000001626|transcript|ENST00000003084|protein_coding|12/27|c.1624G&gt;T|p.Gly542*|1756/6128|1624/4443|542/1480||\n                                                ANN             T|stop_gained|HIGH|CFTR|ENSG00000001626|transcript|ENST00000454343|protein_coding|11/26|c.1441G&gt;T|p.Gly481*|1573/5949|1441/4260|481/1419||\n                                                ANN             T|stop_gained|HIGH|CFTR|ENSG00000001626|transcript|ENST00000426809|protein_coding|11/26|c.1534G&gt;T|p.Gly512*|1534/4316|1534/4316|512/1437||WARNING_TRANSCRIPT_INCOMPLETE\n                                                ANN             T|sequence_feature|LOW|CFTR|ENSG00000001626|topological_domain:Cytoplasmic|ENST00000003084|protein_coding||c.1624G&gt;T||||||\n                                                ANN             T|sequence_feature|LOW|CFTR|ENSG00000001626|domain:ABC_transporter_1|ENST00000003084|protein_coding||c.1624G&gt;T||||||\n                                                ANN             T|sequence_feature|LOW|CFTR|ENSG00000001626|beta_strand|ENST00000003084|protein_coding||c.1624G&gt;T||||||\n                                                ANN             T|sequence_feature|LOW|CFTR|ENSG00000001626|beta_strand|ENST00000454343|protein_coding||c.1441G&gt;T||||||\n                                                ANN             T|upstream_gene_variant|MODIFIER|AC000111.5|ENSG00000234001|transcript|ENST00000448200|processed_pseudogene||n.-1C&gt;A|||||1362|\n                                                ANN             T|downstream_gene_variant|MODIFIER|CFTR|ENSG00000001626|transcript|ENST00000472848|processed_transcript||n.*148G&gt;T|||||29|\n                                                LOF             (CFTR|ENSG00000001626|11|0.27)\n                                                NMD             (CFTR|ENSG00000001626|11|0.27)\n                                                Cases           3\n                                                Cases           0\n                                                Cases           6\n                                                Controls        0\n                                                Controls        8\n                                                Controls        8\n                                                CC_TREND        9.111e-04\n                                                CC_GENO         NaN\n                                                CC_ALL          4.025e-02\n                                                CC_DOM          6.061e-03\n                                                CC_REC          1.000e+00\n                                                ASP             true\n                                                CLNACC          RCV000007535.6|RCV000058931.3|RCV000119041.1\n                                                CLNALLE         1\n                                                CLNDBN          Cystic_fibrosis|not_provided|Hereditary_pancreatitis\n                                                CLNDSDB         GeneReviews:MedGen:OMIM:Orphanet:SNOMED_CT|MedGen|GeneReviews:MedGen:OMIM:Orphanet:SNOMED_CT\n                                                CLNDSDBID       NBK1250:C0010674:219700:ORPHA586:190905008|CN221809|NBK84399:C0238339:167800:ORPHA676:68072000\n                                                CLNHGVS         NC_000007.13:g.117227832G&gt;T\n                                                CLNORIGIN       1\n                                                CLNREVSTAT      prof|single|single\n                                                CLNSIG          5|5|5\n                                                CLNSRC          CFTR2|HGMD|OMIM_Allelic_Variant|OMIM_Allelic_Variant\n                                                CLNSRCID        G542X|CM900049|602421.0009|602421.0095\n                                                GENEINFO        CFTR:1080\n                                                LSD             true\n                                                NSN             true\n                                                OM              true\n                                                PM              true\n                                                PMC             true\n                                                REF             true\n                                                RS              113993959\n                                                RSPOS           117227832\n                                                S3D             true\n                                                SAO             1\n                                                SSR             0\n                                                VC              SNV\n                                                VLD             true\n                                                VP              0x050268000605040002110100\n                                                WGT             1\n                                                dbSNPBuildID    132\n</code></pre></p>"},{"location":"examples/#example-2-software-integration-gatk-galaxy","title":"Example 2: Software Integration (GATK &amp; Galaxy)","text":"<p>Software Integration (Optional): Sequence analysis software is often run in high performance computers combining several programs into processing pipelines. Annotations and impact assessment software needs to provide integration points with other analysis steps of the pipeline.</p> <p>In the following paragraphs we describe how to integrate SnpEff with two programs commonly used in sequencing analysis pipelines:</p> <ul> <li>Genome Analysis toolkit (GATK 2), a command-line driven software;</li> <li>Galaxy 3, a web based software.</li> </ul>"},{"location":"examples/#gatk","title":"GATK","text":"<p>The Genome Analysis Toolkit 2 is one of the most popular programs for bioinformatics pipelines.</p> <p>Annotations can be easily integrated into GATK using SnpEff and GATK's VariantAnnotator module. Here we show how to annotate a file using SnpEff and GATK, as an alternative way of performing step 1. You should perform this step only if your processing pipeline is based on GATK: compared to running SnpEff from the command line, the results obtained when using GATK will only contain the highest impact annotation for each variant. This was a conscious trade-off made by the designers of GATK, partly because most biologists do this implicitly when reading a list of variants, but also to improve the readability and reduce the size of the annotation results.</p> <p>The method requires two steps:</p> <ol> <li>Annotating a VCF file using SnpEff</li> <li>Using GATK's VariantAnnotator to incorporate those annotations into the final VCF file.</li> </ol> <p>When using SnpEff for GATK compatibility, we must use the <code>-o gatk</code> command line option: <pre><code>java -Xmx8g -jar snpEff.jar \\\n    -v \\\n    -o gatk \\\n    GRCh37.75 \\\n    protocols/ex1.vcf \\\n    &gt; protocols/ex1.ann.gatk.vcf\n</code></pre></p> <p>Next, we process these variants using GATK. For this step to work correctly, we need to make sure that our data files are compatible with the requirements GATK places on reference genomes (see GATK's documentation for more details):</p> <ul> <li>in the fasta file, chromosomes are expected to be sorted in karyotypic order;</li> <li>a genome fasta-index file must be available; and</li> <li>a dictionary file must be pre-computed.</li> </ul> <p>Assuming these requirements are satisfied, we can run the following command, which will produce a GATK annotated file (\"ex1.gatk.vcf\"): <pre><code>java -Xmx8g -jar $HOME/tools/gatk/GenomeAnalysisTK.jar \\\n    -T VariantAnnotator \\\n    -R $HOME/genomes/GRCh37.75.fa \\\n    -A SnpEff \\\n    --variant protocols/ex1.vcf \\\n    --snpEffFile protocols/ex1.ann.gatk.vcf \\\n    -L protocols/ex1.vcf \\\n    -o protocols/ex1.gatk.vcf\n</code></pre></p> <p>Note: We assumed GATK is installed in \"$HOME/tools/gatk/\" and the reference genome is contained in \"$HOME/genomes/GRCh37.75.fa\" These file locations should be adapted to the actual path in your computer.</p>"},{"location":"examples/#galaxy","title":"Galaxy","text":"<p>Anther popular tool in bioinformatics is Galaxy 3, which allows pipelines to be created in a web environment using graphical interface, making it flexible and straightforward to use. SnpEff provides Galaxy modules.</p> <p>Once these modules are installed, we can run our sample annotation pipeline in Galaxy.</p> <p></p>"},{"location":"examples/#example-3-non-coding-variants","title":"Example 3: Non-Coding variants","text":"<p>We show how to use SnpEff &amp; SnpSift to annotate, prioritize and filter non-coding variants.</p> <p>Dataset: This example shows how to perform basic annotation of non-coding variants. It is based on a short list of 20 non-coding that were identified by sequencing a 700 kb region surrounding the gene T-box transcription factor (TBX5) in 260 patients with congenital heart disease 67. TBX5 is a transcription factor that plays a well-established dosage-dependent role in heart and limb development. Coding mutations in TBX5 have been frequently identified in patients with Holt-Oram syndrome, which is associated with abnormal hand, forearm and cardiac development.</p> <p>Data source: Regulatory variation in a TBX5 enhancer leads to isolated congenital heart disease.</p>"},{"location":"examples/#step-1-annotating-variants","title":"Step 1. Annotating variants.","text":"<p>We will perform non-coding variant annotation using SnpEff following a similar approach to Procedure I. In this case, we construct a command line that instructs SnpEff to include motif information (\"-motif\") and putative transcription factor binding sites (TFBS) identified in the ENSEMBL Regulatory Build and the Jaspar database:</p> <pre><code>java -Xmx8g -jar snpEff.jar \\\n    -v \\\n    -motif \\\n    GRCh37.75 \\\n    protocols/ex2.vcf \\\n    &gt; protocols/ex2.ann.basic.vcf\n</code></pre>"},{"location":"examples/#step-2-adding-custom-regulatory-information","title":"Step 2. Adding custom regulatory information.","text":"<p>A quick scan through the results shows that most variants are catalogued as \"INTERGENIC\", and none of them is associated with a known TFBS. This is not surprising since TFBS are small and also because regulatory elements involved in cardiac or limb development may not be widely active in commonly studied adult tissues. In this case, basic annotations did not provide additional information that can be used to narrow down the list of candidate SNVs.</p> <p>To solve this, the authors examined data from other sources, including ChIP-seq data for H3K4me1 (a post-translationally modified histone protein found in transcriptionally active genome regions, including enhancers and promoters). Data produced from ChIP-Seq analysis are frequently published in BED, BigBed or similar formats, which can be used directly by SnpEff by adding the <code>-interval</code> command line option.</p> <p>This command line option can be used to add annotations using ChIP-Seq experiments from the ENCODE and Epigenome Roadmap projects: since multiple <code>-interval</code> options are allowed in each command line, it is a simple way to combine several annotations:</p> <p><pre><code>java -Xmx8g -jar snpEff.jar \\\n    -v \\\n    -motif \\\n    -interval protocols/ex2_regulatory.bed \\\n    GRCh37.75 \\\n    protocols/ex2.vcf \\\n    &gt; protocols/ex2.ann.vcf\n</code></pre> In the output VCF file, variants intersecting genomic regions from the <code>-interval</code> command line option are annotated as <code>\"CUSTOM[ex2_regulatory]\"</code> :  the name in brackets identifies the file name provided to distinguish multiple annotation files.</p>"},{"location":"examples/#step-3-adding-conservation-information","title":"Step 3. Adding conservation information.","text":"<p>In order to refine our search, we can also look for variants in highly conserved non-coding bases. SnpEff natively supports PhastCons scores, but can also add annotations based on any other user-defined score provided as a Wig or VCF file.</p> <p>The command line for annotating using the PhastCons score is: <pre><code>java -Xmx1g -jar SnpSift.jar \\\n    phastCons \\\n    -v \\\n    protocols/phastcons \\\n    protocols/ex2.ann.vcf \\\n    &gt; protocols/ex2.ann.cons.vcf\n</code></pre></p> <p>Now we can filter our results looking for a highly conserved SNP in the regulatory region. We do this by using a \"SnpSift filter\" command and the appropriate Boolean expression: <pre><code>cat protocols/ex2.ann.cons.vcf \\\n    | java -jar SnpSift.jar filter \\\n    \"(ANN[*].EFFECT = 'CUSTOM[ex2_regulatory]') &amp; (exists PhastCons) &amp; (PhastCons &gt; 0.9)\" \\\n    &gt; protocols/ex2.filtered.vcf\n</code></pre></p> <p>SnpSift filter supports a flexible syntax to create Boolean expressions using the annotation data that provides a versatile way to prioritize shorter lists of SNPs for subsequent validation. This syntax is described in detail in the online manual. In this example, our filter results in only two candidate SNPs, one of which was extensively validated in the original study and is assumed to be causative.</p> <p>The principles illustrated in our example for a small set of SNVs can be applied to millions of variants from whole genome sequencing experiments. Similarly, although we filtered the SNVs using \"custom\" ChIP-seq data that provided in the original study, regulatory information from public Encode or Epigenome Roadmap datasets could be used in a first line investigation before generating our own Chip-seq or RNA-seq data using disease-relevant cells and tissues.</p>"},{"location":"examples/#example-4-sequencing-data-analysis","title":"Example 4: Sequencing data analysis","text":"<p>Here we show an example on how to get from Sequencing data to an annotated variants file.</p>"},{"location":"examples/#sequencing-data-example","title":"Sequencing data example","text":"<p>Warning</p> <p>This is an extremely simplified version on how to analyze the data from scratch. This is not meant to be a tutorial on sequencing analysis as it would be way beyond the scope of this handbook.</p> <p>Let's assume you have sequence data in FASTQ format (file \"s.fastq\") and your reference genome is dm5.34 (fly genome) <pre><code># Download the genome, uncompress and rename file\nwget ftp://ftp.flybase.net/genomes/Drosophila_melanogaster/dmel_r5.34_FB2011_02/fasta/dmel-all-chromosome-r5.34.fasta.gz\ngunzip dmel-all-chromosome-r5.34.fasta.gz\nmv dmel-all-chromosome-r5.34.fasta dm5.34.fasta\n\n# Create a genome index (we assume you installed BWA)\nbwa index -bwtsw dm5.34.fasta\n\n# Map sequences to the genome: Create SAI file\nbwa aln -bwtsw dm5.34.fasta s.fastq &gt; s.sai\n\n# Map sequences to the genome: Create SAM file\nbwa samse dm5.34.fasta s.sai s.fastq &gt; s.sam\n\n# Create BAM file (we assume you installed SamTools)\nsamtools view -S -b s.sam &gt; s.bam\n\n# Sort BAM file (will create s_sort.bam)\nsamtools sort s.bam s_sort\n\n# Create VCF file (BcfTools is part of samtools distribution)\nsamtools mpileup -uf dm5.34.fasta s_sort.bam | bcftools view -vcg - &gt; s.vcf\n\n# Analyze variants using snpEff\njava -Xmx8g -jar snpEff.jar dm5.34 s.vcf &gt; s.ann.vcf\n</code></pre></p> <p>This highly simplified sequencing data analysis pipeline, has these basic steps:</p> <ol> <li>Index the reference genome (bwa)</li> <li>Map reads to reference genome (bwa)</li> <li>Call variants (bcftools)</li> <li>Annotate variants (SnpEff)</li> </ol>"},{"location":"examples/#example-5-filter-out-variants-dbsnp","title":"Example 5: Filter out variants (dbSnp)","text":"<p>Here we show an example on how to get from Sequencing data to an annotated variants file.</p> <p>These are slightly more advanced examples. Here we'll try to show how to perform specific tasks.</p> <p>If you want to filter out SNPs from dbSnp, you can do it using SnpSift. You can download SnpSift from the \"Downloads\" page.</p> <p>You can download the file for this example here.</p> <p>Here is how to do it:</p> <ol> <li> <p>Annotate ID fields using <code>SnpSift annotate</code> and DbSnp.</p> <pre><code># Annotate ID field using dbSnp\n# Note: SnpSift will automatically download and uncompress dbSnp database if not locally available.\njava -jar SnpSift.jar annotate -dbsnp file.vcf &gt; file.dbSnp.vcf\n</code></pre> <p>Info</p> <p>We annotate using dbSnp before using SnpEff in order to have 'known' and 'unknown' statistics in SnpEff's summary page. Those stats are based on the presence of an ID field. If the ID is non-empty, then it is assumed to be a 'known variant'.</p> </li> <li> <p>Annotate using SnpEff:</p> <pre><code>java -Xmx8g -jar snpEff.jar eff -v GRCh37.75 file.dbSnp.vcf &gt; file.ann.vcf\n</code></pre> </li> <li> <p>Filter out variants that have a non-empty ID field.     These variants are the ones that are NOT in dbSnp, since we annotated the ID field using rs-numbers from dbSnp in step 1.</p> <pre><code>java -jar SnpSift.jar filter -f file.ann.vcf \"! exists ID\" &gt; file.ann.not_in_dbSnp.vcf\n</code></pre> <p>Info</p> <p>The expression using to filter the file is \"! exists ID\". This means that the ID field does not exists (i.e. the value is empty) which is represented as a dot (\".\") in a VCF file.</p> </li> </ol> <p>Pipes</p> <p>Obviously you can perform the three previous commands, pipeling the out from one command to the next, thus avoiding the creation of intermediate files (for very large projects, this can be a significant amount of time).</p> <p>Info</p> <p>In SnpEff &amp; SnpSift the STDIN is denoted by file name <code>\"-\"</code></p> <p>So the previous commands would be: <pre><code>java -jar SnpSif.jar annotate -dbsnp file.vcf \\\n    | java -Xmx8g -jar snpEff.jar eff -v GRCh37.75 - \\\n    | java -jar SnpSift.jar filter \"! exists ID\" \\\n    &gt; file.ann.not_in_dbSnp.vcf\n</code></pre></p> <p>Here is an example of some entries in the annotated output file. You can see the 'ANN' field was added, predicting STOP_GAINED protein changes: <pre><code>$ cat demo.1kg.snpeff.vcf | grep stop_gained\n1    889455    .    G    A    100.0    PASS    ...;ANN=A|stop_gained|HIGH|...\n1    897062    .    C    T    100.0    PASS    ...;ANN=T|stop_gained|HIGH|...\n1    900375    .    G    A    100.0    PASS    ...;ANN=A|stop_gained|HIGH|...\n</code></pre> Note: The real output was edited for readability reasons.</p>"},{"location":"examples/#example-6-custom-annotations","title":"Example 6: Custom annotations","text":"<p>SnpEff can annotate using user specified (custom) genomic intervals, allowing you to add any kind of annotations you want.</p> <p>In this example, we are analyzing using a specific version of the Yeast genome (we will assume that the database is not available, just to show a more complete example). We also want to add annotations of genomic regions known as 'ARS', which are defined in a GFF file. This turns out to be quite easy, thanks to SnpEff's \"custom intervals\" feature. SnpEff allows you to add \"custom\" annotations from intervals in several formats: TXT, BED, BigBed, VCF, GFF.</p> <p>So, for this example, we need to:</p> <ul> <li>Build the database: For the sake of this example, we are assuming that SnpEff doesn't have this database (which is not true in most real life situations).</li> <li>Create a file with the features we want to analyze (ARS)</li> <li>Annotate using the ARS features</li> </ul>"},{"location":"examples/#step-1-build-database","title":"Step 1: Build database.","text":"<p>Once more, this is done for the sake of the example, in real life Yeast databases are available and you don't need to build the database yourself. <pre><code>#---\n# Download data\n#---\n$ cd ~/snpEff\n$ mkdir data/sacCer\n$ cd data/sacCer\n$ wget http://downloads.yeastgenome.org/curation/chromosomal_feature/saccharomyces_cerevisiae.gff\n$ mv saccharomyces_cerevisiae.gff genes.gff\n</code></pre></p> <p>Now that we've downloaded the reference genome, we can build the database: <pre><code>#---\n# Build\n#---\n$ cd ../..\n\n# Add entry to config file\n$ echo \"sacCer.genome : Yeast\" &gt;&gt; snpEff.config\n\n# Build database\n$ java -Xmx1G -jar snpEff.jar build -gff3 sacCer\n</code></pre></p>"},{"location":"examples/#step-2-create-custom-annotations-file","title":"Step 2: Create custom annotations file.","text":"<p>We need a file that has our features of interest (in this case, the \"ARS\" features). Since those features ara available in the original GFF (saccharomyces_cerevisiae.gff) file, we can filter the file to create our \"custom\" annotations file.</p> <pre><code>#---\n# Create a features file\n#---\n\n# GFF files have both genomic records and sequences, we need to know\n# where the 'records' section ends (it is delimited by a \"##FASTA\" line)\n$ grep -n \"^#\" data/sacCer/genes.gff | tail -n 1\n22994:##FASTA\n\n# Note that I'm cutting the INFO column (only for readability reasons)\n$ head -n 22994 data/sacCer/genes.gff \\\n    | grep -v \"^#\" \\\n    | grep ARS  \\\n    | cut -f 1 -d \";\" \\\n    &gt; sacCer_ARS_features.gff\n</code></pre> <p>So now we have a custom file ready to be used.</p>"},{"location":"examples/#step-3-annotate","title":"Step 3: Annotate.","text":"<p>We built the database and we have the ARS features file, so we are ready to annotate: <pre><code>#---\n# Features annotations example\n#---\n\n# Create a fake VCF file (one line), this is just an example to show that it works\n$ echo -e \"chrI\\t700\\t.\\tA\\tT\\t.\\t.\\t.\" &gt; my.vcf\n\n$ java -jar snpEff.jar -interval sacCer_features.gff sacCer my.vcf &gt; my.ann.vcf\n</code></pre></p> <p>If we take a look at the results, we can see that the \"ARS\" feature is annotates (see last line) <pre><code>$ cat my.ann.vcf | grep -v \"^#\" | cut -f 8 | tr \",;\" \"\\n\\n\"\nEFF=missense_variant(LOW|MISSENSE|Cca/Tca|p.Pro55Ser/c.163A&gt;T|84|YAL068W-A|protein_coding|CODING|YAL068W-A_mRNA|1|1|WARNING_REF_DOES_NOT_MATCH_GENOME)\nupstream_gene_variant(MODIFIER||1780||75|YAL067W-A|protein_coding|CODING|YAL067W-A_mRNA||1)\ndownstream_gene_variant(MODIFIER||1107||120|YAL068C|protein_coding|CODING|YAL068C_mRNA||1)\ndownstream_gene_variant(MODIFIER||51||104|YAL069W|protein_coding|CODING|YAL069W_mRNA||1)\ncustom[sacCer_features](MODIFIER||||||ARS102||||1)\n</code></pre></p>"},{"location":"help/","title":"Help, New databases and Bugs","text":"<p>This project is maintained by Pablo Cingolani</p>"},{"location":"help/#asking-for-help","title":"Asking for help","text":"<p>Please send any questions by creating issues in repositories:</p> <ul> <li>SnpEff - https://github.com/pcingola/SnpEff/issues</li> <li>SnpSift - https://github.com/pcingola/SnpSift/issues</li> </ul> <p>Warning</p> <p>Important: In order to assess and your problem precisely, I must be able to reproduce your example.</p> <p>Any request for help should include at least the following items:</p> Item Explanation Example What? A clear explanation of what you are trying to achieve \"I want to annotate variants... and then filter them to obtain...\" How? A minimal demonstration of how you are trying to do it \"we run the following command...\". Make sure you send the exact command lines you are using. Which? Which organism and genome version you are using \"we are analyzing human samples using GRCh37.72 reference genome\" Version Which SnpEFf version and sub-version you are using? Make sure to try the latest version since the issue might be already solved. \"we are using SnpEFf 3.3H\"). Hint: Running <code>java -jar snpEff.jar</code> shows version information. Command line The full command line that shows the issue. <code>java -Xmx8g -jar snpEff.jar GRCh37.75 sample.vcf ...</code> Data Sample data enough to reproduce the conditionsAlways attach the data files such as VCF lines (even if you added some snippets in the email's body) \"find attached a sample of the VCF file...\" Results What you expect to obtain \"we wanted to get information on variants that affect splcie regions...\" <p>Note: A few guidelines when asking for help...</p> <ul> <li> <p>Use the latest version. May be the issue has already been corrected.</p> </li> <li> <p>Read the documentation first. Please make sure you've read the documentation before asking fo help.         I know this is obvious, but a lot of people ask for questions in that are answered, or shown as examples in the documentation.</p> </li> <li> <p>If the documentation did not help. I'm aware that the documentation is not always \"easy reading\".         So let me know which part of the manual is confusing, outdated or plain wrong.         I'll do my best to update and improve the docs.</p> </li> <li> <p>Be polite. This one should be obvious, but there is a reason it's in the list...</p> </li> <li> <p>I'm too busy. I always try to help people, but oftentimes I'm busy and I won't be able to answer your emails &amp; requests in due time and manner.      Apologies in advanced.</p> </li> <li> <p>If I don't get back to you... Do remind me if I don't get back to you within a few days.       Sometimes I'm swamped with work or just out of town, a polite reminder helps.</p> </li> <li> <p>Ask for too much advice. I don't mind helping, I've been doing it forever.       However I won't be able to help you with all the details (due to limited bamdwith), so most times, the best I can do is to provide some pointers and general advise you can follow up on.</p> </li> </ul>"},{"location":"help/#bug-reports","title":"Bug reports","text":"<p>Please send any bug reports by creating issues in repositories:</p> <ul> <li>SnpEff:  https://github.com/pcingola/SnpEff/issues</li> <li>SnpSift: https://github.com/pcingola/SnpSift/issues</li> </ul> <p>Warning</p> <p>Important: In order to assess and fix the issue, I must be able to reproduce exactly your error condition.</p> <p>This means that I need the following information:</p> Item Explanation Example What? A clear explanation of the bug condition.Please copy the full stack trace if one is available. \"a RuntimeException occurss when trying to annotate...\" How? A minimal bug-demonstrating test case \"when running the following command/s...\". Make sure you send the exact command lines you are using. Which? Which organism and genome version you are using (if applicable) \"we use GRCh37.72\" Version Which SnpEFf version and sub-version you are using? Make sure to try the latest version since the bug might be already fixed. \"we are using SnpEFf 3.3H\"). Hint: Running <code>java -jar snpEff.jar</code> shows version information. Command line The full command line that shows the issue. <code>java -Xmx8g -jar snpEff.jar GRCh37.75 sample.vcf ...</code> Data Sample data enough to reproduce the conditionsAlways attach the data files such as VCF lines (even if you added some snippets in the email's body) \"find attached a sample of the VCF file...\" Results What you expect to obtain (if applicable) \"we expected result X, but we obtained Y instead...\" <p>Important tips:</p> <ul> <li> <p>Make sure you attached a minimal dataset to reproduce the error condition.     For instance, a few VCF lines showing the problem are enough (sometimes one VCF line is enough), most of the times I don't need the whole VCF file.</p> </li> <li> <p>Always send the data attached, even if it's only one VCF line. Many times the problem is a malformed line, which I can only asses if the data is attached, and</p> </li> <li> <p>If you have to send large files, as sometimes happens with genome references, try uploading them to a server (e.g. Google Drive) and sending me a link. Remember to always compress them.</p> </li> <li> <p>Try SnpEff's latest version.     SnpEff is updated often, may be the bug has already been corrected (e.g you are using version 5.0A, but I've already fixed it in version 5.0B).</p> </li> </ul>"},{"location":"help/#asking-for-new-features","title":"Asking for new features","text":"<p>I always take into account features request. So don't hesitate to send me your ideas by creating issues in repositories:</p> <ul> <li>SnpEff:  https://github.com/pcingola/SnpEff/issues</li> <li>SnpSift: https://github.com/pcingola/SnpSift/issues</li> </ul> <p>Of course, it  doesn't mean I'll get all suggestions implemented as soon as I get a request. But if a lot of people are asking for the same feature, it is a strong indicator that I should try to implement it.</p> <p>Please, don't be frustrated if I tell you I cannot implement your suggestion / idea. Keep in mind that some features are too difficult to implement for non-obvious reasons, e.g.:</p> <ul> <li>SnpEff uses some standard (e.g. VCF) and new features cannot break those standards.</li> <li>SnpEff is used by a LOT of people in MANY different pipelines. New features must be compatible with current infrastructure and cannot break operational production pipelines.</li> <li>Some feature requests are just too difficult to code, requiring large changes.</li> </ul>"},{"location":"help/#asking-for-new-database-genome","title":"Asking for new database / genome","text":"<p>I'm willing to help you out if you need to build a new database (a.k.a. add a new reference genome). Building a new database (i.e. adding a new reference genome) is relatively easy and the procedure is described in detail in the documentation. If you are unable to build the database, I can try to help you out. Please, create issue in repository: https://github.com/pcingola/SnpEff.</p> <p>In order to do so, I need you to send me the following information:</p> <ul> <li>Name of the species</li> <li>Reference genome version</li> <li>A link to the reference genome sequence (i.e. a link to the FASTA file)</li> <li>A link to a gene and transcript definition file (either GTF, GFF, GenBank, etc.)</li> <li>At least one of the following (preferably, both):<ul> <li>A link to the CDS sequences (FASTA file)</li> <li>A link to the protein sequences (FASTA files)</li> </ul> </li> <li>Codon table information (take a look a the codon tables in <code>snpEff.config</code> file):<ul> <li>Which codon table does the organism use? (e.g. <code>codon.Standard</code> or <code>codon.Mycoplasma</code>).</li> <li>Specific codon tables used by some chromosomes (e.g. chromosome <code>'MT'</code> uses <code>codon.Vertebrate_Mitochondrial</code> table)</li> </ul> </li> </ul> <p>I'm well aware that I could try to google that information myself, but I need you to send the information because I want to be absolutely sure we are using exactly the reference genome version, sub-version, and data files you need.</p>"},{"location":"help/#contact-information","title":"Contact information","text":"<p>Pablo Cingolani</p>"},{"location":"license/","title":"License","text":"<p>SnpEff is open source. It is released as MIT</p> <p>Copyright 2021, Pablo Cingolani</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"xiangyi_lu_donate/","title":"Xiangyi Lu Donate","text":""},{"location":"xiangyi_lu_donate/#in-memory-of-dr-xiangyi-lu","title":"In memory of Dr. Xiangyi Lu","text":"<p>Click here to donate</p> <p></p> <p>On October 22, 2017, Xiangyi Lu, a co-author on the SnpEff and SnpSift papers, died of ovarian cancer after a three year struggle.</p> <p>Douglas Ruden, Xiangyi's husband and senior author on the papers, has requested that a non-mandatory gift of at least $10 for using SnpEff or SnpSift be donated to WSU to honor Xiangyi Lu.</p> <p>All gifts will go to a newly named fund, the \"Xiangyi Lu Graduate Student Fellowship in Bioinformatics Fund.\" with the goal of raising $1 million, in order to permanently endow one graduate student research position in bioinformatics every year.</p>"},{"location":"xiangyi_lu_donate/#how-to-donate","title":"How to donate","text":"<ul> <li>Visit Wayne State University donation site</li> <li>Choose the amount that you would like to donate</li> <li>Click on the designation box and click on the option \"Other\"</li> <li>In the next box, enter: IMO Dr. Xiangyi Lu</li> <li>At the bottom of the page, click on \"Give Now.\"</li> </ul> <p>Donation page example:</p> <p></p>"},{"location":"snpeff/additionalann/","title":"Additional annotations","text":"<p>SnpEff can also provide non-coding and regulatory annotations. Here we show how to annotate them.</p>"},{"location":"snpeff/additionalann/#regulatory-annotations","title":"Regulatory annotations","text":"<p>Warning</p> <p>Non-coding and regulatory annotations databases are available only for a few organisms (e.g. human, mouse, etc.). We intend to incorporate more non-coding annotations as soon as public databases are available, but your organism of choice might not have a non-coding/regulatory database available.</p> <p>First of all, you need to see if your organism has a regulatory database. You can just look into the database directory to see if <code>regulation_*.bin</code> files are there. For instance, for human genome: <pre><code>$ cd ~/snpEff\n$ cd data/GRCh37.75/\n$ ls -al\ndrwxrwxr-x 2 pcingola pcingola     4096 Aug 26 19:51 .\ndrwxrwxr-x 3 pcingola pcingola     4096 Aug 26 19:51 ..\n-rw-rw-r-- 1 pcingola pcingola  5068097 Aug 26 19:51 motif.bin\n-rw-rw-r-- 1 pcingola pcingola  5469036 Aug 26 19:51 nextProt.bin\n-rw-rw-r-- 1 pcingola pcingola    38000 Aug 26 19:51 pwms.bin\n-rw-rw-r-- 1 pcingola pcingola  6399582 Aug 26 19:51 regulation_CD4.bin\n-rw-rw-r-- 1 pcingola pcingola  2516472 Aug 26 19:51 regulation_GM06990.bin\n-rw-rw-r-- 1 pcingola pcingola  8064939 Aug 26 19:51 regulation_GM12878.bin\n-rw-rw-r-- 1 pcingola pcingola  6309932 Aug 26 19:51 regulation_H1ESC.bin\n-rw-rw-r-- 1 pcingola pcingola  5247586 Aug 26 19:51 regulation_HeLa-S3.bin\n-rw-rw-r-- 1 pcingola pcingola  7506893 Aug 26 19:51 regulation_HepG2.bin\n-rw-rw-r-- 1 pcingola pcingola  4064952 Aug 26 19:51 regulation_HMEC.bin\n-rw-rw-r-- 1 pcingola pcingola  4644239 Aug 26 19:51 regulation_HSMM.bin\n-rw-rw-r-- 1 pcingola pcingola  5641615 Aug 26 19:51 regulation_HUVEC.bin\n-rw-rw-r-- 1 pcingola pcingola  5617233 Aug 26 19:51 regulation_IMR90.bin\n-rw-rw-r-- 1 pcingola pcingola   546871 Aug 26 19:51 regulation_K562b.bin\n-rw-rw-r-- 1 pcingola pcingola  8542718 Aug 26 19:51 regulation_K562.bin\n-rw-rw-r-- 1 pcingola pcingola  3119671 Aug 26 19:51 regulation_NH-A.bin\n-rw-rw-r-- 1 pcingola pcingola  5721741 Aug 26 19:51 regulation_NHEK.bin\n-rw-rw-r-- 1 pcingola pcingola 94345546 Aug 26 19:51 snpEffectPredictor.bin\n</code></pre> So we can annotate using any of those tracks.</p> <p>E.g. To use 'HeLa-S3' and 'NHEK' tracks, you can run: <pre><code>$ java -Xmx8g -jar snpEff.jar -v -reg HeLa-S3 -reg NHEK GRCh37.75 examples/test.1KG.vcf &gt; test.1KG.ann_reg.vcf\n00:00:00.000    Reading configuration file 'snpEff.config'. Genome: 'GRCh37.75'\n00:00:00.377    done\n00:00:00.377    Reading database for genome version 'GRCh37.75' from file '/home/pcingola/snpEff_v4_0/./data/GRCh37.75/snpEffectPredictor.bin' (this might take a while)\n00:00:25.845    done\n00:00:25.878    Reading regulation track 'NHEK'\n00:00:30.137    Reading regulation track 'HeLa-S3'\n...\n\n\n# Show one example of \"regulatory_region\" (output edited for readability)\n$ grep -i regulatory_region test.1KG.ann_reg.vcf | head -n 1 | ./scripts/vcfInfoOnePerLine.pl\n1    10291    .    C    T    2373.79    .    ANN=T|regulatory_region_variant|MODIFIER|||REGULATION&amp;H3K36me3:NHEK|NHEK_H3K36me3_5|||||||||\n                                                ,T|regulatory_region_variant|MODIFIER|||REGULATION&amp;H3K27me3:NHEK|NHEK_H3K27me3_4|||||||||\n                                                ,T|regulatory_region_variant|MODIFIER|||REGULATION&amp;Max:HeLa-S3|HeLa-S3_Max_26|||||||||\n                                                ,T|regulatory_region_variant|MODIFIER|||REGULATION&amp;Cfos:HeLa-S3|HeLa-S3_Cfos_30|||||||||\n                                                ,T|regulatory_region_variant|MODIFIER|||REGULATION&amp;FAIRE:HeLa-S3|HeLa-S3_FAIRE_49|||||||||\n                                                ,T|regulatory_region_variant|MODIFIER|||REGULATION&amp;H3K27ac:HeLa-S3|HeLa-S3_H3K27ac_88|||||||||\n                                                ,T|regulatory_region_variant|MODIFIER|||REGULATION&amp;PolII:NHEK|NHEK_PolII_59|||||||||\n                                                ,T|regulatory_region_variant|MODIFIER|||REGULATION&amp;CTCF:NHEK|NHEK_CTCF_42|||||||||\n                                                ,T|regulatory_region_variant|MODIFIER|||REGULATION&amp;Cmyc:HeLa-S3|HeLa-S3_Cmyc_16|||||||||\n                                                ,T|regulatory_region_variant|MODIFIER|||REGULATION&amp;H4K20me1:NHEK|NHEK_H4K20me1_122|||||||||\n                                                ,T|regulatory_region_variant|MODIFIER|||REGULATION&amp;H3K4me3:NHEK|NHEK_H3K4me3_133|||||||||\n                                                ,T|regulatory_region_variant|MODIFIER|||REGULATION&amp;DNase1:HeLa-S3|HeLa-S3_DNase1_108|||||||||\n                                                ,T|regulatory_region_variant|MODIFIER|||REGULATION&amp;DNase1:NHEK|NHEK_DNase1_63|||||||||\n                                                ,T|regulatory_region_variant|MODIFIER|||REGULATION&amp;FAIRE:NHEK|NHEK_FAIRE_149|||||||||\n</code></pre></p>"},{"location":"snpeff/additionalann/#encode","title":"ENCODE","text":"<p>ENCODE project's goal is to find all functional elements in the human genome. You can perform annotations using ENCODE's data.</p> <p>ENCODE project has produced huge amounts of data (see also Nature's portal). This information is available for download and can be used to annotate genomic variants or regions. An overview of all the data available from ENCODE is shown as an experimental data matrix. The download site is here.</p> <p>Data is available in \"BigBed\" format, which can be feed into SnpEff using <code>-interval</code> command line option (you can add many <code>-interval</code> options).</p> <p>Here is a simple example: <pre><code># Create a directory for ENCODE files\nmkdir -p db/encode\n\n# Download ENCODE experimental results (BigBed file)\ncd db/encode\nwget \"http://ftp.ebi.ac.uk/pub/databases/ensembl/encode/integration_data_jan2011/byDataType/openchrom/jan2011/fdrPeaks/wgEncodeDukeDnase8988T.fdr01peaks.hg19.bb\"\n\n# Annotate using ENCODE's data:\njava -Xmx8g -jar snpEff.jar -v -interval db/encode/wgEncodeDukeDnase8988T.fdr01peaks.hg19.bb GRCh37.75 examples/test.1KG.vcf &gt; test.1KG.ann_encode.vcf\n\n# Annotations are added as \"CUSTOM\" intervals:\n$ grep CUSTOM test.1KG.ann_encode.vcf | head\n1    564672    .    A    C    812.29    .    ANN=|custom|MODIFIER|||CUSTOM&amp;wgEncodeDukeDnase8988T|wgEncodeDukeDnase8988T:564666_564815|||||||||\n1    564687    .    C    T    308.21    .    ANN=T|custom|MODIFIER|||CUSTOM&amp;wgEncodeDukeDnase8988T|wgEncodeDukeDnase8988T:564666_564815|||||||||\n...\n1    956676    .    G    A    120.88    .    ANN=A|custom|MODIFIER|||CUSTOM&amp;wgEncodeDukeDnase8988T|wgEncodeDukeDnase8988T:956646_956795|||||||||\n...\n</code></pre></p>"},{"location":"snpeff/additionalann/#epigenome","title":"Epigenome","text":"<p>Epigenome Roadmap Project has produced large amounts of information that can be used by SnpEff.</p> <p>Epigenome Roadmap Project goal is \"to map DNA methylation, histone modifications, chromatin accessibility and small RNA transcripts in stem cells and primary ex vivo tissues selected to represent the normal counterparts of tissues and organ systems frequently involved in human disease\". A data matrix shows the experimental set ups currently available.</p> <p>Unfortunately the project is not (currently) providing results files that can be used directly by annotation software, such as SnpEff. They will be available later in the project. So, for the time being, data has to be downloaded an pre-processed. We'll be processing these information and making it available (as SnpEff databases) as soon as we can.</p> <p>The latest Epigenome project processed information, can be found here. This includes genomic intervals for high confidence peaks in form of <code>BED</code> files.</p> <p>To annotate you can do: <pre><code># Download Epigenome project database (pre-processed as BED files)\nwget https://snpeff.blob.core.windows.net/databases/epigenome_latest.tgz/download\n\n# Open tar file\ntar -xvzf epigenome_latest.tgz\n\n# Annotate using SnpEff and \"-interval\" command line\njava -Xmx8g -jar snpEff.jar -v -interval db/epigenome/BI_Pancreatic_Islets_H3K4me3.peaks.bed GRCh37.75 test.vcf &gt; test.ann.vcf\n\n# See the data represented as \"CUSTOM\" EFF fields\n$ grep CUSTOM test.ann.vcf\n1   894573  .   G   A   .   PASS    AC=725;EFF=CUSTOM[BI_Pancreatic_Islets_H3K4me3](MODIFIER||||||MACS_peak_8||||1),INTRON(MODIFIER||||749|NOC2L|protein_coding|CODING|ENST00000327044|1|1),INTRON(MODIFIER|||||NOC2L|processed_transcript|CODING|ENST00000487214|1|1),INTRON(MODIFIER|||||NOC2L|retained_intron|CODING|ENST00000469563|1|1),UPSTREAM(MODIFIER||||642|KLHL17|protein_coding|CODING|ENST00000338591||1),UPSTREAM(MODIFIER|||||KLHL17|nonsense_mediated_decay|CODING|ENST00000466300||1),UPSTREAM(MODIFIER|||||KLHL17|retained_intron|CODING|ENST00000463212||1),UPSTREAM(MODIFIER|||||KLHL17|retained_intron|CODING|ENST00000481067||1),UPSTREAM(MODIFIER|||||NOC2L|retained_intron|CODING|ENST00000477976||1)\n1   948692  .   G   A   .   PASS    AC=896;EFF=CUSTOM[BI_Pancreatic_Islets_H3K4me3](MODIFIER||||||MACS_peak_9||||1),INTERGENIC(MODIFIER||||||||||1),UPSTREAM(MODIFIER||||165|ISG15|protein_coding|CODING|ENST00000379389||1),UPSTREAM(MODIFIER|||||RP11-54O7.11|antisense|NON_CODING|ENST00000458555||1)\n1   948921  .   T   C   .   PASS    AC=904;EFF=CUSTOM[BI_Pancreatic_Islets_H3K4me3](MODIFIER||||||MACS_peak_9||||1),UPSTREAM(MODIFIER|||||RP11-54O7.11|antisense|NON_CODING|ENST00000458555||1),UTR_5_PRIME(MODIFIER||||165|ISG15|protein_coding|CODING|ENST00000379389|1|1)\n1   1099342 .   A   C   .   PASS    AC=831;EFF=CUSTOM[BI_Pancreatic_Islets_H3K4me3](MODIFIER||||||MACS_peak_10||||1),INTERGENIC(MODIFIER||||||||||1),UPSTREAM(MODIFIER|||||MIR200A|miRNA|NON_CODING|ENST00000384875||1),UPSTREAM(MODIFIER|||||MIR200B|miRNA|NON_CODING|ENST00000384997||1)\n</code></pre></p>"},{"location":"snpeff/additionalann/#nextprot","title":"NextProt","text":"<p>NextProt has useful proteomic annotations than can help to identify variants causing reduced protein functionality or even loss of function.</p> <p>Nextprot project provides proteomic information that can be used for genomic annotations. NextProt provides only human data.</p> <p>Starting from SnpEff version 4.0, these annotations are automatically added if the database is available for the genome version you are using (in older SnpEff versions the <code>-nextprot</code> command line option was used). NextProt databases are available by for in some GRCh37 genomes (e.g. file <code>data/GRCh37.75/nextProt.bin</code>).</p> <p>Annotations example: <pre><code>$ java -Xmx8g -jar snpEff.jar -v GRCh37.75 examples/test.chr22.vcf &gt; test.chr22.ann.vcf\n00:00:00.000    Reading configuration file 'snpEff.config'. Genome: 'GRCh37.75'\n00:00:00.374    done\n00:00:00.374    Reading database for genome version 'GRCh37.75' from file '/home/pcingola/snpEff_v4_0/./data/GRCh37.75/snpEffectPredictor.bin' (this might take a while)\n00:00:25.880    done\n00:00:25.913    Reading NextProt database from file '/home/pcingola/snpEff_v4_0/./data/GRCh37.75/nextProt.bin'\n...\n\n# Show some results (edited for readability)\n$ cat test.chr22.ann.vcf\n...\n22  17280941  .  T  C  .  .  ANN=C|sequence_feature|LOW|XKR3|ENSG00000172967|transmembrane_region:Transmembrane_region|ENST00000331428|protein_coding|2/4|c.336-27A&gt;G||||||,C|sequence_feature|LOW|XKR3|ENSG00000172967|transmembrane_region:Transmembrane_region|ENST00000331428|protein_coding|3/4|c.336-27A&gt;G||||||,C|intron_variant|MODIFIER|XKR3|ENSG00000172967|transcript|ENST00000331428|protein_coding|2/3|c.336-27A&gt;G||||||\n...\n22  17472785  .  G  A  .  .  ANN=A|sequence_feature|LOW|GAB4|ENSG00000215568|domain:PH|ENST00000400588|protein_coding|2/10|c.456C&gt;T||||||,A|sequence_feature|LOW|GAB4|ENSG00000215568|domain:PH|ENST00000400588|protein_coding|1/10|c.456C&gt;T||||||,A|non_coding_exon_variant|MODIFIER|GAB4|ENSG00000215568|transcript|ENST00000465611|nonsense_mediated_decay|2/9|n.339C&gt;T||||||,A|non_coding_exon_variant|MODIFIER|GAB4|ENSG00000215568|transcript|ENST00000523144|processed_transcript|2/4|n.341C&gt;T||||||\n...\n22  50722408  .  T  C  .  .  ANN=C|sequence_feature|MODERATE|PLXNB2|ENSG00000196576|glycosylation_site:N-linked__GlcNAc..._|ENST00000359337|protein_coding|14/37|c.2275A&gt;G||||||,C|sequence_feature|LOW|PLXNB2|ENSG00000196576|topological_domain:Extracellular|ENST00000359337|protein_coding|22/37|c.2275A&gt;G||||||,C|sequence_feature|LOW|PLXNB2|ENSG00000196576|topological_domain:Extracellular|ENST00000359337|protein_coding|8/37|c.2275A&gt;G||||||,C|sequence_feature|LOW|PLXNB2|ENSG00000196576|topological_domain:Extracellular|ENST00000359337|protein_coding|21/37|c.2275A&gt;G||||||,C|sequence_feature|LOW|PLXNB2|ENSG00000196576|topological_domain:Extracellular|ENST00000359337|protein_coding|16/37|c.2275A&gt;G||||||,C|sequence_feature|LOW|PLXNB2|ENSG00000196576|topological_domain:Extracellular|ENST00000359337|protein_coding|15/37|c.2275A&gt;G||||||,C|sequence_feature|LOW|PLXNB2|ENSG00000196576|topological_domain:Extracellular|ENST00000359337|protein_coding|17/37|c.2275A&gt;G||||||,C|sequence_feature|LOW|PLXNB2|ENSG00000196576|topological_domain:Extracellular|ENST00000359337|protein_coding|11/37|c.2275A&gt;G||||||,C|sequence_feature|LOW|PLXNB2|ENSG00000196576|topological_domain:Extracellular|ENST00000359337|protein_coding|14/37|c.2275A&gt;G||||||,C|sequence_feature|LOW|PLXNB2|ENSG00000196576|topological_domain:Extracellular|ENST00000359337|protein_coding|19/37|c.2275A&gt;G||||||,C|sequence_feature|LOW|PLXNB2|ENSG00000196576|topological_domain:Extracellular|ENST00000359337|protein_coding|18/37|c.2275A&gt;G||||||,C|sequence_feature|LOW|PLXNB2|ENSG00000196576|topological_domain:Extracellular|ENST00000359337|protein_coding|9/37|c.2275A&gt;G||||||,C|sequence_feature|LOW|PLXNB2|ENSG00000196576|topological_domain:Extracellular|ENST00000359337|protein_coding|20/37|c.2275A&gt;G||||||,C|sequence_feature|LOW|PLXNB2|ENSG00000196576|topological_domain:Extracellular|ENST00000359337|protein_coding|6/37|c.2275A&gt;G||||||,C|sequence_feature|LOW|PLXNB2|ENSG00000196576|topological_domain:Extracellular|ENST00000359337|protein_coding|3/37|c.2275A&gt;G||||||,C|sequence_feature|LOW|PLXNB2|ENSG00000196576|topological_domain:Extracellular|ENST00000359337|protein_coding|12/37|c.2275A&gt;G||||||,C|sequence_feature|LOW|PLXNB2|ENSG00000196576|topological_domain:Extracellular|ENST00000359337|protein_coding|7/37|c.2275A&gt;G||||||,C|sequence_feature|LOW|PLXNB2|ENSG00000196576|topological_domain:Extracellular|ENST00000359337|protein_coding|10/37|c.2275A&gt;G||||||,C|sequence_feature|LOW|PLXNB2|ENSG00000196576|topological_domain:Extracellular|ENST00000359337|protein_coding|4/37|c.2275A&gt;G||||||,C|sequence_feature|LOW|PLXNB2|ENSG00000196576|topological_domain:Extracellular|ENST00000359337|protein_coding|5/37|c.2275A&gt;G||||||,C|sequence_feature|LOW|PLXNB2|ENSG00000196576|topological_domain:Extracellular|ENST00000359337|protein_coding|13/37|c.2275A&gt;G||||||,C|upstream_gene_variant|MODIFIER|PLXNB2|ENSG00000196576|transcript|ENST00000479701|retained_intron||n.-1A&gt;G|||||1417|,C|upstream_gene_variant|MODIFIER|PLXNB2|ENSG00000196576|transcript|ENST00000463165|retained_intron||n.-1A&gt;G|||||2045|,C|upstream_gene_variant|MODIFIER|PLXNB2|ENSG00000196576|transcript|ENST00000492578|retained_intron||n.-1A&gt;G|||||1973|,C|upstream_gene_variant|MODIFIER|PLXNB2|ENSG00000196576|transcript|ENST00000427829|protein_coding||c.-3A&gt;G|||||1099|WARNING_TRANSCRIPT_INCOMPLETE,C|downstream_gene_variant|MODIFIER|PLXNB2|ENSG00000196576|transcript|ENST00000434732|protein_coding||c.*253A&gt;G|||||188|WARNING_TRANSCRIPT_INCOMPLETE,C|downstream_gene_variant|MODIFIER|PLXNB2|ENSG00000196576|transcript|ENST00000432455|protein_coding||c.*1620A&gt;G|||||4008|WARNING_TRANSCRIPT_NO_STOP_CODON,C|intron_variant|MODIFIER|PLXNB2|ENSG00000196576|transcript|ENST00000411680|protein_coding|2/5|c.202+5007A&gt;G||||||WARNING_TRANSCRIPT_INCOMPLETE,C|non_coding_exon_variant|MODIFIER|PLXNB2|ENSG00000196576|transcript|ENST00000496720|processed_transcript|6/8|n.510A&gt;G||||||\n</code></pre> The last line in the example shows a <code>glycosylation_site</code> marked as <code>MODERATE</code> impact, since a modification of such a site might impair protein function.</p>"},{"location":"snpeff/additionalann/#motif","title":"Motif","text":"<p>Motif annotations provided by ENSEMBL and Jaspar can be added to the standard annotations.</p> <p>ENSEMBL provides transcription factor binding sites prediction, for human and mouse genomes, using Jaspar motif database.</p> <p>As of SnpEff version 4.0, these annotations are added automatically, if the database is available for the genome version you are using (files <code>motif.bin</code> and <code>pwms.bin</code>). Older versions requires using the <code>-motif</code> command line option.</p> <p>Example of transcription factor binding sites prediction predictions: <pre><code>$ java -Xmx8g -jar snpEff.jar -v GRCh37.75 examples/test.chr22.vcf &gt; test.chr22.ann.vcf\n00:00:00.000    Reading configuration file 'snpEff.config'. Genome: 'GRCh37.75'\n00:00:00.393    done\n00:00:00.394    Reading database for genome version 'GRCh37.75' from file '/home/pcingola/snpEff_v4_0/./data/GRCh37.75/snpEffectPredictor.bin' (this might take a while)\n00:00:26.214    done\n00:00:26.248    Reading NextProt database from file '/home/pcingola/snpEff_v4_0/./data/GRCh37.75/nextProt.bin'\n00:00:27.386    NextProt database: 523361 markers loaded.\n00:00:27.387    Adding transcript info to NextProt markers.\n00:00:28.072    NextProt database: 706289 markers added.\n00:00:28.072    Loading Motifs and PWMs\n00:00:28.072        Loading PWMs from : /home/pcingola/snpEff_v4_0/./data/GRCh37.75/pwms.bin\n00:00:28.103        Loading Motifs from file '/home/pcingola/snpEff_v4_0/./data/GRCh37.75/motif.bin'\n00:00:28.862        Motif database: 284122 markers loaded.\n...\n\n# Show some examples (output edited for readability)\n$ cat test.chr22.ann.vcf\n...\n22  18301084  .  G  A  .  .  ANN=A|TF_binding_site_variant|MODIFIER|||Nrsf|MA0138.2|||||||||,A|TF_binding_site_variant|MODIFIER|||Nrsf|MA0138.1|||||||||,...\n...\n22  23523309  .  C  T  .  .  ANN=T|TF_binding_site_variant|LOW|||Gabp|MA0062.2|||||||||,...\n...\n22  36629223  .  G  C  .  .  ANN=C|TF_binding_site_variant|LOW|||SP1|MA0079.1|||||||||,...\n...\n</code></pre> So, for instance, the last annotation shown in the example is <code>TF_binding_site_variant|LOW|||SP1|MA0079.1</code> corresponding to motif MA0079.1, which you can look up in Jaspar.</p>"},{"location":"snpeff/build_db/","title":"Building databases","text":"<p>SnpEff needs a database to perform genomic annotations. There are pre-built databases for thousands of genomes, so chances are that your organism of choice already has a SnpEff database available. In the (unlikely?) event that you need to build one yourself, here we describe how to it.</p> <p>Info</p> <p>You can know which genomes are supported by running the following command:</p> <pre><code>java -jar snpEff.jar databases\n</code></pre> <p>Warning</p> <p>Most people do NOT need to build a database, and can safely use a pre-built one. So unless you are working with a rare genome you most likely don't need to do it either.</p>"},{"location":"snpeff/build_db/#managing-snpeff-databases-manually","title":"Managing SnpEff databases manually","text":"<p>SnpEff databases for the most popular genomes are already pre-built and available for you to download. So, chances are that you don't need to build a database yourself (this will save you a LOT of work).</p> <p>Warning</p> <p>By default SnpEff automatically downloads and installs the database for you, so you don't need to do it manually. The following instructions are for people that want to pre-install databases manually (again, most people don't need to do this).</p> <p>The easiest way to download and install a pre-built SnpEff database manually, is using the <code>download</code> command. E.g. if you want to install the SnpEff database for the human genome, you can run the following command:</p> <pre><code>java -jar snpEff.jar download -v GRCh37.75\n</code></pre>"},{"location":"snpeff/build_db/#backwards-compatible-databases","title":"Backwards compatible databases","text":"<p>In many cases the databases from previous SnpEff versions might be compatible with newer versions. So, SnpEff has a fallback mechanism for \"backwards-compatible database formats\". If database format version 5.1 is backward compatible with \"5.0\", then we can use the \"old\" (5.0) databases in SnpEff version 5.1</p> <p>For example, let's say GRCh38.99 was built for \"SnpEff version 5.0\". When I released version 5.1 I don't need to rebuild GRCh38.99 (or any of the other thousands of databases) again for 5.1, we can just use the \"old\" 5.0 versions.</p> <p>How does it work? SnpEff checks the database in \"5.1\" path, if it doesn't work it fallback to \"5.0\" path. If you take a look a SnpEff's download output using the <code>-v</code> command, you'll see that it tries two times:</p> <pre><code>$ java -jar snpEff.jar download -v GRCm38.99\n\n00:00:00 SnpEff version SnpEff 5.1d (build 2022-04-19 15:49), by Pablo Cingolani\n00:00:00 Command: 'download'\n00:00:00 Reading configuration file 'snpEff.config'. Genome: 'GRCm38.99'\n00:00:00 Reading config file: /Users/pcingola/snpEff/snpEff.config\n00:00:00 done\n00:00:00 Downloading database for 'GRCm38.99'\n00:00:00 Downloading from 'https://snpeff.blob.core.windows.net/databases/v5_1/snpEff_v5_1_GRCm38.99.zip' to local file '/var/folders/s9/y0bgs3l55rj_jkkkxr2drz4157r1dz/T//snpEff_v5_1_GRCm38.99.zip'\n00:00:00 Connecting to https://snpeff.blob.core.windows.net/databases/v5_1/snpEff_v5_1_GRCm38.99.zip\n00:00:01 Connecting to https://snpeff.blob.core.windows.net/databases/v5_1/snpEff_v5_1_GRCm38.99.zip, using proxy: false\n00:00:01 ERROR while connecting to https://snpeff.blob.core.windows.net/databases/v5_1/snpEff_v5_1_GRCm38.99.zip\n00:00:01 Downloading from 'https://snpeff.blob.core.windows.net/databases/v5_0/snpEff_v5_0_GRCm38.99.zip' to local file '/var/folders/s9/y0bgs3l55rj_jkkkxr2drz4157r1dz/T//snpEff_v5_0_GRCm38.99.zip'\n00:00:01 Connecting to **https://snpeff.blob.core.windows.net/databases/v5_0/snpEff_v5_0_GRCm38.99.zip**\n00:00:01 Connecting to https://snpeff.blob.core.windows.net/databases/v5_0/snpEff_v5_0_GRCm38.99.zip, using proxy: false\n00:00:02 Local file name: '/var/folders/s9/y0bgs3l55rj_jkkkxr2drz4157r1dz/T//snpEff_v5_0_GRCm38.99.zip'\n......\n</code></pre> <p>So, it starts searching at <code>https://snpeff.blob.core.windows.net/databases/v5_1/snpEff_v5_1_GRCm38.99.zip</code> bu<code>t it doesn't find it there, so it proceeds with the databse</code>5.0<code>path</code>https://snpeff.blob.core.windows.net/databases/v5_0/snpEff_v5_0_GRCm38.99.zip`, where the blob is found, thus proceeds to download and install it from there.</p> <p>Info</p> <p>If you are running SnpEff from a directory different than the one it was installed, you will have to specify where the config file is. This is done using the <code>-c</code> command line option:</p> <pre><code>java -Xmx8g -jar snpEff.jar download -c path/to/snpEff/snpEff.config -v GRCh37.75\n</code></pre>"},{"location":"snpeff/build_db/#building-a-database","title":"Building a database","text":"<p>In order to build a database for a new genome, you need to:</p> <p>Warning</p> <p>Most people do NOT need to build a database, and can safely use a pre-built one. So unless you are working with a rare genome you most likely don't need to do it either.</p> <ol> <li> <p>Step 1: Configure a new genome in SnpEff's config file <code>snpEff.config</code>.</p> <ol> <li>Add genome entry to snpEff's configuration</li> <li>If the genome uses a non-standard codon table: Add codon table parameter</li> </ol> </li> <li> <p>Step 2: Build using gene annotations and reference sequences</p> <ol> <li>Option 1: Building a database from GTF files (recommended for large genomes)</li> <li>Option 2: Building a database from GenBank files (recommended for small genomes)</li> <li>Option 3: Building a database from GFF files</li> <li>Option 4: Building a database from RefSeq table from UCSC</li> </ol> </li> <li> <p>Step 3: Checking the database: SnpEff will check the database by comparing predicted protein sequences and CDS sequences with ones provided by the user.</p> <ol> <li>Checking CDS sequences</li> <li>Checking Protein sequences</li> </ol> </li> </ol> <p>Info</p> <p>All files can be compressed using <code>gzip</code> E.g. the reference file 'hg19.fa' can be compressed to 'hg19.fa.gz', snpEff will automatically decompress the file.</p> <p>Warning</p> <p>Some files claimed to be compressed using GZIP are actually not or even use a block compression variant not supported by Java's gzip library. If you notice that your build process finishes abruptly for no apparent reason, try uncompressing the files.</p>"},{"location":"snpeff/build_db/#step-1-configure-a-new-genome","title":"Step 1: Configure a new genome","text":"<p>In order to tell SnpEff that there is a new genome available, you must update SnpEff's configuration file <code>snpEff.config</code>.</p> <p>You must add a new genome entry to <code>snpEff.config</code>.</p> <p>If your genome, or a chromosome, uses non-standard codon tables you must update <code>snpEff.config</code> accordingly. A typical case is when you use mitochondrial DNA. Then you specify that chromosome 'MT' uses <code>codon.Invertebrate_Mitochondrial</code> codon table. Another common case is when you are adding a bacterial genome, then you specify that the codon table is <code>Bacterial_and_Plant_Plastid</code>.</p>"},{"location":"snpeff/build_db/#add-a-genome-to-the-configuration-file","title":"Add a genome to the configuration file","text":"<p>This example shows how to add a new genome to the config files. For this example we'll use the mouse genome (mm37.61):</p> <ol> <li> <p>Edit the config file to create the new genome:</p> <pre><code>vi snpEff.config\n</code></pre> <p>Add the following lines (you are editing snpEff.config):</p> <pre><code># Mouse genome, version mm37.61\nmm37.61.genome : Mouse\n</code></pre> <p>Warning</p> <p>You may need to add codon table information for the genome or some parts of it (e.g. mitochondrial \"chromosome\"). See next section for details.</p> </li> <li> <p>Optional: Add genome to Galaxy's menu:</p> <pre><code>cd /path/to/galaxy\ncd tools/snpEffect/\nvi snpEffect.xml\n</code></pre> <p>Add the following lines to the file:</p> <pre><code>&lt;param name=\"genomeVersion\" type=\"select\" label=\"Genome\"&gt;\n&lt;option value=\"hg37\"&gt;Human (hg37)&lt;option&gt;\n&lt;option value=\"mm37.61\"&gt;Mouse (mm37.61)&lt;option&gt;\n&lt;param&gt;\n</code></pre> </li> </ol>"},{"location":"snpeff/build_db/#configuring-codon-tables-not-always-required","title":"Configuring codon tables (not always required)","text":"<p>Codon tables are provided in the <code>snpEff.config</code> configuration file under the section <code>codon.Name_of_your_codon_table</code>. The format is a comma separated list of <code>CODON/AMINO_ACID</code>.</p> <p>E.g.:</p> <pre><code>codon.Invertebrate_Mitochondrial:  TTT/F, TTC/F, TAC/Y, TAA/*, ATG/M+, ATG/M+, ACT/T, ...\n</code></pre> <p>Note that codons marked with '*' are STOP codons and codons marked with a '+' are START codons.</p> <p>In order for you to use them, you have to specify that a given \"chromosome\" uses one of the tables (otherwise the default codon table is used).</p> <p>E.g. Here we say the chromosome 'M' from fly genome (dm3) uses Invertebrate_Mitochondrial codon table:</p> <pre><code>dm3.M.codonTable : Invertebrate_Mitochondrial\n</code></pre> <p>...of course, chromosome 'M' is not a real chromosome, it is just a way to mark the sequence as mitochondrial DNA in the reference genome.</p>"},{"location":"snpeff/build_db/#step-2-build-using-gene-annotations-and-reference-sequences","title":"Step 2: Build using gene annotations and reference sequences","text":"<p>To build a database, SnpEff needs:</p> <ol> <li>The reference genome sequence: This is the sequence of all chromosomes in the genome, typically in a FASTA file</li> <li>Gene annotations files: This is the information on where the genes, transcripts and exons are in the genome. Typically, from files in GTF, GeneBank, GFF, or RefSeq formats</li> <li>Sequences of CDS or Proteins from the genome. These are used to check that SnpEff's database is consistent and doesn't have errors  (see sections Checking CDS sequences and Checking Protein sequences)</li> </ol>"},{"location":"snpeff/build_db/#step-2-option-1-building-a-database-from-gtf-files","title":"Step 2, Option 1: Building a database from GTF files","text":"<p>GTF 2.2 files are supported by SnpEff (e.g. ENSEMBL releases genome annotations in this format).</p> <p>See a more detailed explanation about SnpEff's requirements for GTF files here</p> <ol> <li> <p>Get the genome and uncompress it:</p> <pre><code># Create directory for this new genome\ncd /path/to/snpEff/data/\nmkdir mm37.61\ncd mm37.61\n\n# Get annotation files\nwget ftp://ftp.ensembl.org/pub/current/gtf/mus_musculus/Mus_musculus.NCBIM37.61.gtf.gz\nmv Mus_musculus.NCBIM37.61.gtf.gz genes.gtf.gz\n\n# Get the genome reference sequence file\ncd /path/to/snpEff/data/genomes\nwget ftp://ftp.ensembl.org/pub/current/fasta/mus_musculus/dna/Mus_musculus.NCBIM37.61.dna.toplevel.fa.gz\nmv Mus_musculus.NCBIM37.61.dna.toplevel.fa.gz mm37.61.fa.gz\n</code></pre> </li> <li> <p>Note: The FASTA file can be either in  <code>/path/to/snpEff/data/genomes/mm37.61.fa</code> or in  <code>/path/to/snpEff/data/mm37.61/sequences.fa</code></p> </li> <li>Add the new genome to the config file (see Add a new genome to the configuration file for details)</li> <li>Create database:<pre><code>cd /path/to/snpEff\njava -jar snpEff.jar build -gtf22 -v mm37.61\n</code></pre> </li> </ol>"},{"location":"snpeff/build_db/#step-2-option-2-building-a-database-from-genbank-files","title":"Step 2, Option 2: Building a database from GenBank files","text":"<p>In this section, we show how to build a genome database using GeneBank files.</p> <p>Info</p> <p>Using GeneBank files is the recommended way for databases for small genomes, such as viruses or bacteria</p> <p>Info</p> <p>For NCBI genomes, you can use the script <code>buildDbNcbi.sh</code> that downloads and builds the database. See details in this FAQ</p> <p>Example: This example shows how to create a database for a new genome.</p> <p>Info</p> <p>GenBank files usually include genome sequence as well as CDS sequences. If these sequences are NOT in the GeneBank file, you should provide separate FASTA files for genome reference and CDS (or Protein) sequences.</p> <p>For this example we'll use \"Staphylococcus aureus\":</p> <ol> <li>Go to NIH page for CP000730</li> <li>Download the features in geneBank format, by clicking as shown in the following images (red arrows):</li> </ol> <p></p> <p>Make sure you click the \"Update\" button!</p> <p>Then you go to the \"Send\" menu:</p> <p></p> <p>and then:</p> <p></p> <ol> <li>Save the GenBank data to <code>/path/to/snpEff/data/CP000730/genes.gbk</code></li> </ol> <p>Note: If there are more than one genbank file for an organism (e.g. multiple chromosomes), then you can download each file and concatenate them.</p> <p>E.g.: Vibrio Cholerae has two chromosomes with GenBank accessions: NC_002505.1 and NC_002506.1.    You can download both files and save them as <code>snpEff/data/vibrio/NC_002505.1.gbk</code> and <code>snpEff/data/vibrio/NC_002506.1.gbk</code> respectively, and then concatenate both files:</p> <pre><code>    cat NC_002505.1.gbk NC_002506.1.gbk &gt; genes.gbk\n</code></pre> <p>Add the following entries in the config file:</p> <pre><code>    # Vibrio Cholerae\n    vibrio.genome : Vibrio Cholerae\n            vibrio.chromosomes : NC_002505.1, NC_002506.1\n            vibrio.NC_002505.1.codonTable : Bacterial_and_Plant_Plastid\n            vibrio.NC_002506.1.codonTable : Bacterial_and_Plant_Plastid\n</code></pre> <ol> <li>Create database (note the <code>-genbank</code> flag):<pre><code>cd /path/to/snpEff\njava -jar snpEff.jar build -genbank -v CP000730\n</code></pre> </li> </ol>"},{"location":"snpeff/build_db/#step-2-option-3-building-a-database-from-gff-files","title":"Step 2, Option 3: Building a database from GFF files","text":"<p>Warning</p> <p>Using GFF is highly discouraged, we recommend you use GTF files instead (whenever possible).</p> <p>See a more detailed explanation about SnpEff's requirements for GFF files here</p> <p>This example shows how to create a database for a new genome using GFF file (e.g. FlyBase, WormBase, BeeBase release GFF files). For this example we'll use the Drosophila melanogaster genome (dm5.31):</p> <ol> <li> <p>Get a GFF file to <code>path/to/snpEff/data/dm5.31/genes.gff</code>:</p> <pre><code>mkdir path/to/snpEff/data/dm5.31\ncd path/to/snpEff/data/dm5.31\nwget ftp://ftp.flybase.net/genomes/Drosophila_melanogaster/dmel_r5.31_FB2010_08/gff/dmel-all-r5.31.gff.gz\nmv dmel-all-r5.31.gff.gz genes.gff.gz\n</code></pre> </li> <li> <p>Note: GFF3 files can include the reference sequence in the same file. This is done by dumping the fasta file after a '##FASTA' line. You can also add the sequence fasta file to the 'data/genomes/' directory, like it is done in when using GTF format.</p> </li> <li>Add the new genome to the config file (see Add a new genome to the configuration file for details)</li> <li>Create database (note the \"-gff3\" flag):<pre><code>cd /path/to/snpEff\njava -jar snpEff.jar build -gff3 -v dm5.31\n</code></pre> </li> </ol>"},{"location":"snpeff/build_db/#step-2-option-4-building-a-database-from-refseq-table-from-ucsc","title":"Step 2, Option 4: Building a database from RefSeq table from UCSC","text":"<p>This example shows how to create a database for a new genome using UCSC's genome tables. For this example we'll use the Human genome (hg19).</p> <p>Warning</p> <p>Using UCSC genome tables is highly discouraged, we recommend you use ENSEMBL versions instead.</p> <p>Warning</p> <p>UCSC tables sometimes change for different species. This means that even if these instructions work for human genome, it might not work for other genomes. Obviously creating a new parser for each genome is impractical, so working with UCSC genomes is highly discouraged. We recommend to use ENSEMBL genomes instead.</p> <p>Warning</p> <p>UCSC genomes provide only major release version, but NOT sub-versions. E.g. UCSC's \"hg19\" has major version 19 but there is no \"sub-version\", whereas ENSEMBL's GRCh37.70 clearly has major version 37 and minor version 70. Not providing a minor version means that they might change the database and two \"hg19\" genomes are actually be different. This creates all sorts of consistency problems (e.g. the annotations may not be the same that you see in the UCSC genome browser, even though both of them are 'hg19' version). Using UCSC genome tables is highly discouraged, we recommend you use ENSEMBL versions instead.</p> <p>In order to build a genome using UCSC tables, you can follow these instructions:</p> <ol> <li>Go to UCSC genome browser</li> <li>Click on \"Table\" menu</li> <li> <p>Select parameters as shown here:</p> <p></p> </li> <li> <p>Click on \"get output\" and save the data to file \"/path/to/snpEff/data/hg19/genes.refseq\".</p> </li> <li> <p>Add the fasta reference genome. The FASTA file can be either in:</p> <p><code>/path/to/snpEff/data/genomes/hg19.fa</code></p> <p>or in:</p> <p><code>/path/to/snpEff/data/hg19/sequences.fa</code></p> </li> <li> <p>Add the new genome to the config file (see Add a new genome to the configuration file for details)</p> </li> <li>Create database (note the <code>-refSeq</code> flag):<pre><code>cd /path/to/snpEff\njava -jar snpEff.jar build -refSeq -v hg19\n</code></pre> </li> </ol>"},{"location":"snpeff/build_db/#step-3-checking-the-database","title":"Step 3: Checking the database","text":"<p>SnpEff makes sure that the database is built correctly by comparing the internal representation with CDS and Protein sequences. The CDS and Protein sequences are obtained from the same source as the genome reference and gene annotation files.</p> <p>IMPORTANT: When building databases, SnpEff will attempt to check the database against a CDS FASTA file and a Protein FASTA file. If neither a CDS FASTA file nor a Protein FASTA file is provided, this check will fail and SnpEff will refuse to save the database, by showing error message like this one:</p> <pre><code>ERROR: CDS check file './data/MY_GENOME/cds.fa' not found.\nERROR: Protein check file './data/MY_GENOME/protein.fa' not found.\nERROR: Database check failed.\n</code></pre> <p>Warning</p> <p>If neither a \"Protein\" nor a \"CDS\" sequences are provided, SnpEff will not be able to check the database. By default, SnpEff will refuse to save any unchecked database.</p> <p>You can override this behaviour by using the <code>build</code> command with these command line options:</p> <ul> <li><code>-noCheckCds</code>: Skip CDS sequences check.</li> <li><code>-noCheckProtein</code>: Skip Protein sequences check.</li> <li><code>-noCheckCds -noCheckProtein</code>: When using BOTH command line options, SnpEff to save the new database without checking it (i.e. neither CDS nor protein sequences are checked).</li> </ul>"},{"location":"snpeff/build_db/#checking-cds-sequences","title":"Checking CDS sequences","text":"<p>When building a database, SnpEff will try to check CDS sequences for all transcripts in the database when</p> <ul> <li>building via GFT/GFF/RefSeq: A CDS sequences FASTA file is available.</li> <li>building via GenBank file: CDS sequences are available within the GenBank file</li> </ul> <p>Info</p> <p>You can disable this check unsing command line option <code>-noCheckCds</code></p> <p>FASTA cds file format:</p> <ul> <li>The file name should be <code>cds.fa</code> (or <code>cds.fa.gz</code> if compressed)</li> <li>Each transcript should have one CDS sequence</li> <li>Each FASTA header has the transcript ID either:<ul> <li>The header contains only the transcript ID</li> <li>The header contains Transcript ID and maybe other IDs separated by either spaces, commas, colon, dots, equal sign, or some combination of these</li> <li>Some example sequences with valid header examples: <pre><code>&gt;ENST00000448914\nACTGGGGGATACG\n\n&gt;chromosome:GRCh38:14:22449113:22449125:1 transcript:ENST00000448914.1 cds gene:ENSG00000228985.1 gene_biotype:TR_D_gene transcript_biotype:TR_D_gene gene_symbol:TRDD3 description:T cell receptor delta diversity 3\nACTGGGGGATACG\n</code></pre></li> </ul> </li> </ul> <p>CSD checking output. When run using the <code>-v</code> (verbose) command line option, for each transcript in the FASTA file, SnpEff will output one character</p> <ul> <li><code>+</code>: OK, the CDS sequence matches the one predicted by SnpEff</li> <li><code>.</code>: Missing transcript. SnpEff could not find the transcript ID from the FASTA file. This might indicate a problem parsing the FASTA file header to find the</li> <li><code>*</code>: Error. The CDS sequence from inferred from SnpEff's database and the one provided in the CDS file do not match.</li> </ul> <p>After these line a \"Summary statistics\" line shows the total number of FASTA entries checked, as well as the number of errors (and a percentage), e.g.:</p> <pre><code>CDS check:  GRCh38.86   OK: 94384   Warnings: 22766 Not found: 103618   Errors: 0   Error percentage: 0.0%\n</code></pre> <p>Warning</p> <p>As a \"rule of the thumb\", you should not get more than 2% or 3% of errors.</p> <p>Info</p> <p>Debugging: You can run SnpEff using <code>-d</code> (debug) command line option to get detailed messages for each CDS sequence comparison. The message shows the transcript ID, CDS sequence inferred by SnpEff's, and the CDS sequence from the FASTA file, as well as the places where they differ.</p>"},{"location":"snpeff/build_db/#checking-protein-sequences","title":"Checking Protein sequences","text":"<p>This is very similar to the CDS checking in the previous sub-section. When building a database, SnpEff will also try to check Protein sequences for all transcripts when</p> <ul> <li>building via GFT/GFF/RefSeq: A protein sequences FASTA file is available.</li> <li>building via GenBank file: protein sequences are available within the GenBank file</li> </ul> <p>Info</p> <p>You can disable this check unsing command line option <code>-noCheckProtein</code></p> <p>FASTA protein file:</p> <ul> <li>The file name should be <code>protein.fa</code> (or <code>protein.fa.gz</code> if compressed)</li> <li>Each transcript should have one protein sequence</li> <li>Each FASTA header has the transcript ID either:<ul> <li>The header contains only the transcript ID</li> <li>The header contains Transcript ID and maybe other IDs separated by either spaces, commas, colon, dots, equal sign, or some combination of these</li> <li>Some example sequences with valid header examples (sequences have been cut for readability): <pre><code>&gt;ENST00000382044\nMPGEQMDPTGSQLDSDFSQQDTPCLIIEDSQPESQVLEDDSGSHFSMLSRHLPNLQTHKE\nNPVLDVVSNPEQTAGEERGDGNSGFNEHLKENKVADPVDSSNLDTCGSISQVIEQLPQPN\nRTSSVLGMSVESAPAVEEEKGEELEQKEKEKEEDTSGNTTHSLGAEDTASSQLGFGVLEL\n...\n\n&gt;ENSP00000371475 pep chromosome:GRCh38:15:43403061:43493171:-1 gene:ENSG00000067369 transcript:ENST00000382044 gene_biotype:protein_coding transcript_biotype:protein_coding gene_symbol:TP53BP1 description:tumor protein p53 binding protein\nMPGEQMDPTGSQLDSDFSQQDTPCLIIEDSQPESQVLEDDSGSHFSMLSRHLPNLQTHKE\nNPVLDVVSNPEQTAGEERGDGNSGFNEHLKENKVADPVDSSNLDTCGSISQVIEQLPQPN\nRTSSVLGMSVESAPAVEEEKGEELEQKEKEKEEDTSGNTTHSLGAEDTASSQLGFGVLEL\n...\n</code></pre></li> </ul> </li> </ul> <p>Protein checking output:</p> <p>When run using the <code>-v</code> (verbose) command line option, for each transcript in the FASTA file, SnpEff will output one character:</p> <ul> <li><code>+</code>: OK, the protein sequence matches the one predicted by SnpEff</li> <li><code>.</code>: Missing transcript. SnpEff could not find the transcript ID from the FASTA file. This might indicate a problem parsing the FASTA file header to find the</li> <li><code>*</code>: Error. The Protein sequence from inferred from SnpEff's database and the one provided in the protein file do not match.</li> </ul> <p>After these line a \"Summary statistics\" line shows the total number of FASTA entries checked, as well as the number of errors (and a percentage), e.g.: <pre><code>Protein check:  GRCh38.86       OK: 94371       Not found: 0    Errors: 13      Error percentage: 0.01377352093575182%\n</code></pre></p> <p>Warning</p> <p>As a \"rule of the thumb\", the errors should be below 2% or 3%.</p> <p>How exactly protein sequences are compared The rules used for protein sequence comparison are:</p> <ul> <li>Comparison is case-insensitive</li> <li>Trailing STOP codon (<code>'*'</code>) is removed</li> <li>Trailing incomplete codon (<code>'?'</code>) is removed</li> <li>Leading incomplete codons (<code>'?'</code>) are removed</li> </ul> <p>If these comparisons fails, further attempts are made:</p> <ul> <li>Replace \"unknown\" codon characters: Codons using old <code>'X'</code> characters are replaced by newer <code>'?'</code> characters</li> <li>If any of the sequences only differ by the first codon, they are considered equal (the start codon is translates as 'Met' even when the codon code translates to another Amino acid)</li> <li>Replace rare amino acids, which often tranlate as stop codons in the middle of the sequence: E.g. replace <code>'*'</code> by <code>'U'</code></li> <li>Try replacing unknown aminco acids (<code>'?'</code>) by the ones at the same position in the protein sequence from the FASTA file</li> </ul> <p>If after all these attempts the protein sequence still do not match, they are considered \"not equal\".</p> <p>Info</p> <p>Debugging: You can run SnpEff using <code>-d</code> (debug) command line option to get detailed messages for each protein sequence comparison. The message shows the transcript ID, protein sequence inferred by SnpEff's, and the protein sequence from the FASTA file, as well as the places where they differ.</p>"},{"location":"snpeff/build_db/#example-building-the-human-genome-database","title":"Example: Building the Human Genome database","text":"<p>This is a full example on how to build the human genome database (using GTF file from ENSEBML), it includes support for regulatory features, sanity check, rare amino acids, etc.. <pre><code># Go to SnpEff's install dir\ncd ~/snpeff\n\n# Create database dir\nmkdir data/GRCh37.70\ncd data/GRCh37.70\n\n# Download annotated genes\nwget ftp://ftp.ensembl.org/pub/release-70/gtf/homo_sapiens/Homo_sapiens.GRCh37.70.gtf.gz\nmv Homo_sapiens.GRCh37.70.gtf.gz genes.gtf.gz\n\n# Download proteins\n# This is used for:\n#   - \"Rare Amino Acid\" annotations\n#   - Sanity check (checking protein predicted from DNA sequences match 'real' proteins)\nwget ftp://ftp.ensembl.org/pub/release-70/fasta/homo_sapiens/pep/Homo_sapiens.GRCh37.70.pep.all.fa.gz\nmv Homo_sapiens.GRCh37.70.pep.all.fa.gz protein.fa.gz\n\n# Download CDSs\n# Note: This is used as \"sanity check\" (checking that CDSs predicted from gene sequences match 'real' CDSs)\nwget ftp://ftp.ensembl.org/pub/release-70/fasta/homo_sapiens/cdna/Homo_sapiens.GRCh37.70.cdna.all.fa.gz\nmv Homo_sapiens.GRCh37.70.cdna.all.fa.gz cds.fa.gz\n\n# Download regulatory annotations\nwget ftp://ftp.ensembl.org/pub/release-70/regulation/homo_sapiens/AnnotatedFeatures.gff.gz\nmv AnnotatedFeatures.gff.gz regulation.gff.gz\n\n# Uncompress\ngunzip *.gz\n\n# Download genome\ncd ../genomes/\nwget ftp://ftp.ensembl.org/pub/release-70/fasta/homo_sapiens/dna/Homo_sapiens.GRCh37.70.dna.toplevel.fa.gz\nmv Homo_sapiens.GRCh37.70.dna.toplevel.fa.gz GRCh37.70.fa.gz\n\n# Uncompress:\n# Why do we need to uncompress?\n# Because ENSEMBL compresses files using a block compress gzip which is not compatible with Java's library Gunzip\ngunzip GRCh37.70.fa.gz\n\n# Edit snpEff.config file\n#\n# WARNING! You must do this yourself. Just copying and pasting this into a terminal won't work.\n#\n# Add lines:\n#       GRCh37.70.genome : Homo_sapiens\n#       GRCh37.70.reference : ftp://ftp.ensembl.org/pub/release-70/gtf/\n\n# Now we are ready to build the database\ncd ~/snpeff\njava -Xmx20g -jar snpEff.jar build -v GRCh37.70 2&gt;&amp;1 | tee GRCh37.70.build\n</code></pre></p>"},{"location":"snpeff/build_db/#troubleshooting-database-builds","title":"Troubleshooting Database builds","text":"<p>Warning</p> <p>By far the most common problem is that the FASTA file chromosome names are different than the GFF chromosome names. Make sure chromosome names are consistent in all the files you use.</p> <p>When I build the database using GFF 3 SnpEff reports that Exons don't have sequences</p> <p>GFF3 files can have sequence information either in the same file or in a separate fasta file.</p> <p>In order to add sequence information in the GFF file, you can do this: <pre><code>cat annotations.gff &gt; genes.gff\necho \"###\"  &gt;&gt; genes.gff\necho \"##FASTA\"  &gt;&gt; genes.gff\ncat sequence.fa  &gt;&gt; genes.gff\n</code></pre> When building a database, I get zero protein coding genes</p> <p>When building a database, snpEff tries to find which transcripts are protein coding. This is done using the 'bioType' information.</p> <p>The bioType information is not a standard GFF or GTF feature. So I follow ENSEMBL's convention of using the second column ('source') for bioType, as well as the gene_biotype attribute.</p> <p>If your file was not produced by ENSEMBL, it probably doesn't have this information. This means that snpEff doesn't know which genes are protein coding and which ones are not.</p> <p>Having no information, snpEff will treat all genes as protein coding (assuming you have <code>-treatAllAsProteinCoding Auto</code> option in the command line, which is the default).</p> <p>So you will get effects as if all genes were protein coding, then you can filter out the irrelevant genes. Unfortunately, this is the best I can do if there is no 'bioType' information</p> <p>When building a database, I get too many warnings</p> <p>There are plenty of GFF and GTF files that, unfortunately, do not follow the specification. SnpEff usually complains about this, but tries hard to correct the problems. So the database may be OK even after you see many warnings.</p> <p>You can check the database to see if the features (genes, exons, UTRs) have been correctly incorporated, by taking a look at the database:</p> <pre><code>java -jar snpEff.jar dump myGenome | less\n</code></pre>"},{"location":"snpeff/build_db_gff_gtf/","title":"Building databases: GTF / GFF details","text":"<p>In this section we show some specific details on the GTF and GFF file format required by SnpEff to build databases.</p> <p>Warning</p> <p>Most people do NOT need to build a database, and can safely use a pre-built one. So unless you are working with a rare, custom, or new genomes you most likely don't need to do it either.</p>"},{"location":"snpeff/build_db_gff_gtf/#summary","title":"Summary","text":"<p>As seen in the previous Building databases, there are three main steps when building a database:</p> <ol> <li>Step 1: Configure a new genome in SnpEff's config file <code>snpEff.config</code>.</li> <li>Step 2: Build using gene annotations and reference sequences</li> <li>Step 3: Checking the database: SnpEff will check the database by comparing predicted protein sequences and CDS sequences with ones provided by the user.</li> </ol> <p>In this section we'll go into the details of the GTF and GFF format requirements for Step 2. As a general rule, GTF format is preferred over GFF, so if your genome provides both GTF anf GFF, use GTF whenever possible.</p>"},{"location":"snpeff/build_db_gff_gtf/#gtf-format-example","title":"GTF format example","text":"<p>This is a snippet example from a GTF file that fulfills SnpEff's requirements.  The example (from ENSEMBL's human genome GTF file) shows the definition of one gene, one transcript and it's exons, as well as the trancript's start codon, stop codon, and UTR regions.</p> <pre><code># Note that tabs have been replaced by spaces for readability\nchr1    ensembl  gene          10472288        10630758        .       +       .       gene_id \"ENSG00000142655.13\"; gene_type \"protein_coding\"; gene_name \"PEX14\";\nchr1    ensembl  transcript    10474950        10630758        .       +       .       gene_id \"ENSG00000142655.13\"; transcript_id \"ENST00000356607.9\"; transcript_type \"protein_coding\";\nchr1    ensembl  exon          10474950        10475002        .       +       .       transcript_id \"ENST00000356607.9\";\nchr1    ensembl  CDS           10474967        10475002        .       +       0       transcript_id \"ENST00000356607.9\";\nchr1    ensembl  start_codon   10474967        10474969        .       +       0       transcript_id \"ENST00000356607.9\";\nchr1    ensembl  exon          10495274        10495321        .       +       .       transcript_id \"ENST00000356607.9\";\nchr1    ensembl  CDS           10495274        10495321        .       +       0       transcript_id \"ENST00000356607.9\";\nchr1    ensembl  exon          10536213        10536297        .       +       .       transcript_id \"ENST00000356607.9\";\nchr1    ensembl  CDS           10536213        10536297        .       +       0       transcript_id \"ENST00000356607.9\";\nchr1    ensembl  exon          10599238        10599366        .       +       .       transcript_id \"ENST00000356607.9\";\nchr1    ensembl  CDS           10599238        10599366        .       +       2       transcript_id \"ENST00000356607.9\";\nchr1    ensembl  exon          10618332        10618417        .       +       .       transcript_id \"ENST00000356607.9\";\nchr1    ensembl  CDS           10618332        10618417        .       +       2       transcript_id \"ENST00000356607.9\";\nchr1    ensembl  exon          10623019        10623121        .       +       .       transcript_id \"ENST00000356607.9\";\nchr1    ensembl  CDS           10623019        10623121        .       +       0       transcript_id \"ENST00000356607.9\";\nchr1    ensembl  exon          10624340        10624437        .       +       .       transcript_id \"ENST00000356607.9\";\nchr1    ensembl  CDS           10624340        10624437        .       +       2       transcript_id \"ENST00000356607.9\";\nchr1    ensembl  exon          10627272        10627363        .       +       .       transcript_id \"ENST00000356607.9\";\nchr1    ensembl  CDS           10627272        10627363        .       +       0       transcript_id \"ENST00000356607.9\";\nchr1    ensembl  exon          10629531        10630758        .       +       .       transcript_id \"ENST00000356607.9\";\nchr1    ensembl  CDS           10629531        10629984        .       +       1       transcript_id \"ENST00000356607.9\";\nchr1    ensembl  stop_codon    10629985        10629987        .       +       0       transcript_id \"ENST00000356607.9\";\nchr1    ensembl  UTR           10474950        10474966        .       +       .       transcript_id \"ENST00000356607.9\"; \nchr1    ensembl  UTR           10629985        10630758        .       +       .       transcript_id \"ENST00000356607.9\"; \n</code></pre> <p>For a more detailed example, check ENSEMBL's GTF files, for instance this one for GRCh38.107 (the human genome)</p>"},{"location":"snpeff/build_db_gff_gtf/#gtf-format-details","title":"GTF format details","text":"<p>The full GTF format specification is beyond the scope of this section, and it is assumed you are familiar with it. It's probably a good idea to take a look at the format specification before reading the rest of this section, here are some links:</p> <ul> <li>ENSEMBL GTF format specification</li> <li>Brent's lab GTF format</li> </ul>"},{"location":"snpeff/build_db_gff_gtf/#gtf-file-name","title":"GTF File name","text":"<p>SnpEff expects the GTF file to be located at </p> <pre><code>$SNPEFF_HOME/data/GENOME_NAME/genes.gtf\n</code></pre> <p>where:</p> <ul> <li><code>$SNPEFF_HOME</code> is the directory where SnpEff is installed (usually <code>$HOME/snpEff</code>)</li> <li><code>GENOME_NAME</code> is the genome name of the genome you are trying to build, which MUST match the name you added in the config file <code>snpEff.config</code></li> </ul> <p>Note: The file name can be <code>genes.gff.gz</code> if it's compressed using <code>gzip</code>.</p>"},{"location":"snpeff/build_db_gff_gtf/#gtf-lines","title":"GTF lines","text":"<p>In a nutshell, GTF files are text files and each line is parsed separately.</p> <p>Lines that start with <code>#</code> are treated as comments (i.e. ignored).</p> <p>Each (non-comment) line is parsed as a tab-separate list of fields, for example:</p> <pre><code>#!genome-build GRCh38.p13\n1       protein_coding  gene         69091   70008   .       +       .       gene_id \"ENSG00000186092\"; gene_name \"OR4F5\"; gene_source \"ensembl_havana\"; gene_biotype \"protein_coding\";\n1       protein_coding  transcript   69091   70008   .       +       .       gene_id \"ENSG00000186092\"; transcript_id \"ENST00000335137\"; gene_name \"OR4F5\"; gene_source \"ensembl_havana\"; gene_biotype \"protein_coding\"; transcript_name \"OR4F5-001\"; transcript_source \"ensembl_havana\"; tag \"CCDS\"; ccds_id \"CCDS30547\";\n1       protein_coding  exon         69091   70008   .       +       .       gene_id \"ENSG00000186092\"; transcript_id \"ENST00000335137\"; exon_number \"1\"; gene_name \"OR4F5\"; gene_source \"ensembl_havana\"; gene_biotype \"protein_coding\"; transcript_name \"OR4F5-001\"; transcript_source \"ensembl_havana\"; tag \"CCDS\"; ccds_id \"CCDS30547\"; exon_id \"ENSE00002319515\";\n1       protein_coding  CDS          69091   70005   .       +       0       gene_id \"ENSG00000186092\"; transcript_id \"ENST00000335137\"; exon_number \"1\"; gene_name \"OR4F5\"; gene_source \"ensembl_havana\"; gene_biotype \"protein_coding\"; transcript_name \"OR4F5-001\"; transcript_source \"ensembl_havana\"; tag \"CCDS\"; ccds_id \"CCDS30547\"; protein_id \"ENSP00000334393\";\n1       protein_coding  start_codon  69091   69093   .       +       0       gene_id \"ENSG00000186092\"; transcript_id \"ENST00000335137\"; exon_number \"1\"; gene_name \"OR4F5\"; gene_source \"ensembl_havana\"; gene_biotype \"protein_coding\"; transcript_name \"OR4F5-001\"; transcript_source \"ensembl_havana\"; tag \"CCDS\"; ccds_id \"CCDS30547\";\n1       protein_coding  stop_codon   70006   70008   .       +       0       gene_id \"ENSG00000186092\"; transcript_id \"ENST00000335137\"; exon_number \"1\"; gene_name \"OR4F5\"; gene_source \"ensembl_havana\"; gene_biotype \"protein_coding\"; transcript_name \"OR4F5-001\"; transcript_source \"ensembl_havana\"; tag \"CCDS\"; ccds_id \"CCDS30547\";\n</code></pre> <p>It should be noted that lines do NOT have a specific order. Usually information defining a gene tends to be together, but this is not required by the GTF format.</p>"},{"location":"snpeff/build_db_gff_gtf/#gtf-fields","title":"GTF fields","text":"<p>The nine tab-separated fields in each (non-comment) line are:</p> <ol> <li>seqname: name of the chromosome or scaffold; chromosome names can be given with or without the 'chr' prefix. Important note: the seqname must be one used within Ensembl, i.e. a standard chromosome name or an Ensembl identifier such as a scaffold ID, without any additional content such as species or assembly. See the example GFF output below.</li> <li>source: name of the program that generated this feature, or the data source (database or project name)</li> <li>feature: feature type name, e.g. Gene, transcript, exon, etc.</li> <li>start: Start position* of the feature, with sequence numbering starting at 1.</li> <li>end: End position* of the feature, with sequence numbering starting at 1.</li> <li>score: A floating point value.</li> <li>strand: defined as + (forward), or - (reverse).</li> <li>frame: One of '0', '1' or '2'. '0' indicates that the first base of the feature is the first base of a codon, '1' that the second base is the first base of a codon, and so on..</li> <li>attribute: A semicolon-separated list of tag-value pairs, providing additional information about each feature.</li> </ol> <p>Info</p> <p>Also note that <code>'.'</code> denotes an empty field, you cannot just use an empty string to denote an empty field.</p>"},{"location":"snpeff/build_db_gff_gtf/#gtf-field-requirements","title":"GTF field requirements","text":"<p>SnpEff requires that the fields are:</p> <ol> <li>seqname: Must match the name of the chromosome / scaffold in the reference genome sequence FASTA file (with or without a <code>chr</code> prepend).</li> <li>source: This field is ignored by SnpEff.</li> <li>feature: These feature types, such as <code>gene</code>, <code>exon</code>, <code>cds</code>, etc. See details in section GTF Feature </li> <li>start: One-based chromosome position of feature start (base included).</li> <li>end: One-based chromosome position of feature end (base included).</li> <li>score: SnpEff ignores this field.</li> <li>strand: Considered negative strand if <code>'-'</code>, otherwise interpreted as positive strand.</li> <li>frame: Interpreted as 'phase', can be <code>{0, 1, 2}</code>. If empty (<code>'.'</code>) or <code>-1</code> is interpreted as \"missing\". See \"GTF Frame details\" section below.</li> <li>attribute: Attribute list, see GTF Attributes section below </li> </ol>"},{"location":"snpeff/build_db_gff_gtf/#gtf-feature","title":"GTF Feature","text":"<p>These feature types will be translated to SnpEff entities the following way (case ignored):</p> Feature Type Feature value GENE gene, protein TRANSCRIPT pseudogene, transcript, mrna, trna, snorna, rrna, ncrna, mirna, snrna, pseudogenic_transcript EXON exon, pseudogenic_exon CDS cds START_CODON start_codon STOP_CODON stop_codon UTR5 five_prime_utr, 5'-utr, 5'utr, 5utr UTR3 three_prime_utr, 3'-utr, 3'utr, 3utr INTRON_CONSERVED intron_CNS, intron_cns INTERGENIC_CONSERVED inter_cns"},{"location":"snpeff/build_db_gff_gtf/#gtf-frame","title":"GTF Frame","text":"<p>The frame field indicates the number of bases that should be removed from the beginning of this feature to reach the first base of the next codon. This is typically used in <code>EXON</code> or <code>CDS</code> features within in coding genes.</p> <p>Possible values are:</p> <ul> <li><code>0</code>: indicates that the feature begins with a whole codon at the 5' most base.</li> <li><code>1</code>: means that there is one extra base (the third base of a codon) before the first whole codon and </li> <li><code>2</code>: means that there are two extra bases (the second and third bases of the codon) before the first codon</li> <li><code>.</code>: Missing value, SnpEff will inferr this value from the feature's coordinates</li> </ul> <p>Info</p> <p>Sometimes this is called 'phase' instead of frame, to distinguish form the \"coding base modulo 3\" definition. </p> <p>Frame correction SnpEff performs a \"frame correction\". If the frame value calculated using the feature (exon) coordinates differs from the one given in the <code>start / end</code> coordinates, the coordinates will be corrected.</p> <p>This correction is performed in two stages, for each transcript:</p> <p>i) First exon is corrected by adding a fake 5'UTR ii) Other exons are corrected by changing the start (or end) coordinates. We drop bases from either the <code>start</code> coordinate (if the exon is on the positive strand) or <code>end</code> coordinate (if the exon is on the negative strand) until the frame matches the one from the GTF.</p> <p> Check zero frames: If all frames are zero, there is a high chance that the frame values are incorrectly labeled as zero instead of \"missing values\" (i.e. '.'). SnpEff will check if all frame values are zero. If there are more than <code>MIN_TOTAL_FRAME_COUNT</code> frmae values set (by default 10) and all of them are zero, it will show a warning.</p>"},{"location":"snpeff/build_db_gff_gtf/#gtf-attributes","title":"GTF Attributes","text":"<p>The \"attributes\" field is parsed as a semicolon-separated list of key-value pairs, providing additional information about each feature.</p> <p>Required attributes are:</p> Feature type Required attributes Optional attributes GENE ID / GeneID, GeneBioType, GeneName TRANSCRIPT ID / TranscriptID, TranscriptBioType, ParentID <code>transcript_support_level</code>, <code>transcript_version</code> CDS, EXON, STOP_CODON, START_CODON ID, ParentID / TranscriptID UTR, UTR5, UTR3 ID, ParentID / TranscriptID INTRON_CONSERVED ID, TranscriptID / TranscriptID INTERGENIC_CONSERVED ID"},{"location":"snpeff/build_db_gff_gtf/#gtf-attribute-id","title":"GTF Attribute: ID","text":"<p>The attribute name can be (not case sensitive, in search order):</p> <ul> <li><code>id</code></li> <li><code>gene_id</code> (if feature type is <code>GENE</code>)</li> <li><code>transcript_id</code> (if feature type is <code>TRANSCRIPT</code>)</li> <li><code>exon_id</code> (if feature type is <code>EXON</code>),</li> <li><code>db_xref</code></li> <li><code>name</code></li> </ul> <p>If none is available, SnpEff will generate an ID as  <pre><code>feature + \"_\" + chromosomeName + \"_\" + start + \"_\" + end\n</code></pre></p> <p>where <code>feature</code> is the parse \"Feature type\" .</p>"},{"location":"snpeff/build_db_gff_gtf/#gtf-attribute-parentid","title":"GTF Attribute: ParentId","text":"<p>The attribute name can be (not case sensitive, in search order):</p> <ul> <li><code>parent</code></li> <li><code>gene</code> (if feature type is <code>TRANSCRIPT</code> or <code>INTRON_CONSERVED</code>)</li> <li>same as TranscriptId (if feature type is any of 'EXON', 'CDS', 'START_CODON', 'STOP_CODON', 'UTR3', or 'UTR5')</li> </ul> <p>Warning</p> <p>The value of <code>ParentID</code> must match exactly the <code>ID</code> of the parent feature (e.g. the <code>ParentID</code> for a transcript, must match the ID of the parent gene). It is a common mistake in some GTF / GFF files to add or remove some characters. If the IDs don't match, the GTF/GFF file is invalid for SnpEff.</p>"},{"location":"snpeff/build_db_gff_gtf/#gtf-attribute-geneid","title":"GTF Attribute: GeneId","text":"<p>The attribute name can be (not case sensitive, in search order):</p> <ul> <li><code>gene_id</code></li> <li><code>id</code> (if feature type is <code>GENE</code>)</li> </ul> <p><code>GeneId</code> value must be a unique ID for each gene in the genome. If the value is repeated, SnpEff will add a dot ('.') followed by an integer number to make is unique.</p>"},{"location":"snpeff/build_db_gff_gtf/#gtf-attribute-transcriptid","title":"GTF Attribute: TranscriptId","text":"<p>The attribute name can be (not case sensitive, in search order):</p> <ul> <li><code>transcript_id</code></li> <li><code>id</code> (if feature type is <code>TRANSCRIPT</code>)</li> <li>or the same as <code>ParentID</code> if feature type is <code>EXON</code></li> </ul>"},{"location":"snpeff/build_db_gff_gtf/#gtf-attribute-genename","title":"GTF Attribute: GeneName","text":"<p>The attribute name can be (not case sensitive, in search order):</p> <ul> <li><code>gene_name</code></li> <li><code>name</code> (if feature type is <code>GENE</code>)</li> </ul>"},{"location":"snpeff/build_db_gff_gtf/#gtf-attribute-biotype","title":"GTF Attribute: BioType","text":"<p>The attribute name can be (not case sensitive): <code>biotype</code></p> <p>Possible values are:</p> BioType Possible attribute values protein_coding mrna, protein, cds, trna, start_codon, stop_codon, five_prime_utr, 5'-utr, 5'utr, 5utr, three_prime_utr, 3'-utr, 3'utr, 3utr transcribed_processed_pseudogene pseudogenic_transcript, pseudogenic_exon lincRNA ncrna rRNA rrna miRNA mirna snRNA snrna snoRNA snorna prime3_overlapping_ncrna 3prime_overlapping_ncrna <p>If the BioType field is not found, the GTF source field will be parsed, otherwise the feature type will be parsed.</p>"},{"location":"snpeff/build_db_gff_gtf/#gtf-attribute-genebiotype","title":"GTF Attribute: GeneBioType","text":"<p>This is similar to BioType, used specifically for feature type <code>GENE</code> The attribute name can be (not case sensitive, in search order):</p> <ul> <li><code>gene_biotype</code></li> <li><code>gene_type</code></li> <li><code>biotype</code></li> </ul> <p>Attribute values are parsed the same maner as <code>BioType</code>.</p> <p>If <code>GeneBioType</code> is <code>protein_coding</code>, then the gene is assumed to be a protein coding (all transcripts within will be also considered protein coding).</p>"},{"location":"snpeff/build_db_gff_gtf/#gtf-attribute-transcriptbiotype","title":"GTF Attribute: TranscriptBioType","text":"<p>This is similar to BioType, used specifically for feature type <code>TRANSCRIPT</code></p> <p>The attribute name can be (not case sensitive, in search order): </p> <ul> <li><code>transcript_biotype</code></li> <li><code>transcript_type</code></li> <li><code>biotype</code></li> </ul> <p>Attribute values are parsed the same maner as <code>BioType</code>.</p> <p>If <code>TranscriptBioType</code> is <code>protein_coding</code>, then the transcript is assumed to be a protein coding transcript.</p>"},{"location":"snpeff/build_db_gff_gtf/#gff","title":"GFF","text":"<p>SnpEff treats GFF files the same way as GTF files.</p> <p>The GFF format is more flexible / lax than GTF. Unfortunately, this extra flexibility also means that it is difficult to find GFF files that fulfill the requirements to build a genomic database, as many people add the information in different ways.</p> <p>Info</p> <p>Generally GTF files are preferred to build databases</p> <p>GFF3 is the currently supported version, the old GFF2 format is deprecated</p>"},{"location":"snpeff/build_db_gff_gtf/#gff-file-name","title":"GFF File name","text":"<p>SnpEff expects the GFF file to be located at </p> <p><pre><code>$SNPEFF_HOME/data/GENOME_NAME/genes.gff\n</code></pre> where:</p> <ul> <li><code>$SNPEFF_HOME</code> is the directory where SnpEff is installed (usually <code>$HOME/snpEff</code>)</li> <li><code>GENOME_NAME</code> is the genome name of the genome you are trying to build, which MUST match the name you added in the config file <code>snpEff.config</code></li> </ul> <p>Note: The file name can be <code>genes.gff.gz</code> if it's compressed using <code>gzip</code>. </p>"},{"location":"snpeff/build_db_gff_gtf/#gtf-lines-and-fields","title":"GTF lines and fields","text":"<p>GFF lines and fields are very similar to GTF ones. The main difference is that the attributes field is formatted as semi-colon separated <code>key=value</code> pairs (in GTF <code>key</code> and <code>value</code> are separated by a space instead of an <code>=</code> sign).</p> <p>Info</p> <p>Other than the minor difference in attributes formatting, SnpEff parses and interprets all the fields and attributes exactly the same way as in GTF files.</p>"},{"location":"snpeff/build_db_gff_gtf/#gff-genome-sequence","title":"GFF genome sequence","text":"<p>GFF files can have the reference genome sequence in the same file. After a special comment <code>##FASTA</code> you can concatenate the whole genome FASTA file. For example (see GFF3 Sequence Section):</p> <pre><code>##gff-version 3\nctg123 . exon            1300  1500  .  +  .  ID=exon00001\nctg123 . exon            1050  1500  .  +  .  ID=exon00002\nctg123 . exon            3000  3902  .  +  .  ID=exon00003\nctg123 . exon            5000  5500  .  +  .  ID=exon00004\nctg123 . exon            7000  9000  .  +  .  ID=exon00005\n##FASTA\n&gt;ctg123\ncttctgggcgtacccgattctcggagaacttgccgcaccattccgccttg\ntgttcattgctgcctgcatgttcattgtctacctcggctacgtgtggcta\ntctttcctcggtgccctcgtgcacggagtcgagaaaccaaagaacaaaaa\naagaaattaaaatatttattttgctgtggtttttgatgtgtgttttttat\naatgatttttgatgtgaccaattgtacttttcctttaaatgaaatgtaat\ncttaaatgtatttccgacgaattcgaggcctgaaaagtgtgacgccattc\n...\n</code></pre> <p>This makes it easier to distribute the genome reference toghether with the genome annotations in one file.</p>"},{"location":"snpeff/build_pdb/","title":"Building databases: PDB and AlphaFold","text":"<p>SnpEff supports Protein interactions calculated from PDB or AlphaFold. Adding protein interaction to existing SnpEff databases is rather involved, so it's recommended you use a pre-build database if available (e.g. human).</p>"},{"location":"snpeff/build_pdb/#requirements","title":"Requirements","text":"<p>In order to add protein data to a database, you need:</p> <ul> <li>A SnpEff database for the organism. The database should have been built or downloaded prior to start adding the protein data</li> <li>Protein data: One <code>*.pdb.gz</code> file for each protein. This can be downloaded from PDB (real data from cristalized proteins) or AlphaFold (predicted protein structures).</li> <li>A \"mapping file\" that maps transcript IDs to protein IDs</li> </ul> <p>Warning</p> <p>Adding protein data to a SnpEff database, requires a database to be already built / downloaded</p>"},{"location":"snpeff/build_pdb/#protein-structure-data","title":"Protein structure data","text":"<p>You can download protein structure data from PDB by performing executing something like: <pre><code>rsync -rlpt -v -z --delete --port=33444 rsync.wwpdb.org::ftp_data/structures/divided/pdb/\n</code></pre> See PDB's documentation.</p> <p>For AlphaFold, you can download a tar file with all protein predictions from Ensembl's AlphaFold download page. Please check the documentation on how to cite AlphaFold if you use their databases in a paper.</p> <p>PDB file filters: By default SnpEff will filter PDB files using the following criteria</p> <ul> <li>SnpEff will search PDB formatted file in all subdirectories.</li> <li>The file names must end with any of the extensions (case-sensitive): <code>*.ent</code>, <code>*.ent.gz</code>, <code>*.pdb</code>, or <code>*.pdb.gz</code> (as usual, files ending in <code>.gz</code> are expected to be gzip-compressed)</li> <li>The protein ID must be parsed from the file name. Currently accepted file name formats are \"PDB-style\" (e.g. <code>pdb7daa.ent.gz</code>, where PDBID is <code>7daa</code>) or AlphaFold-style (e.g. <code>AF-Q9Y6V0-F9-model_v2.pdb.gz</code>, where Uniprot-ID is <code>Q9Y6V0</code>)</li> <li>The PDB file must have a resolution of at least 3 Angstrom. This value can be changed using the <code>-res</code> command line option</li> </ul> <p>Info</p> <p>If the PDB file has a missing resolution value, or the resolution is over <code>99.0</code>, then it is assumed to be 'missing value' and not filtered. for instance, AlphaFold PDB files usually don't have resolution values since they are predictions, not measurements.</p>"},{"location":"snpeff/build_pdb/#mapping-file","title":"Mapping file","text":"<p>Since SnpEff uses trasncript ID information, whereas proteins use PDB IDs (or Uniprot IDs in case of AlphaFold), we need a file to map across these different IDs. You should provide a mapping file that maps <code>transcriptId</code> to <code>proteinId</code>:</p> <p>The format is: tab-separated, one line per entry: <pre><code>transcriptID \\t proteinID\n</code></pre></p>"},{"location":"snpeff/build_reg/","title":"Building databases: Regulatory and Non-coding","text":"<p>SnpEff supports regulatory and non-coding annotations. In this section we show how to build those databases. As in the previous section, most likely you will never have to do it yourself and can just use available pre-built databases.</p> <p>There are two ways to add support for regulatory annotations (these are not mutually exclusive, you can use both at the same time):</p> <ol> <li>GFF regulation file (from ENSEMBL).</li> <li>BED files.</li> </ol> <p>Warning</p> <p>Adding regulation support and analyzing data using regulation tracks can take much more memory. For instance, for the human genome I use 10Gb to 20Gb of RAM.</p> <p>Warning</p> <p>It is assumed the the genome is already installed, only regulatory tracks are added.</p>"},{"location":"snpeff/build_reg/#option-1-using-a-gff-file","title":"Option 1: Using a GFF file","text":"<p>This example shows how to create a regulation database for human (GRCh37.65):</p> <ol> <li> <p>Get the GFF regulatory annotations (into path/to/snpEff/data/GRCh37.65/regulation.gff):</p> <pre><code>cd path/to/snpEff/data/GRCh37.65\nwget ftp:/ftp.ensembl.org/pub/release-65/regulation/homo_sapiens/AnnotatedFeatures.gff.gz\nmv AnnotatedFeatures.gff.gz regulation.gff.gz\n</code></pre> </li> <li> <p>Create databases. Note that we use <code>-onlyReg</code> flag, because we are only creating regulatory databases. If you omit it, it will create both of \"normal' and regulatory databases:</p> <pre><code>cd /path/to/snpEff\njava -Xmx20G -jar snpEff.jar build -v -onlyReg GRCh37.65\n</code></pre> <p>The output looks like this:</p> <pre><code>Reading regulation elements (GFF)\nChromosome '11' line: 226964\nChromosome '12' line: 493780\n...\nChromosome '9'  line: 4832434\nChromosome 'X'  line: 5054301\nChromosome 'Y'  line: 5166958\nDone\nTotal lines                 : 5176289\nTotal annotation count      : 3961432\nPercent                     : 76.5%\nTotal annotated length      : 3648200193\nNumber of cell/annotations  : 266\nSaving database 'HeLa-S3' in file '/path/to/snpEff/data/GRCh37.65/regulation_HeLa-S3.bin'\nSaving database 'HepG2' in file '/path/to/snpEff/data/GRCh37.65/regulation_HepG2.bin'\nSaving database 'NHEK' in file '/path/to/snpEff/data/GRCh37.65/regulation_NHEK.bin'\nSaving database 'GM12878' in file '/path/to/snpEff/data/GRCh37.65/regulation_GM12878.bin'\nSaving database 'HUVEC' in file '/path/to/snpEff/data/GRCh37.65/regulation_HUVEC.bin'\nSaving database 'H1ESC' in file '/path/to/snpEff/data/GRCh37.65/regulation_H1ESC.bin'\nSaving database 'CD4' in file '/path/to/snpEff/data/GRCh37.65/regulation_CD4.bin'\nSaving database 'GM06990' in file '/path/to/snpEff/data/GRCh37.65/regulation_GM06990.bin'\nSaving database 'IMR90' in file '/path/to/snpEff/data/GRCh37.65/regulation_IMR90.bin'\nSaving database 'K562' in file '/path/to/snpEff/data/GRCh37.65/regulation_K562.bin'\nDone.\n</code></pre> <p>As you can see, annotations for each cell type are saved in different files. This makes it easier to load annotations only for the desired cell types when analyzing data.</p> </li> </ol>"},{"location":"snpeff/build_reg/#option-2-using-an-bed-file","title":"Option 2: Using an BED file","text":"<p>This example shows how to create a regulation database for human (GRCh37.65). We assume we have a file called <code>my_regulation.bed</code> which has information for H3K9me3 in Pancreatic Islets (for instance, as a result of a Chip-Seq experiment and peak enrichment analysis).</p> <ol> <li> <p>Add all your BED files to <code>path/to/snpEff/data/GRCh37.65/regulation.bed/</code> dir:</p> <pre><code>cd path/to/snpEff/data/GRCh37.65\nmkdir regulation.bed\ncd regulation.bed\nmv where/ever/your/bed/file/is/my_regulation.bed ./regulation.Pancreatic_Islets.H3K9me3.bed\n</code></pre> <p>Note: The name of the file must be <code>regulation.CELL_TYPE.ANNOTATION_TYPE.bed</code>. In this case, <code>CELL_TYPE=Pancreatic_Islets</code> and <code>ANNOTATION_TYPE=H3K9me3</code></p> </li> <li> <p>Create databases (note the <code>-onlyReg</code> flag):</p> <pre><code>cd /path/to/snpEff\njava -Xmx20G -jar snpEff.jar build -v -onlyReg GRCh37.65\n</code></pre> <p>The output looks like this:</p> <pre><code>Building database for 'GRCh37.65'\nReading regulation elements (GFF)\nCannot read regulation elements form file '/path/to/snpEff/data/GRCh37.65/regulation.gff'\nDirectory has 1 bed files and 1 cell types\nCreating consensus for cellType 'Pancreatic_Islets', files: [/path/to/snpEff/data/GRCh37.65/regulation.bed/regulation.Pancreatic_Islets.H3K9me3.bed]\nReading file '/path/to/snpEff/data/GRCh37.65/regulation.bed/regulation.Pancreatic_Islets.H3K9me3.bed'\nChromosome '10' line: 5143\nChromosome '11' line: 8521\n...\nChromosome 'X'  line: 52481\nChromosome 'Y'  line: 53340\nDone\nTotal lines                 : 53551\nTotal annotation count      : 53573\nPercent                     : 100.0%\nTotal annotated length      : 75489402\nNumber of cell/annotations  : 1\nCreating consensus for cell type: Pancreatic_Islets\nSorting: Pancreatic_Islets  , size: 53573\nAdding to final consensus\nFinal consensus for cell type: Pancreatic_Islets    , size: 53549\nSaving database 'Pancreatic_Islets' in file '/path/to/snpEff/data/GRCh37.65/regulation_Pancreatic_Islets.bin'\nDone\nFinishing up\n</code></pre> <p>Note: If there are many annotations, they are saved in one binary file for each cell type (i.e. several BED files for different cell types are collapsed together). This makes it easier to load annotations only for the desired cell types when analyzing data.</p> </li> </ol>"},{"location":"snpeff/cansersamples/","title":"Cancer samples","text":"<p>Here we describe details about annotating cancer samples.</p> <p> Single multi-sample VCF vs. multiple VCF files. </p> <p>It is common practice, to have all samples in a single \"multi-sample VCF file\" (having two or more separate VCF files is highly discouraged). This is also the \"gold standard\" in cancer analysis standard, so all samples (both somatic and germline) should be in one VCF file.</p> <p>SnpEff requires that you follow gold standard practices, thus requires a single multi-sample VCF (it is not possible to run cancer analysis using multiple VCF files).</p>"},{"location":"snpeff/cansersamples/#running-in-cancer-analysis-mode","title":"Running in cancer analysis mode","text":"<p>Using the <code>-cancer</code> command line option, you can compare somatic vs germline samples.</p> <p>So an example command line would be:</p> <pre><code>$ java -Xmx8g -jar snpEff.jar -v -cancer GRCh37.75 cancer.vcf &gt; cancer.ann.vcf\n</code></pre>"},{"location":"snpeff/cansersamples/#representing-cancer-data","title":"Representing cancer data","text":"<p>In a typical cancer sequencing experiment, we want to measure and annotate differences between germline (healthy) and somatic (cancer) tissue samples from the same patient. The complication is that germline is not always the same as the reference genome, so a typical annotation does not work.</p> <p>For instance, let's assume that at a given genomic position (e.g. chr1:69091), reference genome is 'A', germline is 'C' and somatic is 'G'. This should be represented in a VCF file as: <pre><code>#CHROM  POS    ID  REF  ALT    QUAL  FILTER  INFO  FORMAT  Patient_01_Germline  Patient_01_Somatic\n1       69091  .   A    C,G    .     PASS    AC=1  GT      1/0                  2/1\n</code></pre></p> <p>Warning</p> <p>Some people tend to represent this by changing REF base 'A' using germline 'C'. This is a mistake, REF must always represent the reference genome, not one of your samples.</p> <p>Under normal conditions, SnpEff would provide the effects of changes \"A -&gt; C\" and \"A -&gt; G\". But in case of cancer samples, we are actually interested in the difference between somatic and germline, so we'd like to calculate the effect of a \"C -&gt; G\" mutation. Calculating this effect is not trivial, since we have to build a new \"reference\" by calculating the effect of the first mutation (\"A -&gt; C\") and then calculate the effect of the second one (\"C -&gt; G\") on our \"new reference\".</p> <p>Info</p> <p>In order to activate cancer analysis, you must use <code>-cancer</code> command line option.</p>"},{"location":"snpeff/cansersamples/#defining-cancer-samples","title":"Defining cancer samples","text":"<p>As we already mentioned, cancer data is represented in a VCF file using multiple ALTs (REF field always is reference genome). In order to specify which samples are somatic and which ones are germline, there are two options:</p> <ul> <li>Use a TXT file using <code>-cancerSamples</code> command line option.</li> <li>Use the PEDIGREE meta information in your VCF file's header. This is the default, but some people might find hard to edit / change information in VCF file's headers.</li> </ul> <p>Warning</p> <p>If you do not provide either <code>PEDIGREE</code> meta information or a TXT samples file, SnpEff will not know which somatic samples derive from which germline samples. Thus it will be unable to perform cancer effect analysis.</p> <p>TXT file</p> <p>This is quite easy. All you have to do is to create a tab-separated TXT file having two columns: the first column has the germline sample names and the second column has the somatic sample names. Make sure that sample names match exactly the ones in the VCF file.</p> <p>E.g.: Create a TXT file named 'samples_cancer.txt' <pre><code>Patient_01_Germline Patient_01_Somatic\nPatient_02_Germline Patient_02_Somatic\nPatient_03_Germline Patient_03_Somatic\nPatient_04_Germline Patient_04_Somatic\n</code></pre> Then you have to specify this TXT file when invoking SnpEff, using the <code>-cancerSamples</code> command line option.</p> <p>E.g. In our example, the file name is 'samples_cancer.txt', so the command line would look like this: <pre><code>$ cat examples/samples_cancer_one.txt\nPatient_01_Germline    Patient_01_Somatic\n\n$ java -Xmx8g -jar snpEff.jar -v \\\n                -cancer \\\n                -cancerSamples examples/samples_cancer_one.txt \\\n                GRCh37.75 \\\n                examples/cancer.vcf \\\n                &gt; cancer.ann.vcf\n</code></pre> VCF header</p> <p>This is the default method and the main advantage is that you don't have to carry information on a separate TXT file (all the information is within your VCF file). You have to add the <code>PEDIGREE</code> header with the appropriate information to your VCF file. Obviously this requires you to edit you VCF file's header.</p> <p>Warning</p> <p>How to edit VCF headers is beyond the scope of this manual (we recommend using <code>vcf-annotate</code> from VCFtools). But if you find adding PEDIGREE information to your VCF file difficult, just use the TXT file method described in the previous sub-section.</p> <p>E.g.: Pedigree information in a VCF file would look like this: <pre><code>$ cat examples/cancer_pedigree.vcf\n##PEDIGREE=&lt;Derived=Patient_01_Somatic,Original=Patient_01_Germline&gt;\n#CHROM  POS ID  REF ALT QUAL    FILTER  INFO        FORMAT  Patient_01_Germline Patient_01_Somatic\n1   69091   .   A   C,G .       PASS    AF=0.1122   GT      1/0                 2/1\n1   69849   .   G   A,C .       PASS    AF=0.1122   GT      1/0                 2/1\n1   69511   .   A   C,G .       PASS    AF=0.3580   GT      1/1                 2/2\n\n\n$ java -Xmx8g -jar snpEff.jar -v -cancer GRCh37.75 examples/cancer_pedigree.vcf &gt; examples/cancer_pedigree.ann.vcf\n</code></pre> Here we say that the sample called <code>Patient_01_Somatic</code> is derived from the sample called <code>Patient_01_Germline</code>. In this context, this means that cancer sample is derived from the healthy tissue.</p>"},{"location":"snpeff/cansersamples/#interpreting-cancer-annotations","title":"Interpreting Cancer annotations","text":"<p>Interpretation of <code>ANN</code> field cancer sample relies on 'Allele' sub-field. Just as a reminder, <code>ANN</code> field has the following format:</p> <pre><code>ANN = Allele | Annotation | Annotation_Impact | Gene_Name | Gene_ID | Feature_Type | Feature_ID | Transcript_BioType | Rank | HGVS.c | HGVS.p | cDNA.pos / cDNA.length | CDS.pos / CDS.length | AA.pos / AA.length | Distance | ERRORS_WARNINGS_INFO\n</code></pre> <p>The <code>Allele</code> field tells you which effect relates to which genotype. More importantly, genotype difference between Somatic and Germline.</p> <p>Example: when there are multiple ALTs (e.g. REF='A' ALT='C,G') and the genotype field says:</p> <ul> <li>Allele = \"C\": it means is the effect related to the first ALT ('C')</li> <li>Allele = \"G\" if it's the effect related to the second ALT ('G')</li> <li>Allele = \"G-C\" means that this is the effect of having the second ALT as variant while using the first ALT as reference (\"C -&gt; G\"). It is important that you understand the meaning of the last one, because you'll use it often for your cancer analysis.</li> </ul> <p>Example: Sample output for the previously mentioned VCF example would be (the output has been edited for readability reasons)</p> <p>For the first line we get (edited for readability): <pre><code>$ java -Xmx8g -jar snpEff.jar -v -cancer -cancerSamples examples/samples_cancer_one.txt GRCh37.75 examples/cancer.vcf &gt; examples/cancer.eff.vcf\n\n1   69091   .   A   C,G .   PASS    AF=0.1122;\n                  ANN=G|start_lost|HIGH|OR4F5|ENSG00000186092|transcript|ENST00000335137|protein_coding|1/1|c.1A&gt;G|p.Met1?|1/918|1/918|1/305||\n                 ,G-C|start_lost|HIGH|OR4F5|ENSG00000186092|transcript|ENST00000335137|protein_coding|1/1|c.1A&gt;G|p.Leu1?|1/918|1/918|1/305||\n                 ,C|initiator_codon_variant|LOW|OR4F5|ENSG00000186092|transcript|ENST00000335137|protein_coding|1/1|c.1A&gt;C|p.Met1?|1/918|1/918|1/305||\n               GT  1/0 2/1\n</code></pre> What does it mean:</p> <ol> <li>In this case, we have two ALTs = 'C' and 'G'.</li> <li>Germline sample is heterozygous 'C/A' (GT = '1/0')</li> <li>Somatic tissue is heterozygous 'G/C' (GT = '2/1')</li> <li> <p>Change A -&gt; C and A -&gt; G are always calculated by SnpEff (this is the \"default mode\").</p> <ul> <li> <p>A -&gt; C produces this effect:</p> <pre><code>C|initiator_codon_variant|LOW|OR4F5|ENSG00000186092|transcript|ENST00000335137|protein_coding|1/1|c.1A&gt;C|p.Met1?|1/918|1/918|1/305||\n</code></pre> <p>Note that the last field (genotype field) is 'C' indicating this is produced by the first ALT.</p> </li> <li> <p>A -&gt; G produces this effect:</p> <pre><code>G|start_lost|HIGH|OR4F5|ENSG00000186092|transcript|ENST00000335137|protein_coding|1/1|c.1A&gt;G|p.Met1?|1/918|1/918|1/305||\n</code></pre> <p>Note that the last field (genotype field) is 'G' indicating this is produced by the second ALT.</p> </li> </ul> </li> <li> <p>Finally, this is what you were expecting for, the cancer comparisons. Since both germline and somatic are heterozygous (GT are '1/0' and '2/1'), there are 4 possible comparisons to make:</p> <ul> <li>G vs C : This is the Somatic vs Germline we are interested in. SnpEff reports this one</li> <li>G vs A : This compares ALT to REF, so it was already reported in \"default mode\". SnpEff doesn't report this one again.</li> <li>C vs C : This is not a variant, since both og them ar '1'. SnpEff skips this one.</li> <li>C vs A : This compares ALT to REF, so it was already reported in \"default mode\". SnpEff doesn't report this one again.</li> </ul> <p>I know is confusing, but the bottom line is that only the first comparison one makes sense, and is the one SnpEff reports. So 'C -&gt; G' produces the following effect:</p> <pre><code>  G-C|start_lost|HIGH|OR4F5|ENSG00000186092|transcript|ENST00000335137|protein_coding|1/1|c.1A&gt;G|p.Leu1?|1/918|1/918|1/305||\n</code></pre> <p>Warning</p> <p>Notice the genotype field is \"G-C\" meaning the we produce a new reference on the fly using ALT 1 ('C') and then used ALT 2 ('G') as the variant. So we compare 'G' (ALT) to 'C' (REF).</p> </li> </ol>"},{"location":"snpeff/cansersamples/#cancer-annotations-using-eff-field","title":"Cancer annotations using 'EFF' field:","text":"<p>Interpretation of <code>EFF</code> field cancer sample relies on 'Genotype' sub-field. Just as a reminder, <code>EFF</code> field has the following format: <pre><code>EFF = Effect ( Effect_Impact | Functional_Class | Codon_Change | Amino_Acid_Change| Amino_Acid_Length | Gene_Name | Transcript_BioType | Gene_Coding | Transcript_ID | Exon_Rank  | Genotype_Number [ | ERRORS | WARNINGS ] )\n</code></pre></p> <p>For the previous example, we get (edited for readability): <pre><code>$ java -Xmx8g -jar snpEff.jar -v -classic -cancer -cancerSamples examples/samples_cancer_one.txt GRCh37.75 examples/cancer.vcf &gt; examples/cancer.eff.vcf\n\n1   69091   .   A   C,G .   PASS    AC=1;\n                     EFF=START_LOST(HIGH|MISSENSE|Atg/Gtg|M1V|305|OR4F5|protein_coding|CODING|ENST00000335137|1|G)\n                        ,START_LOST(HIGH|MISSENSE|Ctg/Gtg|L1V|305|OR4F5|protein_coding|CODING|ENST00000335137|1|G-C)\n                        ,NON_SYNONYMOUS_START(LOW|MISSENSE|Atg/Ctg|M1L|305|OR4F5|protein_coding|CODING|ENST00000335137|1|C)\n</code></pre></p> <p>The <code>GenotypeNum</code> field tells you which effect relates to which genotype. More importantly, genotype difference between Somatic and Germline.</p> <p>Example: when there are multiple ALTs (e.g. REF='A' ALT='C,G') and the genotype field says:</p> <ul> <li>GenotypeNum = \"1\": it means is the effect related to the first ALT ('C')</li> <li>GenotypeNum = \"2\" if it's the effect related to the second ALT ('G')</li> <li>GenotypeNum = \"2-1\" means that this is the effect of having the second ALT as variant while using the first ALT as reference (\"C -&gt; G\").</li> </ul>"},{"location":"snpeff/commandline/","title":"Commands &amp; command line options","text":"<p>SnpEff has several 'commands' that can be used for different annotations. The default command is <code>'eff'</code> used to annotate variants.</p> <p>Help: In order to see all available commands, you can run SnpEff without any arguments:</p> <pre><code># This will show a 'help' message\njava -jar snpEff.jar\n</code></pre>"},{"location":"snpeff/commandline/#commands","title":"Commands","text":"<p>Here is a list of what each command does:</p> Command Meaning <code>eff | ann</code> This is the default command. It is used for annotating variant filed (e.g. VCF files). <code>build</code> Build a SnpEff database from reference genome files (FASTA, GTF, etc.). <code>buildNextProt</code> Build NextProt database using XML files <code>cds</code> Compare CDS sequences calculated form a SnpEff database to the one in a FASTA file. Used for checking databases correctness (invoked automatically when building a database). <code>closest</code> Annotate the closest genomic region. <code>count</code> Count how many intervals (from a BAM, BED or VCF file) overlap with each genomic interval. <code>databases</code> Show currently available databases (from local config file). <code>download</code> Download a SnpEff database. <code>dump</code> Dump to STDOUT a SnpEff database (mostly used for debugging). <code>genes2bed</code> Create a bed file from a genes list. <code>len</code> Calculate total genomic length for each marker type. <code>protein</code> Compare protein sequences calculated form a SnpEff database to the one in a FASTA file. Used for checking databases correctness. (invoked automatically when building a database). spliceAnalysis`` Perform an analysis of splice sites. Experimental feature."},{"location":"snpeff/commandline/#common-options-all-commands","title":"Common options: All commands","text":"<p>The general help shows some options that are available to all commands. For instance, at the time of writing, the common options are under \"Generic options\" and \"Database options\" are these: <pre><code>$ java -jar snpEff.jar\nSnpEff version SnpEff 4.1 (build 2015-01-07), by Pablo Cingolani\nUsage: snpEff [command] [options] [files]\n\nRun 'java -jar snpEff.jar command' for help on each specific command\n\nAvailable commands: \n    [eff|ann]                    : Annotate variants / calculate effects (you can use either 'ann' or 'eff', they mean the same). Default: ann (no command or 'ann').\n    build                        : Build a SnpEff database.\n    buildNextProt                : Build a SnpEff for NextProt (using NextProt's XML files).\n    cds                          : Compare CDS sequences calculated form a SnpEff database to the one in a FASTA file. Used for checking databases correctness.\n    closest                      : Annotate the closest genomic region.\n    count                        : Count how many intervals (from a BAM, BED or VCF file) overlap with each genomic interval.\n    databases                    : Show currently available databases (from local config file).\n    download                     : Download a SnpEff database.\n    dump                         : Dump to STDOUT a SnpEff database (mostly used for debugging).\n    genes2bed                    : Create a bed file from a genes list.\n    len                          : Calculate total genomic length for each marker type.\n    protein                      : Compare protein sequences calculated form a SnpEff database to the one in a FASTA file. Used for checking databases correctness.\n    spliceAnalysis               : Perform an analysis of splice sites. Experimental feature.\n\nGeneric options:\n    -c , -config                 : Specify config file\n    -d , -debug                  : Debug mode (very verbose).\n    -dataDir &lt;path&gt;              : Override data_dir parameter from config file.\n    -download                    : Download a SnpEff database, if not available locally. Default: true\n    -nodownload                  : Do not download a SnpEff database, if not available locally.\n    -noShiftHgvs                 : Do not shift variants towards most 3-prime position (as required by HGVS).\n    -h , -help                   : Show this help and exit\n    -noLog                       : Do not report usage statistics to server\n    -t                           : Use multiple threads (implies '-noStats'). Default 'off'\n    -q ,  -quiet                 : Quiet mode (do not show any messages or errors)\n    -v , -verbose                : Verbose mode\n\nDatabase options:\n    -canon                       : Only use canonical transcripts.\n    -interval                    : Use a custom intervals in TXT/BED/BigBed/VCF/GFF file (you may use this option many times)\n    -motif                       : Annotate using motifs (requires Motif database).\n    -nextProt                    : Annotate using NextProt (requires NextProt database).\n    -noGenome                    : Do not load any genomic database (e.g. annotate using custom files).\n    -noMotif                     : Disable motif annotations.\n    -noNextProt                  : Disable NextProt annotations.\n    -onlyReg                     : Only use regulation tracks.\n    -onlyProtein                 : Only use protein coding transcripts. Default: false\n    -onlyTr &lt;file.txt&gt;           : Only use the transcripts in this file. Format: One transcript ID per line.\n    -reg &lt;name&gt;                  : Regulation track to use (this option can be used add several times).\n    -ss , -spliceSiteSize &lt;int&gt;  : Set size for splice sites (donor and acceptor) in bases. Default: 2\n    -strict                      : Only use 'validated' transcripts (i.e. sequence has been checked). Default: false\n</code></pre></p>"},{"location":"snpeff/commandline/#ann-command-variant-annotations","title":"<code>ANN</code> command: Variant annotations","text":"<p>In order to see a help message for a particular command, you can run the command without any arguments or use <code>-help</code> command line option:</p> <pre><code># This will show a 'help' message for the 'ann' (aka 'eff') command\n$ java -jar snpEff.jar ann\n\nsnpEff version SnpEff 4.1 (build 2015-01-07), by Pablo Cingolani\nUsage: snpEff [eff] [options] genome_version [input_file]\n\n\n    variants_file                   : Default is STDIN\n\n\nOptions:\n    -chr &lt;string&gt;                   : Prepend 'string' to chromosome name (e.g. 'chr1' instead of '1'). Only on TXT output.\n    -classic                        : Use old style annotations instead of Sequence Ontology and Hgvs.\n    -download                       : Download reference genome if not available. Default: true\n    -i &lt;format&gt;                     : Input format [ vcf, bed ]. Default: VCF.\n    -fileList                       : Input actually contains a list of files to process.\n    -o &lt;format&gt;                     : Ouput format [ vcf, gatk, bed, bedAnn ]. Default: VCF.\n    -s , -stats                     : Name of stats file (summary). Default is 'snpEff_summary.html'\n    -noStats                        : Do not create stats (summary) file\n    -csvStats                       : Create CSV summary file instead of HTML\n\nResults filter options:\n    -fi , -filterInterval  &lt;file&gt;   : Only analyze changes that intersect with the intervals specified in this file (you may use this option many times)\n    -no-downstream                  : Do not show DOWNSTREAM changes\n    -no-intergenic                  : Do not show INTERGENIC changes\n    -no-intron                      : Do not show INTRON changes\n    -no-upstream                    : Do not show UPSTREAM changes\n    -no-utr                         : Do not show 5_PRIME_UTR or 3_PRIME_UTR changes\n    -no EffectType                  : Do not show 'EffectType'. This option can be used several times.\n\nAnnotations options:\n    -cancer                         : Perform 'cancer' comparisons (Somatic vs Germline). Default: false\n    -cancerSamples &lt;file&gt;           : Two column TXT file defining 'original \\t derived' samples.\n    -formatEff                      : Use 'EFF' field compatible with older versions (instead of 'ANN').\n    -geneId                         : Use gene ID instead of gene name (VCF output). Default: false\n    -hgvs                           : Use HGVS annotations for amino acid sub-field. Default: true\n    -lof                            : Add loss of function (LOF) and Nonsense mediated decay (NMD) tags.\n    -noHgvs                         : Do not add HGVS annotations.\n    -noLof                          : Do not add LOF and NMD annotations.\n    -noShiftHgvs                    : Do not shift variants according to HGVS notation (most 3prime end).\n    -oicr                           : Add OICR tag in VCF file. Default: false\n    -sequenceOntology               : Use Sequence Ontology terms. Default: true\n\nGeneric options:\n    -c , -config                 : Specify config file\n    -d , -debug                  : Debug mode (very verbose).\n    -dataDir &lt;path&gt;              : Override data_dir parameter from config file.\n    -download                    : Download a SnpEff database, if not available locally. Default: true\n    -nodownload                  : Do not download a SnpEff database, if not available locally.\n    -noShiftHgvs                 : Do not shift variants towards most 3-prime position (as required by HGVS).\n    -h , -help                   : Show this help and exit\n    -noLog                       : Do not report usage statistics to server\n    -t                           : Use multiple threads (implies '-noStats'). Default 'off'\n    -q ,  -quiet                 : Quiet mode (do not show any messages or errors)\n    -v , -verbose                : Verbose mode\n\nDatabase options:\n    -canon                       : Only use canonical transcripts.\n    -interval                    : Use a custom intervals in TXT/BED/BigBed/VCF/GFF file (you may use this option many times)\n    -motif                       : Annotate using motifs (requires Motif database).\n    -nextProt                    : Annotate using NextProt (requires NextProt database).\n    -noGenome                    : Do not load any genomic database (e.g. annotate using custom files).\n    -noMotif                     : Disable motif annotations.\n    -noNextProt                  : Disable NextProt annotations.\n    -onlyReg                     : Only use regulation tracks.\n    -onlyProtein                 : Only use protein coding transcripts. Default: false\n    -onlyTr &lt;file.txt&gt;           : Only use the transcripts in this file. Format: One transcript ID per line.\n    -reg &lt;name&gt;                  : Regulation track to use (this option can be used add several times).\n    -ss , -spliceSiteSize &lt;int&gt;  : Set size for splice sites (donor and acceptor) in bases. Default: 2\n    -strict                      : Only use 'validated' transcripts (i.e. sequence has been checked). Default: false\n    -ud , -upDownStreamLen &lt;int&gt; : Set upstream downstream interval length (in bases)\n</code></pre>"},{"location":"snpeff/commandline/#annotation-filters","title":"Annotation Filters","text":"<p>SnpEff supports filter of output results by using combinations of the following command line options:</p> <p>Warning</p> <p>Output filters can be implemented using <code>SnpSift filter</code>, which allows to create more flexible and complex filters.</p> Command line option Meaning <code>-no-downstream</code> Do not show DOWNSTREAM changes <code>-no-intergenic</code> Do not show INTERGENIC changes <code>-no-intron</code> Do not show INTRON changes <code>-no-upstream</code> Do not show UPSTREAM changes <code>-no-utr</code> Do not show 5_PRIME_UTR or 3_PRIME_UTR changes <code>-no &lt;effect_type&gt;</code> Do not show <code>effect_type</code> (it can be used several times), e.g: <code>-no INTERGENIC -no SPLICE_SITE_REGION</code>"},{"location":"snpeff/commandline/#disabling-upstream-and-downstream-annotations","title":"Disabling Upstream and Downstream annotations","text":"<p>You can change the default upstream and downstream interval size (default is 5K) using the <code>-ud size_in_bases</code> option. This also allows to eliminate any upstream and downstream effect by using \"-ud 0\".</p> <p>Example: Make upstream and downstream size zero (i.e. do not report any upstream or downstream effect).</p> <pre><code>java -Xmx8g -jar snpEff.jar -ud 0 GRCh37.75 test.chr22.vcf &gt; test.chr22.ann.vcf\n</code></pre>"},{"location":"snpeff/commandline/#splice-site-size","title":"Splice site size","text":"<p>You can change the default splice site size (default is 2 bases) using the <code>-spliceSiteSize size_in_bases</code> option.</p> <p>Example: Make splice sites four bases long</p> <pre><code>java -Xmx8g -jar snpEff.jar -spliceSiteSize 4 GRCh37.75 test.chr22.vcf &gt; test.chr22.ann.vcf\n</code></pre>"},{"location":"snpeff/commandline/#adding-your-own-annotations","title":"Adding your own annotations","text":"<p>SnpEff allows user defined intervals to be annotated. This is achieved using the <code>-interval file.bed</code> command line option, which can be used multiple times in the same command line (it accepts files in TXT, BED, BigBed, VCF, GFF formats). Any variant that intersects an interval defined in those files, will be annotated using the \"name\" field (fourth column) in the input bed file.</p> <p>Example: We create our own annotations in <code>my_annotations.bed</code> <pre><code>$ cat my_annotations.bed\n1   10000   20000   MY_ANNOTATION\n\n$ cat test.vcf\n1   10469   .   C   G   365.78  PASS    AC=30;AF=0.0732\n\nAnnotate (output edited for readability)\n\n$ java -Xmx8g -jar snpEff.jar -interval my_annotations.bed GRCh37.66 test.vcf\n1    10469    .    C    G    365.78    PASS    AC=30;AF=0.0732;\n                                               ANN=G|upstream_gene_variant|MODIFIER|DDX11L1|ENSG00000223972|transcript|ENST00000456328|processed_transcript||n.-1C&gt;G|||||1400|\n                                               ...\n                                               G|custom|MODIFIER|||CUSTOM&amp;my_annotations|MY_ANNOTATION|||||||||\n</code></pre></p> <p>Notice that the variant was annotated using \"MY_ANNOTATION\" in the <code>ANN</code> field.</p>"},{"location":"snpeff/commandline/#selecting-transcripts","title":"Selecting transcripts","text":""},{"location":"snpeff/commandline/#canonical-transcripts","title":"Canonical transcripts","text":"<p>SnpEff allows to annotate using canonical transcripts by using <code>-canon</code> command line option.</p> <p>Warning</p> <p>Canonical transcripts are defined as the longest CDS of amongst the protein coding transcripts in a gene. If none of the transcripts in a gene is protein coding, then it is the longest cDNA.</p> <p>Warning</p> <p>Although this seems to be the standard definitions of \"canonical transcript\", there is no warranties that what SnpEff considers a canonical transcript will match exactly what UCSC or ENSEMBL consider a canonical transcript.</p> <p>Example on how to use canonical transcripts annotations:</p> <pre><code>java -Xmx8g -jar snpEff.jar -v -canon GRCh37.75 examples/test.chr22.vcf &gt; file.ann.canon.vcf\n</code></pre> <p>In order to get a list of canonical transcripts, you can use the <code>-d</code> (debug) command line option. E.g.: <pre><code>$ java -Xmx8g -jar snpEff.jar -d -v -canon GRCh37.75 test.vcf\n00:00:00.000    Reading configuration file 'snpEff.config'\n00:00:00.173    done\n00:00:00.173    Reading database for genome version 'GRCh37.66'\n00:00:02.834    done\n00:00:02.845    Filtering out non-canonical transcripts.\n00:00:03.219    Canonical transcripts:\n                geneName        geneId          transcriptId    cdsLength\n                GGPS1           ENSG00000152904 ENST00000488594 903\n                RP11-628K18.1.1 ENSG00000235112 ENST00000430808 296\n                MIPEPP2         ENSG00000224783 ENST00000422560 1819\n                FEN1P1          ENSG00000215873 ENST00000401028 1145\n                AL591704.7.1    ENSG00000224784 ENST00000421658 202\n                CAPNS1P1        ENSG00000215874 ENST00000401029 634\n                ST13P20         ENSG00000215875 ENST00000447996 1061\n                NCDN            ENSG00000020129 ENST00000373243 2190\n                RP11-99H8.1.1   ENSG00000226208 ENST00000423187 432\n                AL391001.1      ENSG00000242652 ENST00000489859 289\n...\n</code></pre></p>"},{"location":"snpeff/commandline/#selected-list-of-transcripts","title":"Selected list of transcripts","text":"<p>SnpEff allows you to provide a list of transcripts to use for annotations by using the <code>-onlyTr file.txt</code> and providing a file with one transcript ID per line. Any other transcript will be ignored.</p> <pre><code>java -Xmx8g -jar snpEff.jar -onlyTr my_transcripts.txt GRCh37.75 test.chr22.vcf &gt; test.chr22.ann.vcf\n</code></pre>"},{"location":"snpeff/commandline/#finltering-by-transcript-tags","title":"Finltering by transcript tags","text":"<p>In some cases the genome files contain tags, for example, here are from GTF lines from ENSEMBL's GRCh38 (MANE release 1.0):</p> <p>Note, GTF lines edited for readability: <pre><code>chr1  .  transcript  1471765  1497848  .  +  .  transcript_id \"ENST00000673477.1\";  gene_name \"ATAD3B\"; tag \"MANE_Select\";\nchr1  .  transcript  3069203  3438621  .  +  .  transcript_id \"ENST00000270722.10\"; gene_name \"PRDM16\"; tag \"MANE_Select\";\nchr1  .  transcript  2476289  2505532  .  +  .  transcript_id \"ENST00000378486.8\";  gene_name \"PLCH2\";  tag \"MANE_Select\";\nchr1  .  transcript  9292894  9369532  .  +  .  transcript_id \"ENST00000328089.11\"; gene_name \"SPSB1\";  tag \"MANE_Select\";\nchr1  .  transcript  9035106  9069635  .  -  .  transcript_id \"ENST00000377424.9\";  gene_name \"SLC2A5\"; tag \"MANE_Select\";\nchr1  .  transcript  8861000  8878686  .  -  .  transcript_id \"ENST00000234590.10\"; gene_name \"ENO1\";   tag \"MANE_Select\"; tag \"CAGE_supported_TSS\";\n</code></pre></p> <p>Command line arguments for tag selection:</p> <ul> <li><code>-tag &lt;tag_name&gt;</code>: Only use transcripts that match <code>&lt;tag_name&gt;</code></li> <li><code>-tagNo &lt;tag_name&gt;</code>: Filter out transcripts that match <code>&lt;tag_name&gt;</code></li> </ul> <p>Info</p> <p>Both <code>-tag</code> and <code>-tagNo</code> options can be specified multiple times</p>"},{"location":"snpeff/commandline/#other-options","title":"Other options","text":""},{"location":"snpeff/commandline/#logging","title":"Logging","text":"<p>SnpEff will try to log usage statistics to our \"log server\". This is useful for us to understand user's needs and have some statistics on what users are doing with the program (e.g. decide whether a command or option is useful or not). Logging can be deactivated by using the <code>-noLog</code> command line option.</p>"},{"location":"snpeff/commandline/#annotating-selected-intervals","title":"Annotating selected intervals","text":"<p>You can use the <code>-fi intervals.bed</code> command line option (filterInterval). For instance, let's assume you have an interval file 'intervals.bed': <pre><code>2L  10000   10999\n2L  12000   12999\n2L  14000   14999\n2L  16000   16999\n2L  18000   18999 \n</code></pre> In order to get only variants matching your intervals, you can use the command:</p> <pre><code>$ java -Xmx8g -jar snpEff.jar -fi intervals.bed GRCh38.76 test.chr22.vcf\n</code></pre>"},{"location":"snpeff/commandline/#gene-id-instead-of-gene-names","title":"Gene ID instead of gene names","text":"<p>You can obtain gene IDs instead of gene names by using the command line option <code>-geneId</code>. Note: This is only for the old 'EFF' field ('ANN' field always shows both gene name and gene ID).</p> <p>Example:</p> <pre><code>$ java -Xmx8g -jar snpEff.jar -geneId GRCh37.66 test.vcf 1  902128  3617  C  T  .  PASS  AC=80;EFF=NON_SYNONYMOUS_CODING(MODERATE|MISSENSE|gCt/gTt|A43V|576|ENSG00000187583|protein_coding|CODING|ENST00000379407|2|1),...\n</code></pre> <p>Note: The gene 'PLEKHN1' was annotated as 'ENSG00000187583'.</p>"},{"location":"snpeff/commandline/#speed-up-options-no-statistics","title":"Speed up options: No statistics","text":"<p>In order to speed up the annotation process, you can de-activate the statistics. Calculating statistics can take a significant amount of time, particularly if there are hundreds or thousands of samples in the (multi-sample) VCF file. The command line option <code>-noStats</code> disables the statistics and may result in a significant speedup.</p>"},{"location":"snpeff/commandline/#hgvs-classic-notation","title":"HGVS / Classic notation","text":"<p>SnpEff uses HGVS notation, which is somewhat popular amongst clinicians.</p> <p>You can switch to the old (deprecated) annotaions format, using the command line option <code>-classic</code>.</p>"},{"location":"snpeff/commandline/#compressed-files","title":"Compressed files","text":"<p>SnpEff will automatically open gzip compresssed files, even if you don't specify the '.gz' extension. Example</p> <pre><code># Create compressed version of the examples files\ncp examples/test.chr22.vcf my.vcf\n\n# Compress it\ngzip my.vcf \n\n# Annotate the comressed file\njava -Xmx8g -jar snpEff.jar GRCh37.75 my.vcf.gz &gt; my.ann.vcf\n</code></pre>"},{"location":"snpeff/commandline/#streaming-files","title":"Streaming files","text":"<p>Info</p> <p>You can use \"<code>-</code>\" as input file name to specify <code>STDIN</code>. As of version 4.0 onwards <code>STDIN</code> is the default, so using no file name at all, also means <code>STDIN</code>.</p> <p>For example, you can easily stream files like this: <pre><code># These three commands are the same\n\n# Using STDIN (pipe), implicit (no input file name)\ncat test.chr22.vcf | java -Xmx8g -jar snpEff.jar hg19 &gt; test.chr22.ann.vcf\n\n# Using STDIN (pipe), exlicit '-' input file name\ncat test.chr22.vcf | java -Xmx8g -jar snpEff.jar hg19 - &gt; test.chr22.ann.vcf\n\n# Using explicit file name\njava -Xmx8g -jar snpEff.jar hg19 test.chr22.vcf &gt; test.chr22.ann.vcf\n</code></pre></p>"},{"location":"snpeff/commands/","title":"Commands and utilities","text":"<p>SnpEff provides several other commands and utilities that can be useful for genomic data analysis.</p> <p>Most of this manual was dedicated the <code>SnpEff eff</code> and <code>SnpEff build</code> commands, which annotate effects and build databases respectively. Here we describe all the other commands and some scripts provided, that are useful for genomic data analysis.</p>"},{"location":"snpeff/commands/#snpeff-closest","title":"SnpEff closest","text":"<p>Annotates using the closest genomic region (e.g. exon, transcript ID, gene name) and distance in bases.</p> <p>Example: <pre><code>$ java -Xmx8g -jar snpEff.jar closest GRCh37.66 test.vcf\n##INFO=&lt;ID=CLOSEST,Number=4,Type=String,Description=\"Closest exon: Distance (bases), exons Id, transcript Id, gene name\"&gt;\n1       12078   .       G       A       25.69   PASS    AC=2;AF=0.048;CLOSEST=0,exon_1_11869_12227,ENST00000456328,DDX11L1\n1       16097   .       T       G       42.42   PASS    AC=9;AF=0.0113;CLOSEST=150,exon_1_15796_15947,ENST00000423562,WASH7P\n1       40261   .       C       A       366.26  PASS    AC=30;AF=0.484;CLOSEST=4180,exon_1_35721_36081,ENST00000417324,FAM138A\n1       63880   .       C       T       82.13   PASS    AC=10;AF=0.0400;CLOSEST=0,exon_1_62948_63887,ENST00000492842,OR4G11P\n</code></pre></p> <p>For instance, in the third line (1:16097 T G), it added the tag <code>CLOSEST=150,exon_1_15796_15947,ENST00000423562,WASH7P</code> , which means that the variant is 150 bases away from exon \"exon_1_15796_15947\". The exon belongs to transcript \"ENST00000423562\" of gene \"WASH7P\".</p> <p>Info</p> <p>If multiple markers are available (at the same distance) the one belonging to the longest mRna transcript is shown.</p> <p>The input can also be a BED file, the output file has the same information as CLOSEST info field, added to the fourth column of the output BED file: <pre><code>$ snpeff closest -bed GRCh37.66 test.bed\n1   12077   12078   line_1;0,exon_1_11869_12227,ENST00000456328,DDX11L1\n1   16096   16097   line_2;150,exon_1_15796_15947,ENST00000423562,WASH7P\n1   40260   40261   line_3;4180,exon_1_35721_36081,ENST00000417324,FAM138A\n1   63879   63880   line_4;0,exon_1_62948_63887,ENST00000492842,OR4G11P\n</code></pre></p>"},{"location":"snpeff/commands/#snpeff-count","title":"SnpEff count","text":"<p>As the name suggests, <code>snpEff count</code> command counts how many reads and bases from a BAM file hit a gene, transcript, exon, intron, etc. Input files can be in BAM, SAM, VCF, BED or BigBed formats.</p> <p>A summary HTML file with charts is generated. Here are some examples:</p> <p></p> <p></p> <p>If you need to count how many reads (and bases) from a BAM file hit each genomic region, you can use 'count' utility.</p> <p>The command line is quite simple. E.g. in order to count how many reads (from N BAM files) hit regions of the human genome, you simply run:</p> <pre><code>java -Xmx8g -jar snpEff.jar count GRCh37.68 readsFile_1.bam readsFile_2.bam ...  readsFile_N.bam &gt; countReads.txt\n</code></pre> <p>The output is a TXT (tab-separated) file, that looks like this: <pre><code>chr  start  end       type                IDs                         Reads:readsFile_1.bam  Bases:readsFile_1.bam  Reads:readsFile_2.bam  Bases:readsFile_2.bam ...\n1    1      11873     Intergenic          DDX11L1                     130                    6631                   50                     2544\n1    1      249250621 Chromosome          1                           2527754                251120400              2969569                328173439\n1    6874   11873     Upstream            NR_046018;DDX11L1           130                    6631                   50                     2544\n1    9362   14361     Downstream          NR_024540;WASH7P            243                    13702                  182                    9279\n1    11874  12227     Exon                exon_1;NR_046018;DDX11L1    4                      116                    2                      102\n1    11874  14408     Gene                DDX11L1                     114                    7121                   135                    6792\n1    11874  14408     Transcript          NR_046018;DDX11L1           114                    7121                   135                    6792\n1    12228  12229     SpliceSiteDonor     exon_1;NR_046018;DDX11L1    3                      6                      0                      0\n1    12228  12612     Intron              intron_1;NR_046018;DDX11L1  13                     649                    0                      0\n1    12611  12612     SpliceSiteAcceptor  exon_2;NR_046018;DDX11L1    0                      0                      0                      0\n1    12613  12721     Exon                exon_2;NR_046018;DDX11L1    3                      24                     1                      51\n1    12722  12723     SpliceSiteDonor     exon_2;NR_046018;DDX11L1    3                      6                      0                      0\n1    12722  13220     Intron              intron_2;NR_046018;DDX11L1  22                     2110                   20                     987\n1    13219  13220     SpliceSiteAcceptor  exon_3;NR_046018;DDX11L1    5                      10                     1                      2\n1    13221  14408     Exon                exon_3;NR_046018;DDX11L1    82                     4222                   113                    5652\n1    14362  14829     Exon                exon_11;NR_024540;WASH7P    37                     1830                   7                      357\n1    14362  29370     Transcript          NR_024540;WASH7P            704                    37262                  524                    34377\n1    14362  29370     Gene                WASH7P                      704                    37262                  524                    34377\n1    14409  19408     Downstream          NR_046018;DDX11L1           122                    7633                   39                     4254\n</code></pre> The columns are:</p> <ul> <li>Column 1: Chromosome name</li> <li>Column 2: Genomic region start</li> <li>Column 3: Genomic region end</li> <li>Column 4: Genomic region type (e.g. Exon, Gene, SpliceSiteDonor, etc.)</li> <li>Column 5: ID (e.g. exon ID ; transcript ID; gene ID)</li> <li>Column 6: Count of reads (in file readsFile_1.bam) intersecting genomic region.</li> <li>Column 7: Count of bases (in file readsFile_1.bam) intersecting genomic region, i.e. each read is intersected and the resulting number of bases added.</li> <li>Column ...:  (repeat count reads and bases for each BAM file provided)</li> </ul> <p>Totals and Binomial model</p> <p>Using command line option <code>-p</code>, you can calculate p-values based on a Binomial model. For example (output edited for the sake of brevity): <pre><code>$ java -Xmx8g -jar snpEff.jar count -v BDGP5.69 fly.bam &gt; countReads.txt\n00:00:00.000    Reading configuration file 'snpEff.config'\n...\n00:00:12.148    Calculating probability model for read length 50\n...\ntype               p.binomial             reads.fly  expected.fly  pvalue.fly\nChromosome         1.0                    205215     205215        1.0\nDownstream         0.29531659795589793    59082      60603         1.0\nExon               0.2030262729897713     53461      41664         0.0\nGene               0.49282883664487515    110475     101136        0.0\nIntergenic         0.33995644860241336    54081      69764         0.9999999963234701\nIntron             0.3431415343615103     72308      70418         9.06236369003514E-19\nRareAminoAcid      9.245222303207472E-7   3          0             9.879186871519377E-4\nSpliceSiteAcceptor 0.014623209601955131   3142       3001          0.005099810118785825\nSpliceSiteDonor    0.015279075154423956   2998       3135          0.9937690786738507\nTranscript         0.49282883664487515    110475     101136        0.0\nUpstream           0.31499087549896493    64181      64641         0.9856950416729887\nUtr3prime          0.03495370828296416    8850       7173          1.1734134297889064E-84\nUtr5prime          0.02765432673262785    8146       5675          7.908406840800345E-215\n</code></pre></p> <p>The columns in for this table are (in the previous example the input file was 'fly.bam' so fileName is 'fly'):</p> <ul> <li>type : Type of interval</li> <li>p.binomial : Probability that a random read hits this 'type' of interval (in binomial model)</li> <li>reads.fileName : Total number of reads in 'fileName' (user provided BAM/SAM file)</li> <li>expected.fileName : Expected number of reads hitting this 'type' of interval (for user provided BAM/SAM file)</li> <li>pvalue.fileName : p-value that 'reads.fileName' reads or more hit this 'type' of interval (for user provided BAM/SAM file)</li> <li>Column ...:  (repeat last three column for each BAM/SAM file provided by the user)</li> </ul> <p>User defined intervals</p> <p>You can add user defined intervals using <code>-i file.bed</code> command line option. The option can be used multiple times, thus allowing multiple BED files to be added.</p> <p>Example : You want to know how many reads intersect each peak from a peak detection algorithm:</p> <pre><code>java -Xmx8g -jar snpEff.jar count -i peaks.bed GRCh37.68 reads.bam\n</code></pre>"},{"location":"snpeff/commands/#snpeff-databases","title":"SnpEff databases","text":"<p>This command provides a list of configured databases, i.e. available in <code>snpEff.config</code> file.</p> <p>Example: <pre><code>$ java -jar snpEff.jar databases\nGenome                                                      Organism                                                    Status    Bundle                        Database download link\n------                                                      --------                                                    ------    ------                        ----------------------\n129S1_SvImJ_v1.99                                           Mus_musculus_129s1svimj                                                                             https://snpeff.blob.core.windows.net/databases/v5_0/snpEff_v5_0_129S1_SvImJ_v1.99.zip\nAIIM_Pcri_1.0.99                                            Pavo_cristatus                                                                                      https://snpeff.blob.core.windows.net/databases/v5_0/snpEff_v5_0_AIIM_Pcri_1.0.99.zip\nAKR_J_v1.99                                                 Mus_musculus_akrj                                                                                   https://snpeff.blob.core.windows.net/databases/v5_0/snpEff_v5_0_AKR_J_v1.99.zip\nAP006557.1                                                  SARS coronavirus TWH genomic RNA, complete genome.                                                                  https://snpeff.blob.core.windows.net/databases/v5_0/snpEff_v5_0_AP006557.1.zip\nAP006558.1                                                  SARS coronavirus TWJ genomic RNA, complete genome.                                                                  https://snpeff.blob.core.windows.net/databases/v5_0/snpEff_v5_0_AP006558.1.zip\nAP006559.1                                                  SARS coronavirus TWK genomic RNA, complete genome.                                                                  https://snpeff.blob.core.windows.net/databases/v5_0/snpEff_v5_0_AP006559.1.zip\nAP006560.1                                                  SARS coronavirus TWS genomic RNA, complete genome.                                                                  https://snpeff.blob.core.windows.net/databases/v5_0/snpEff_v5_0_AP006560.1.zip\nAP006561.1                                                  SARS coronavirus TWY genomic RNA, complete genome.                                                                  https://snpeff.blob.core.windows.net/databases/v5_0/snpEff_v5_0_AP006561.1.zip\n...\n</code></pre></p>"},{"location":"snpeff/commands/#snpeff-download","title":"SnpEff download","text":"<p>This command downloads and installs a database.</p> <p>Warning</p> <p>Note that the database must be configured in <code>snpEff.config</code> and available at the download site.</p> <p>Example: Download and install C.Elegans genome: <pre><code>$ java -jar snpEff.jar download -v WBcel215.69\n00:00:00.000    Downloading database for 'WBcel215.69'\n00:00:00.002    Connecting to http://downloads.sourceforge.net/project/snpeff/databases/v3_1/snpEff_v3_1_WBcel215.69.zip\n00:00:00.547    Copying file (type: application/zip, modified on: Sat Dec 01 20:59:55 EST 2012)\n00:00:00.547    Local file name: 'snpEff_v3_1_WBcel215.69.zip'\n00:00:01.949    Downloaded 1049506 bytes\n00:00:03.624    Downloaded 2135266 bytes\n00:00:05.067    Downloaded 3185026 bytes\n00:00:06.472    Downloaded 4234786 bytes\n00:00:07.877    Downloaded 5284546 bytes\n00:00:09.580    Downloaded 6374626 bytes\n00:00:11.005    Downloaded 7424386 bytes\n00:00:12.410    Downloaded 8474146 bytes\n00:00:13.815    Downloaded 9523906 bytes\n00:00:15.358    Downloaded 10604226 bytes\n00:00:16.761    Downloaded 11653666 bytes\n00:00:18.168    Downloaded 12703426 bytes\n00:00:19.573    Downloaded 13753186 bytes\n00:00:21.198    Downloaded 14837506 bytes\n00:00:22.624    Downloaded 15887266 bytes\n00:00:24.029    Downloaded 16937026 bytes\n00:00:25.434    Downloaded 17986786 bytes\n00:00:26.864    Downloaded 19036546 bytes\n00:00:28.269    Downloaded 20086306 bytes\n00:00:29.155    Donwload finished. Total 20748168 bytes.\n00:00:29.156    Local file name: '/home/pcingola//snpEff/data/WBcel215.69/snpEffectPredictor.bin'\n00:00:29.156    Extracting file 'data/WBcel215.69/snpEffectPredictor.bin' to '/home/pcingola//snpEff/data/WBcel215.69/snpEffectPredictor.bin'\n00:00:29.157    Creating local directory: '/home/pcingola/snpEff/data/WBcel215.69'\n00:00:29.424    Unzip: OK\n00:00:29.424    Done\n</code></pre></p>"},{"location":"snpeff/commands/#snpeff-dump","title":"SnpEff dump","text":"<p>Dump the contents of a database to a text file, a BED file or a tab separated TXT file (that can be loaded into R).</p> <p>BED file example: <pre><code>$ java -jar snpEff.jar download -v GRCh37.70\n$ java -Xmx8g -jar snpEff.jar dump -v -bed GRCh37.70 &gt; GRCh37.70.bed\n00:00:00.000    Reading database for genome 'GRCh37.70' (this might take a while)\n00:00:32.476    done\n00:00:32.477    Building interval forest\n00:00:45.928    Done.\n</code></pre></p> <p>The output file looks like a typical BED file (chr \\t start \\t end \\t name).</p> <p>Warning</p> <p>Keep in mind that BED file coordinates are zero based, semi-open intervals. So a 2 base interval at (one-based) positions 100 and 101 is expressed as a BED interval <code>[99 - 101]</code>.</p> <pre><code>$ head GRCh37.70.bed\n1   0   249250621   Chromosome_1\n1   111833483   111863188   Gene_ENSG00000134216\n1   111853089   111863002   Transcript_ENST00000489524\n1   111861741   111861861   Cds_CDS_1_111861742_111861861\n1   111861948   111862090   Cds_CDS_1_111861949_111862090\n1   111860607   111860731   Cds_CDS_1_111860608_111860731\n1   111861114   111861300   Cds_CDS_1_111861115_111861300\n1   111860305   111860427   Cds_CDS_1_111860306_111860427\n1   111862834   111863002   Cds_CDS_1_111862835_111863002\n1   111853089   111853114   Utr5prime_exon_1_111853090_111853114\n</code></pre> <p>TXT file example: <pre><code>$ java -Xmx8g -jar snpEff.jar dump -v -txt GRCh37.70 &gt; GRCh37.70.txt\n00:00:00.000    Reading database for genome 'GRCh37.70' (this might take a while)\n00:00:31.961    done\n00:00:31.962    Building interval forest\n00:00:45.467    Done.\n</code></pre> In this case, the output file looks like a typical BED file (chr \\t start \\t end \\t name): <pre><code>$ head GRCh37.70.txt\nchr start       end        strand  type         id                          geneName  geneId            numberOfTranscripts  canonicalTranscriptLength  transcriptId     cdsLength  numerOfExons  exonRank  exonSpliceType\n1   1           249250622  +1      Chromosome   1                                                                                                       \n1   111833484   111863189  +1      Gene         ENSG00000134216             CHIA      ENSG00000134216   10                   1431                                                                  \n1   111853090   111863003  +1      Transcript   ENST00000489524             CHIA      ENSG00000134216   10                   1431                       ENST00000489524  862        9                     \n1   111861742   111861862  +1      Cds          CDS_1_111861742_111861861   CHIA      ENSG00000134216   10                   1431                       ENST00000489524  862        9                     \n1   111861949   111862091  +1      Cds          CDS_1_111861949_111862090   CHIA      ENSG00000134216   10                   1431                       ENST00000489524  862        9                     \n1   111853090   111853115  +1      Utr5prime    exon_1_111853090_111853114  CHIA      ENSG00000134216   10                   1431                       ENST00000489524  862        9             1         ALTTENATIVE_3SS\n1   111854311   111854341  +1      Utr5prime    exon_1_111854311_111854340  CHIA      ENSG00000134216   10                   1431                       ENST00000489524  862        9             2         SKIPPED\n1   111860608   111860732  +1      Exon         exon_1_111860608_111860731  CHIA      ENSG00000134216   10                   1431                       ENST00000489524  862        9             5         RETAINED\n1   111853090   111853115  +1      Exon         exon_1_111853090_111853114  CHIA      ENSG00000134216   10                   1431                       ENST00000489524  862        9             1         ALTTENATIVE_3SS\n1   111861742   111861862  +1      Exon         exon_1_111861742_111861861  CHIA      ENSG00000134216   10                   1431                       ENST00000489524  862        9             7         RETAINED\n</code></pre></p> <p>The format is:</p> Column Meaning chr Chromosome name start Marker start (one-based coordinate) end Marker end (one-based coordinate) strand Strand (positive or negative) type Type of marker (e.g. exon, transcript, etc.) id ID. E.g. if it's a Gene, then it may be ENSEBML's gene ID geneName Gene name, if marker is within a gene (exon, transcript, UTR, etc.), empty otherwise (e.g. intergenic) geneId Gene is, if marker is within a gene numberOfTranscripts Number of transcripts in the gene canonicalTranscriptLength CDS length of canonical transcript transcriptId Transcript ID, if marker is within a transcript cdsLength CDS length of the transcript numerOfExons Number of exons in this transcript exonRank Exon rank, if marker is an exon exonSpliceType Exon splice type, if marker is an exon"},{"location":"snpeff/commands/#snpeff-genes2bed","title":"SnpEff genes2bed","text":"<p>Dumps a selected set of genes as BED intervals.</p> <p>Warning</p> <p>The functionality of this command is a subset of <code>SnpEff dump</code>, so it is likely to be deprecated in the future.</p> <p>Example: <pre><code>$ java -Xmx8g -jar snpEff.jar genes2bed GRCh37.66 DDX11L1 WASH7P\n#chr    start   end geneName;geneId\n1   11868   14411   DDX11L1;ENSG00000223972\n1   14362   29805   WASH7P;ENSG00000227232\n</code></pre></p>"},{"location":"snpeff/commands/#snpeff-cds-snpeff-protein","title":"SnpEff cds &amp; SnpEff protein","text":"<p>These commands perform SnpEff database sanity checks. They calculate CDS and protein sequences from a SnpEff database and then compare the results to a FASTA file (having the \"correct\" sequences).</p> <p>The commands are invoked automatically when building databases, so there is no need for the user to invoke them manually.</p>"},{"location":"snpeff/commands/#snpeff-len","title":"SnpEff len","text":"<p>Calculates the genomic length of every type of marker (Gene, Exon, Utr, etc.). Length is calculated by overlapping all markers and counting the number of bases (e.g. a base is counted as 'Exon' if any exon falls onto that base). This command also reports the probability of a Binomial model.</p> <p>Info</p> <p>Parameter <code>-r num</code> adjusts the model for a read length of 'num' bases. That is, if two markers of the same type are closer than 'num' bases, it joins them by inclining the bases separating them.</p> <p>E.g.: <pre><code>$ java -Xmx1g -jar snpEff.jar len -r 100 BDGP5.69\nmarker                   size    count     raw_size raw_count    binomial_p\nCds                  22767006    56955     45406378    122117    0.13492635563570918\nChromosome          168736537       15    168736537        15    1.0\nDownstream           49570138     5373    254095562     50830    0.29377240330587084\nExon                 31275946    61419     63230008    138474    0.18535372691689175\nGene                 82599213    11659     87017182     15222    0.4895158717166277\nIntergenic           56792611    11637     56792611     11650    0.3365756581812509\nIntron               55813748    42701    168836797    113059    0.33077452573297744\nSpliceSiteAcceptor      97977    48983       226118    113059    5.806507691929223E-4\nSpliceSiteDonor        101996    50981       226118    113059    6.044689657225808E-4\nTranscript           82599213    11659    232066805     25415    0.4895158717166277\nUpstream             52874082     5658    254044876     50830    0.3133528928592389\nUtr3prime             5264120    13087     10828991     24324    0.031197274126824114\nUtr5prime             3729197    19324      6368070     33755    0.02210070839607192\n</code></pre> Column meaning:</p> <ul> <li>marker : Type of marker interval</li> <li>size : Size of all intervals in the genome, after overlap and join.</li> <li>count : Number of intervals in the genome, after overlap and join.</li> <li>raw_size : Size of all intervals in the genome. Note that this could be larger than the genome.</li> <li>raw_count : Number of intervals in the genome.</li> </ul>"},{"location":"snpeff/commands/#scripts","title":"Scripts","text":"<p>Several scripts are provided in the <code>scripts</code> directory. Here we briefly describe their functionality:</p>"},{"location":"snpeff/commands/#sam2fastqpl","title":"sam2fastq.pl","text":"<p>Convert a SAM input to a FASTQ output. Example: <pre><code>samtools view test.bam | ./scripts/bam2fastq.pl | head -n 12\n@HWI-ST1220:76:D12CHACXX:7:2207:18986:95756\nCGACAATGCACGACAGAGGAAGCAGAACAGATATTTAGATTGCCTCTCATT\n+\nCCCFFFFFGHHHHIIJIJJIJIJJIJJIIIJIIHIJJJIJJIJJJJJJIJJ\n@HWI-ST1220:76:D12CHACXX:7:2206:4721:162268\nATATTATAGGGAGAAATATGATCGCGTATGCGAGAGTAGTGCCAACATATT\n+\n@@@DDD&gt;DAB;?DGGEGGBCD&gt;BFGI?FCFFBFGG@&lt;?B*?BFB9FGII@E\n@HWI-ST1220:76:D12CHACXX:7:1304:13069:17740\nATAGGGAGAAATATGATCGCGTATGCGAGAGTAGTGCCAACATATTGTGCT\n+\nCCCFFFFFHHHHHJJJJJJJJGIJJJJJJAGBGGIIIJJJJJJJJJJJIJG\n</code></pre></p>"},{"location":"snpeff/commands/#fasta2tabpl","title":"fasta2tab.pl","text":"<p>Convert a fasta file to a two column tab-separated TXT file (name \\t sequence)</p> <p>Example (output truncated for brevity): <pre><code>$ zcat ce6.fa.gz | ./scripts/fasta2tab.pl\nchrI    gcctaagcctaagcctaagcctaagcctaagcctaagcctaagcct...\nchrV    GAATTcctaagcctaagcctaagcctaagcctaagcctaagcctaa...\nchrII   cctaagcctaagcctaagcctaagcctaagcctaagcctaagccta...\nchrM    CAGTAAATAGTTTAATAAAAATATAGCATTTGGGTTGCTAAGATAT...\nchrX    ctaagcctaagcctaagcctaagcctaagcctaagcctaagcctaa...\nchrIV   cctaagcctaagcctaagcctaagcctaagcctaagcctaagccta...\nchrIII  cctaagcctaagcctaagcctaagcctaagcctaagcctaagccta...\n</code></pre></p>"},{"location":"snpeff/commands/#fastasplitpl","title":"fastaSplit.pl","text":"<p>Split a multiple sequence FASTA file to individual files.</p> <p>Example: Creates one file per chromosome: <pre><code>$ zcat ce6.fa.gz | ./scripts/fastaSplit.pl\nWriting to chrI.fa\nWriting to chrV.fa\nWriting to chrII.fa\nWriting to chrM.fa\nWriting to chrX.fa\nWriting to chrIV.fa\nWriting to chrIII.fa\n</code></pre></p>"},{"location":"snpeff/commands/#plothistogrampl","title":"plotHistogram.pl","text":"<p>Given a list of numbers (one per line), shows a histogram. Note: It requires R.</p> <p>Example: Extract the file sizes in a directory and show a histogram</p> <pre><code>$ ls -al scripts/ | tr -s \" \" | cut -f 5 -d \" \" | ./scripts/hist.pl\n</code></pre> <p>Creates the following plot: </p>"},{"location":"snpeff/commands/#plotmapl-plotpl-plotqqpl-plotsmoothscatterpl","title":"plotMA.pl, plot.pl, plotQQ.pl, plotSmoothScatter.pl","text":"<p>Similar to 'hist.pl', these perform plots based on input from STDIN. Note that in some cases, inputs are expected to be probabilities (qqplot.pl) or pairs of numbers (maPlot.pl).</p> <pre><code>$ ls -al scripts/ | tr -s \" \" | cut -f 5 -d \" \" | ./scripts/plot.pl\n</code></pre> <p>Creates the following plot: </p>"},{"location":"snpeff/commands/#queuepl","title":"queue.pl","text":"<p>Process a list of statements in parallel according to the number of CPUs available in the local machine.</p>"},{"location":"snpeff/commands/#splitchrpl","title":"splitChr.pl","text":"<p>Splits a file by chromosome. Works on any tab separated file that the first column is CHR field (e.g. BED, VCF, etc.)</p> <p>Example: <pre><code>$ cat large_test.vcf | ./scripts/splitChr.pl\nInput line 28. Creating file 'chr1.txt'\nInput line 13332. Creating file 'chr2.txt'\nInput line 22097. Creating file 'chr3.txt'\nInput line 29289. Creating file 'chr4.txt'\nInput line 34236. Creating file 'chr5.txt'\nInput line 39899. Creating file 'chr6.txt'\nInput line 47120. Creating file 'chr7.txt'\nInput line 53371. Creating file 'chr8.txt'\nInput line 57810. Creating file 'chr9.txt'\nInput line 63005. Creating file 'chr10.txt'\nInput line 68080. Creating file 'chr11.txt'\nInput line 76629. Creating file 'chr12.txt'\nInput line 83071. Creating file 'chr13.txt'\nInput line 85124. Creating file 'chr14.txt'\nInput line 89281. Creating file 'chr15.txt'\nInput line 93215. Creating file 'chr16.txt'\nInput line 99081. Creating file 'chr17.txt'\nInput line 106405. Creating file 'chr18.txt'\nInput line 108330. Creating file 'chr19.txt'\nInput line 118568. Creating file 'chr20.txt'\nInput line 121795. Creating file 'chr21.txt'\nInput line 123428. Creating file 'chr22.txt'\nInput line 126520. Creating file 'chrX.txt'\nInput line 129094. Creating file 'chrY.txt'\nInput line 129113. Creating file 'chrMT.txt'\n</code></pre></p>"},{"location":"snpeff/commands/#uniqcountpl","title":"uniqCount.pl","text":"<p>Count number of unique lines. It's the same as doing <code>cat lines.tst | sort | uniq -c</code>, but much faster. Particularly useful for very large inputs.</p>"},{"location":"snpeff/commands/#vcfeffoneperlinepl","title":"vcfEffOnePerLine.pl","text":"<p>Splits EFF fields in a VCF file, creating multiple lines, each one with only one effect.</p> <p>Very useful for filtering with SnpSift.</p> <p>Example:</p> <pre><code>$ cat test.stop.vcf\n1   897062  .   C   T   100.0   PASS    AC=1;EFF=STOP_GAINED(HIGH|NONSENSE|Cag/Tag|Q141*|642|KLHL17||CODING|NM_198317|),UPSTREAM(MODIFIER||||576|PLEKHN1||CODING|NM_001160184|),UPSTREAM(MODIFIER||||611|PLEKHN1||CODING|NM_032129|),UPSTREAM(MODIFIER||||749|NOC2L||CODING|NM_015658|)\n\n$ cat test.stop.vcf | ./scripts/vcfEffOnePerLine.pl\n1   897062  .   C   T   100.0   PASS    AC=1;EFF=STOP_GAINED(HIGH|NONSENSE|Cag/Tag|Q141*|642|KLHL17||CODING|NM_198317|)\n1   897062  .   C   T   100.0   PASS    AC=1;EFF=UPSTREAM(MODIFIER||||576|PLEKHN1||CODING|NM_001160184|)\n1   897062  .   C   T   100.0   PASS    AC=1;EFF=UPSTREAM(MODIFIER||||611|PLEKHN1||CODING|NM_032129|)\n1   897062  .   C   T   100.0   PASS    AC=1;EFF=UPSTREAM(MODIFIER||||749|NOC2L||CODING|NM_015658|)\n</code></pre>"},{"location":"snpeff/faq/","title":"SnpEff: Frequently Asked Questions","text":""},{"location":"snpeff/faq/#error-and-warning-messages","title":"Error and Warning messages","text":"<p>SnpEff defines several messages in roughly 3 categories:</p> <ul> <li>INFO: An informative message</li> <li>WARNING: A problem in the reference genome definition that MAY result in an incorrect variant annotation</li> <li>ERROR: A problem in the reference genome definition that WILL ALMOST CERTAINLY result in an incorrect variant annotation</li> </ul> <p>INFO_REALIGN_3_PRIME</p> <p>The variant has been realigned to the most 3-prime position within the transcript.</p> <p>This is usually done to comply with HGVS specification to always report the most 3-prime annotation. While VCF requires to realign to the left-most of the reference genome, HGSV requires to realign to the most 3-prime. These two specifications are contradicting in some cases, so in order to comply with HGSV, sometimes a local realignment is required.</p> <p>IMPORTANT: This message is just indicating that a realignment was performed, so  when this INFO message is present, the original coordinates from the VCF file are not exactly the same as the coordinates used to calculate the variant annotation </p> <p>WARNING_SEQUENCE_NOT_AVAILABLE</p> <p>The exon does not have reference sequence information. The annotation may not be calculated (e.g. incomplete transcripts).</p> <p>WARNING_REF_DOES_NOT_MATCH_GENOME</p> <p>The genome reference does not match the variant's reference.</p> <p>For example, if the VCF file indicates that the reference at a certain location is 'A', while SnpEff's database indicates that the reference should be 'C', this WARNING would be added.</p> <p>Under normal circumstances, there should be none of these warnings (or at most a handful).</p> <p>IMPORTANT: If too many of these warnings are seen, this indicates a severe problem (version mismatch between your VCF files and the reference genome). A typical case when too many of these warning are seen is when trying to annotate using a different genome than the one used for alignment (e.g. reads are aligned to hg19 but variants are annotated to using hg38)</p> <p>WARNING_TRANSCRIPT_INCOMPLETE</p> <p>The number of coding bases is NOT multiple of 3, so there is missing information for at least one codon. This indicates an error in the reference genome gene and/or transcript definition. This could happen in genomes that are not well understood.</p> <p>WARNING_TRANSCRIPT_MULTIPLE_STOP_CODONS</p> <p>Multiple STOP codons found in a CDS. There should be only one STOP codon at the end of the transcript, but in this case, the transcript has multiple STOP codons, which is unlikely to be real.</p> <p>This usually indicates an error on the reference genome (or database). Could for, for example, indicating frame errors in the reference genome for one or more exons in this transcript.</p> <p>WARNING_TRANSCRIPT_NO_START_CODON</p> <p>Start codon does not match any 'start' codon in the CodonTable.</p> <p>This usually indicates an error on the reference genome (or database) but could be also due to a misconfigured codon table for the genome. You should check that the codon table is properly set in <code>snpEff.config</code></p> <p>WARNING_TRANSCRIPT_NO_STOP_CODON</p> <p>Stop codon does not match any 'stop' codon in the CodonTable.</p> <p>This usually indicates an error on the reference genome (or database) but could be also due to a misconfigured codon table for the genome. You should check that the codon table is properly set in <code>snpEff.config</code></p> <p>ERROR_CHROMOSOME_NOT_FOUND</p> <p>Chromosome name not found. Typically due to mismatch in chromosome naming conventions between variants file and database, but can be a more several problems (different reference genome).</p> <p>See more details (here)[https://github.com/pcingola/SnpEff/wiki/ERROR_CHROMOSOME_NOT_FOUND]</p> <p>ERROR_OUT_OF_CHROMOSOME_RANGE</p> <p>Variant's genomic position is outside chromosome's range.</p> <p>Simple, the variant coordinate is outside the reference genome chromosome's length.</p> <p>IMPORTANT: If too many of these warnings are seen, this indicates a severe problem (version mismatch between your VCF files and the reference genome). A typical case when too many of these warning are seen is when trying to annotate using a different genome than the one used for alignment (e.g. reads are aligned to hg19 but variants are annotated to using hg38)</p> <p>ERROR_OUT_OF_EXON</p> <p>An exonic variant is falling outside the exon.</p> <p>ERROR_MISSING_CDS_SEQUENCE</p> <p>Missing coding sequence information. In this case, the full variant annotation cannot be calculated due to missing CDS information.</p> <p>This usually indicates an error on the reference genome (or database).</p>"},{"location":"snpeff/faq/#error_chromosome_not_found-details","title":"ERROR_CHROMOSOME_NOT_FOUND: Details","text":"<p>The error is due to a difference between the chromosome names in input VCF file and the chromosome names in SnpEff's database.</p> <p>Chromosome does not exist in the reference database. Typically this means that there is a mismatch between the chromosome names in your input file and the chromosome names used in the reference genome to build SnpEff's database.</p> <p>Warning</p> <p>This error could be caused because you are trying to annotate using a reference genome that is different than the one you used for sequence alignment. Obviously doing this makes no sense and the annotation information you'll get will be garbage. That's why SnpEff shows you an error message.</p> <p>Solution</p> <p>Sometimes SnpEff database matches the reference genome for your organism, and it's just that the chromosome names are changed. In this case, you can fix the error by changing the chromosome names in your input file.</p> <p>Info</p> <p>You can see the chromosome names used by SnpEff's database by using <code>-v</code> (verbose) option. SnpEff will show a line like this one:</p> <pre><code>$ java -Xmx4g -jar snpEff.jar -v genomeName my.vcf &gt; my.ann.vcf\n...\n...\n# Chromosomes names [sizes]  : '1' [249250621] '2' [243199373]\n...\n...\n</code></pre> <p>Info</p> <p>You can see the chromosome names in your input VCF file using a command like this one</p> <pre><code>cat input.vcf | grep -v \"^#\" | cut -f 1 | uniq\n</code></pre> <p>Once you know the names of the input file and the name used by SnpEff's database, you can adjust the chromosome name using a simple sed command. For example, if you input file's chromosome name is <code>INPUT_CHR_NAME</code> and the name in SnpEff's database is <code>SNPEFF_CHR_NAME</code>, you could use the following command:</p> <pre><code>cat input.vcf | sed \"s/^INPUT_CHR_NAME/SNPEFF_CHR_NAME/\" &gt; input_updated_chr.vcf\n</code></pre>"},{"location":"snpeff/faq/#how-to-building-an-ncbi-genome-genbank-file","title":"How to building an NCBI genome (GenBank file)","text":"<p>When building a database with SnpEff if your genomic reference is in NCBI, there is a script that might help you build the database.</p> <p>The script is <code>buildDbNcbi.sh</code> and is located in snpEff's scripts directory. It takes only one argument, which is the NCBI's ID.</p> <p>Example: Salmonella enterica</p> <p>In this example, we build the database for \"Salmonella enterica subsp. enterica serovar Typhi str. P-stx-12\" having accession ID CP003278.1</p> <pre><code>$ cd ~/snpEff\n\n# Note: Output edited for brevity\n$ ./scripts/buildDbNcbi.sh CP003278.1\nDownloading genome CP003278.1\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 10.2M    0 10.2M    0     0  3627k      0 --:--:--  0:00:02 --:--:-- 3627k\n00:00:00    SnpEff version SnpEff 4.3p (build 2017-07-28 14:02), by Pablo Cingolani\n00:00:00    Command: 'build'\n00:00:00    Building database for 'CP003278.1'\n00:00:00    Reading configuration file 'snpEff.config'. Genome: 'CP003278.1'\n00:00:00    Reading config file: /home/pcingola/workspace/SnpEff/snpEff.config\n00:00:00    done\nChromosome: 'CP003278'  length: 4768352\n\n    Create exons from CDS (if needed): ..................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................\n    Exons created for 4690 transcripts.\n\n...\n00:00:01    Reading proteins from file '/home/pcingola/workspace/SnpEff/./data/CP003278.1/genes.gbk'...\n00:00:01    done (4690 Proteins).\n00:00:01    Comparing Proteins...\n    Labels:\n        '+' : OK\n        '.' : Missing\n        '*' : Error\n    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n...\n    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n    Protein check:  CP003278.1  OK: 4690    Not found: 0    Errors: 0   Error percentage: 0.0%\n00:00:02    Saving database\n...\n00:00:04    Done.\n</code></pre>"},{"location":"snpeff/faq/#creating-a-protein-sequence-fasta-file","title":"Creating a protein sequence FASTA file","text":"<p>SnpEff <code>ann</code> command has a command line option called <code>-fastaProt</code> that tells SnpEff to output the \"original\" and \"resulting\" protein sequences for each variant into a FASTA file.</p> <p>This means that for each variant, the output FASTA file will have an entry with protein sequence resulting from applying that variant to the reference sequence.</p> <p>Here is an example: <pre><code>$ cat z.vcf\n1   889455  .   G   A   .   .   .\n\n$ java -Xmx6g -jar snpEff.jar ann -fastaProt z.prot.fa hg19 z.vcf &gt; z.ann.vcf\n</code></pre></p> <p>The resulting fasta file <code>z.prot.fa</code> looks like this (lines edited for readibility):</p> <pre><code>&gt;NM_015658.3 Ref\nMAAAGSR...LLFGKVAKDSSRMLQPSSSPLWGKLRVDIKAYLGS...\n\n&gt;NM_015658.3 Variant 1:889455-889455 Ref:G Alt:A HGVS.p:p.Gln236*\nMAAAGSR...LLFGKVAKDSSRML*PSSSPLWGKLRVDIKAYLGS...\n</code></pre>"},{"location":"snpeff/faq/#genome-reference","title":"Genome reference","text":"<p>Having a standard reference sequence is the key to establish comparisons and analysis. In order to compare DNA from different individuals (or samples), we need a reference genome sequence and genomic annotations.</p> <p>Alignment and annotations must be based on the exact same reference genome sequence. Variants are called based on the reference genome, thus variant annotations must be performed using same reference genome. For instance, performing variant calling respect to hg19 and then performing variant annotations using hg38 genome, would result in completely erroneous results.</p> <p>Oftentimes lack of consistency between SnpEff annotations and genome coordinated from other data sources (e.g. a genome browser or other online databases) are due to the fact that there is a difference in genome reference versions. For example, maybe the VCF file was annotated using SnpEff's <code>GRCh38.99</code> database, but you are looking at an <code>hg38</code> genome browser (both reference are human, version 38, but different transcript versions).</p>"},{"location":"snpeff/faq/#genome-reference-data-sources","title":"Genome reference data sources","text":"<p>SnpEff genome databases are built from genomic data sources, such as Ensembl, RefSeq, NCBI, UCSC, etc.</p> <p>To find which data source was used, sometimes the information is provided in the <code>snpEff.config</code> file, under the <code>genome_name.reference</code> entry.</p> <p>Example 1: GRCh37.75</p> <p>If you are looking for the <code>GRCh37.75</code> genome, you can search for the entry in <code>snpEff.conf</code> file:</p> <p><pre><code>$ grep -A 1 GRCh37.75 snpEff.config\nGRCh37.75.genome : Homo_sapiens\nGRCh37.75.reference : ftp://ftp.ensembl.org/pub/release-75/gtf/\n</code></pre>  As you can see, the genome data is from Ensembl, release 75 (as expected).</p> <p>Example 2: hg19</p> <p>If you are looking for the <code>hg19</code> genome, you can also search for the entry in <code>snpEff.conf</code> file:</p> <pre><code>$ grep -i hg19.genome snpEff.config\nhg19.genome : Homo_sapiens (USCS)\n...\n</code></pre> <p>In this case, there is no <code>hg19.reference</code> entry, but the genome name clearly states that the database was retrieved from UCSC (having RefSeq). Which exact sub-version is this hg19? Well, unfortunately, UCSC does not keep track of sub-versions. A rule of the thumb is that the database is retrieved before it is built, so you can look at the date/time from the snpEff database:</p> <pre><code>$ ls -al data/hg19/snpEffectPredictor.bin\n-rw-r--r-- 1 pcingola pcingola 52630202 Mar 19 08:27 data/hg19/snpEffectPredictor.bin\n</code></pre> <p>So this<code>hg19</code> database was retrieved from UCSC around on March 19th.</p> <p>Example 3: Salmonella_enterica</p> <p>Sometimes the information is in the genome's <code>reference</code> entry is not enough to determine which exact version was used, but the <code>snpEff.config</code> file provides some additional information in the comments For example, let's say we'd like to find the data source for <code>Salmonella_enterica</code> genome</p> <p>If we edit the <code>snpEff.config</code> and find the entry for Salmonella_enterica, we see something like this: <pre><code>Salmonella_enterica.genome : Salmonella_enterica\nSalmonella_enterica.reference : ftp.ensemblgenomes.org\n</code></pre></p> <p>OK, it is from Ensembl, but which version? If you scroll up in the config file, you'll see a comment like this:</p> <pre><code>#---\n# ENSEMBL BFMPP release 32\n#---\n</code></pre> <p>Here <code>ENSEMBL BFMPP</code> stands for Endembl Bacteria, Fungi, Metazoa, Plants and Protists. So the comment is indicating that this is Ensembl's release 32.</p>"},{"location":"snpeff/faq/#number-of-variants-in-vcf-and-html-summary-do-not-match","title":"Number of variants in VCF and HTML summary do not match","text":"<p>First of all, SnpEff is probably giving you the right numbers, the mismatch might not be a bug, but a simple interpretation issue.</p>"},{"location":"snpeff/faq/#counting-variants-vs-lines-in-a-vcf-file","title":"Counting variants vs lines in a VCF file","text":"<p>It is important to remember that the VCF format specification allows having multiple variants in a single line. For example, here is a VCF line with multiple variants:</p> <pre><code>#CHROM  POS         ID  REF  ALT       QUAL  FILTER  INFO\nchr2    115032192   .   G    GT,GTT    30    PASS    ...\n</code></pre> <p>In this case, the <code>ALT</code> field has more than one value separated by comma. This means that the line contains two variants: </p> <ul> <li><code>G -&gt; GT</code> </li> <li><code>G -&gt; GTT</code></li> </ul> <p>So counting the number of non-comment lines in the VCF file will not give you the exact number of variants (it does give a lower bound on the number of variants).</p>"},{"location":"snpeff/faq/#counting-variants-vs-annotations","title":"Counting variants vs annotations","text":"<p>Also, a single variant can have more than one annotation, due to:</p> <ul> <li>Multiple transcripts (isoforms) of a gene (e.g. the human genome has on average 8.8 transcrips per gene)</li> <li>Multiple (overlapping) genes in the genomic location of the variant.</li> <li>A variant spanning multiple genes (e.g. a translocation, large deletion, etc.)</li> </ul> <p>So counting the number of variants is not equivalent to counting the number of annotations. SnpEff does consider all these factors when counting the variants and annotations for the summary HTML.</p>"},{"location":"snpeff/faq/#iupac-expansion","title":"IUPAC expansion","text":"<p>Sometimes either the <code>REF</code> or <code>ALT</code> fields have IUPAC/IUB bases. A common example is when you see an <code>N</code> character, which means that the base could be any of <code>{A, C, G, T}</code>. There are several IUPAC characters, please see details in IUPAC degenarate base symbols table.</p> <p>In case of having IUPAC symbols in either the <code>REF</code> and/or <code>ALT</code> fields, SnpEff will expand them into different variants. This means that entries with ambiguous symbols will be tranformed into all possible combinations of variants using the IUPAC notation.</p> <p>Info</p> <p>You can disable the 'IUPAC/IUB expand' behaviour by using the <code>-noexpandiub</code> command line option.</p> <p>For example, consider the following VCF line:</p> <pre><code>#CHROM  POS         ID  REF  ALT  QUAL  FILTER  INFO\nchr1    102947631   .   T    N    30    PASS    ...\n</code></pre> <p>In this case the ambiguous variant <code>T -&gt; N</code> will be expanded into three variants: </p> <ul> <li><code>T -&gt; A</code></li> <li><code>T -&gt; C</code></li> <li><code>T -&gt; G</code></li> </ul> <p>Warning</p> <p>If the number of degenerate symbols increases, the number of variants expanded will increase exponentiallly. Currently SnpEff will not expand more than <code>MAX_IUB_BASES=10</code> bases</p>"},{"location":"snpeff/faq/#typical-counting-mistakes","title":"Typical counting mistakes","text":"<p>Many people who claim that there is a mismatch between the number of variants in the summary (HTML) file and the number of variants in the VCF file, are just making mistakes when counting the variants because they forget one or more of these previously discussed items.</p> <p>The most typical mistake is counting the number of non-comment Lines in a VCF file:</p> <pre><code># This does NOT give the exact number of variants (only a lower bound on the number of variants)\ngrep -v '^#' myfile.vcf | wc -l\n</code></pre> <p>Another typical scenario is, when people are \"counting missense variants\" using something like this:</p> <pre><code>grep missense file.vcf | wc -l\n</code></pre> <p>This is counting \"lines in a VCF file that have at least one missense variants\", as opposed to counting \"missense annotations\" and, as mentioned previously, the number of lines in a VCF file is not the same as the number of annotations or the number of variants.</p>"},{"location":"snpeff/faq/#snpeff-taking-too-long","title":"SnpEff taking too long","text":"<p>Usually SnpEff runs within minutes. Unless you are analyzing extremely large files with thousands (or hundreds of thousands) of samples. But even in those cases SnpEff is efficient and it doesn't take too long.</p> <p>There are several things you should do to optimize:</p> <ol> <li>Run with \"-v\" option to check progress</li> <li>Use enough memory in your Java process (see \"How much memory should I use\" FAQ)</li> <li>You can disable the HTML report (command line option <code>-noStats</code>). The report is usually quite time consuming, particularly if the number of samples in the VCF is large</li> </ol>"},{"location":"snpeff/faq/#how-much-memory-should-i-use","title":"How much memory should I use","text":"<p>How much memory to use is very specifcic to your project / application, but here are some guidelines: - Default 8 GB: Typically 8G of memory is enough for analyzing a human genome (i.e. `java -Xmx8G -jar snpEff.jar ... ~) - Medium 16 GB: It is rare that for single sample VCF file annotations more than 8G is required, but for some large genomes and/or VCF with too many samples, you might need more memory. - Very large 128GB: It is extremely uncommon for SnpEff to require over 128GB of RAM for annotating with SnpEff, but it might happen on very large projects.</p>"},{"location":"snpeff/faq/#multiple-version-of-refseq-transcripts","title":"Multiple version of RefSeq transcripts","text":"<p>When using RefSeq transcripts, for instance in the human genome versions <code>hg38</code> or <code>hg19</code>, can lead to some confusion due to multiply mapped transcripts.</p> <p>Example: <code>NM_001135865.1</code> from hg38</p> <p>From the original RefSeq data, you can see that there are actually four mappings of NM_001135865.1: <pre><code># Note: Output edited for readbility\n$ zgrep NM_001135865.1 ~/snpEff/data/hg38/genes.refseq.gz\n\n751 NM_001135865.1  chr16   -   21834582    21857657    21834717    21857378    11  ...\n756 NM_001135865.1  chr16   +   22513522    22536520    22513801    22536385    7   ...\n597 NM_001135865.1  chr16_KV880768v1_fix    +   1679394 1702742 1679673 1702607 11  ...\n589 NM_001135865.1  chr16_KV880768v1_fix    -   568516  591514  568651  591235  7   ...\n</code></pre></p> <p>Warning</p> <p>To make matters even worse, not only <code>NM_001135865.1</code> maps twice to regions in <code>chr16</code>, but also one is mapped in the forward strand and the other on the reverse strand (notice the <code>+</code> and <code>-</code> signs)</p> <p>How do you know which of the four <code>NM_001135865.1</code> version is SnpEff refering to? When there are multiple mappings for a transcipt SnpEff will make sure each mapping is uniquely identified by appending a number to the original transcript ID.</p> <p>So the transcript IDs are named (notice that the first one is not changed):</p> <ul> <li><code>NM_001135865.1</code></li> <li><code>NM_001135865.1.2</code></li> <li><code>NM_001135865.1.3</code></li> <li><code>NM_001135865.1.4</code></li> </ul> <p>Even though they are mapped to different chromosomes and strands in <code>chr16</code>, the protein sequence will be very similar (that's why RefSeq has multiple mappings of the same transcript).</p> <p>Info</p> <p>You can get details of each transcript using the SnpEff <code>show</code> command (e.g. <code>java -jar snpEff.jar show ...</code>)</p> <p>We can analyse the difference, for instance <code>NM_001135865.1</code> and <code>NM_001135865.1.4</code> are mapped to <code>chr16</code>. If you look at the protein sequences you'll notice that there is one small difference in amino acid 138 ('G' vs 'V'):</p> <pre><code>$ java -jar snpEff.jar show NM_001135865.1 NM_001135865.1.4 | tee show.txt\n# Note: Output edited for readability\n#\n# Scroll right to see the difference ------&gt;&gt;&gt;                                                                                                           | AA 138\n#                                                                                                                                                        |\n/Users/kqrw311/snpEff/issue_284$                                                                                                                         |\nShowing genes and transcripts using zero-based coordinates                                                                                               |\nTranscript (codon table: Standard ) :   16:22513522-22536519, strand: +, id:NM_001135865.1, Protein, DNA check                                           |\n    ...                                                                                                                                                  |\n    Protein :   MVKLSIVLTPQFLSHDQGQLTKELQQHVKSVTCPCEYLRKVINTLADHHHRGTDFGGSPWLHVIIAFPTSYKVVITLWIVYLWVSLLKTIFWSRNGHDGSTDVQQRAWRSNRRRQEGLRSICMHTKKRVSSFRGNKIGLKDVITLRRHVETKVRAKIRKRKVTTKINHHDKINGKRKTARKQKMFQRAQELRRRAEDYHKCKIPPSARKALCNWVRMA...\n    ...                                                                                                                                                  | NM_001135865.1 has a 'G'\n                                                                                                                                                         |\nTranscript (codon table: Standard ) :   16:21834582-21857656, strand: -, id:NM_001135865.1.4, Protein                                                    |\n    ...                                                                                                                                                  |\n    Protein :   MVKLSIVLTPQFLSHDQGQLTKELQQHVKSVTCPCEYLRKVINTLADHHHRGTDFGGSPWLHVIIAFPTSYKVVITLWIVYLWVSLLKTIFWSRNGHDGSTDVQQRAWRSNRRRQEGLRSICMHTKKRVSSFRGNKIVLKDVITLRRHVETKVRAKIRKRKVTTKINHHDKINGKRKTARKQKMFQRAQELRRRAEDYHKCKIPPSARKALCNWVRMA...\n    ...                                                                                                                                                  | NM_001135865.1.4 has a 'V'\n</code></pre>"},{"location":"snpeff/faq/#cannot-build-database-error-database-check-failed","title":"Cannot build database: <code>ERROR: Database check failed.</code>","text":"<p>When building databases, SnpEff will attempt to check the database against a CDS FASTA file and a Protein FASTA file. Please see details in 'Building databases', section 'Step 3: Checking the database'</p> <p>If neither a CDS FASTA file nor a Protein FASTA file is provided, this check will fail and SnpEff will refuse to save the database, by showing error message like this one:</p> <pre><code>ERROR: CDS check file './data/MY_GENOME/cds.fa' not found.\nERROR: Protein check file './data/MY_GENOME/protein.fa' not found.\nERROR: Database check failed.\n</code></pre> <p>To disable these checks, you need to specify BOTH commmand line options <code>-noCheckCds -noCheckProtein</code>.</p>"},{"location":"snpeff/human_genomes/","title":"Human Genomes","text":"<p>There are several version of the human genome supported by SnpEff</p> <p>Here we explain the subtle differences between each version:</p>"},{"location":"snpeff/human_genomes/#who-is-who","title":"Who is who","text":"<p>Here is a brief explanation of who are the key releases of the Human Genome (all quotes are from their respective web sites, at the time I created this page):</p> <p>Ensembl:: - \u201cEnsembl creates, integrates and distributes reference datasets and analysis tools that enable genomics. We are based at\u00a0EMBL-EBI (European Molecular Biology Laboratory, European Bioinformatics Institute)\u201d - \u201cEnsembl transcripts displayed on our website are products of the Ensembl automatic gene annotation system (a collection of gene annotation pipelines), termed the Ensembl annotation process. All Ensembl transcripts are based on experimental evidence and thus the automated pipeline relies on the mRNAs and protein sequences deposited into public databases from the scientific community. Manually-curated transcripts are produced by the HAVANA group.\u201d</p> <p>RefSeq: - Provided by NCBI (National Center for Biotechnology Information) - \u201cThe Reference Sequence (RefSeq) collection provides a comprehensive, integrated, non-redundant, well-annotated set of sequences, including genomic DNA, transcripts, and proteins\u201d</p> <p>Gencode: - \u201cThe goal of the GENCODE project is to identify and classify all gene features in the human and mouse genomes with high accuracy based on biological evidence, and to release these annotations for the benefit of biomedical research and genome interpretation.\u201d - \u201cThe GENCODE annotation is made by merging the manual gene annotation produced by the Ensembl-Havana team and the Ensembl-genebuild automated gene annotation. \u2026 The GENCODE releases coincide with the Ensembl releases\u2026. In practical terms, the GENCODE annotation is essentially identical to the Ensembl annotation.\u201d</p> <p>GRCh: Genome Reference Consortium (human)</p>"},{"location":"snpeff/human_genomes/#human-genome-versions","title":"Human Genome versions","text":"<p>Which Human genome version correspond to which genome names:</p> <ul> <li> <p>GRCh38.mane.0.93.ensembl: Human genome GRCh38, using MANE transcripts v0.93, Ensembl IDs. See MANE below for details.</p> </li> <li> <p>GRCh38.mane.0.93.refseq: Human genome GRCh38, using MANE transcripts v0.93, RefSeq IDs. See MANE below for details.</p> </li> <li> <p>GRCh38.NN (e.g. GRCh38.104): These are genome annotations from ENSEMBL, created from GRCh38/hg38 reference genome sequence.</p> </li> <li> <p>GRCh37.NN (e.g. GRCh37.75): These are the genome annotations from ENSEMBL, created from GRCh37/hg19 reference genome sequence. WARNING: Ensembl stopped releasing genomes based on GRCh37/hg19 on February 2014.</p> </li> <li> <p>GRCh38.pNN (e.g. GRCh38.p13): These are RefSeq transcripts from NCBI mapped to GRCh38/hg38 reference genome sequence</p> </li> <li> <p>GRCh37.pNN (e.g. GRCh37.p13): These are RefSeq transcripts from NCBI mapped to GRCh38/hg19 reference genome sequence</p> </li> <li> <p>hg38: UCSC genome with RefSeq transcripts mapped to GRCh38/hg38 reference genome sequence</p> </li> <li> <p>hg19: UCSC genome with RefSeq transcripts mapped to GRCh37/hg19 reference genome sequence</p> </li> <li> <p>hg38kg: UCSC genome with KnownGenes transcripts mapped to GRCh38/hg38 reference genome sequence</p> </li> <li> <p>hg19kg: UCSC genome with KnownGenes transcripts mapped to GRCh37/hg19 reference genome sequence</p> </li> </ul>"},{"location":"snpeff/human_genomes/#important-considerations","title":"Important considerations","text":"<p>There are some things you need to consider when looking at genomic variants results.</p> <ul> <li> <p>Do not mix genome versions. It is important not to confuse different genome versions when comparing results. For example, if you use SnpEff to annotate variants using GRCh38.103 (from ENSEMBL) and then look at the variant using UCSC's genome browser (which uses RefSeq transcripts) there might be differences because your are using different transcripts set, thus the variant annotations may not match.</p> </li> <li> <p>Canonical is ill-defined: Everybody has a different definition of what a canonical transcript is (see details in the next section).</p> </li> <li> <p>HGSV requires realignment: HGVS \"sometimes\" recommends to shift the variants \"right\" respect to the transcript, whereas VCF specification requires to always shift left respect to he genome. This can catch off guard many scientist who are unaware of this side effect of using HGVS notation and wonder why the variant annotation software is reporting some variants as if they were aligned to \"another location\". In order to warn the users that such realignment occurred, an <code>INFO_REALIGN_3_PRIME</code> message is added to annotation in the VCF entry.</p> </li> </ul>"},{"location":"snpeff/human_genomes/#important-considerations-refseq","title":"Important considerations: RefSeq","text":"<p>These are some considerations to keep in mind while working with RefSeq transcripts, this includes SnpEff genomes hg19, hg38, GRCh38.p13, GRCh37.p13, etc.</p> <ul> <li> <p>RefSeq transcripts may NOT match the reference genome. This is a surprise for a lot of people, but RefSeq was designed as a consensus of transcript sequences as opposed as predicted from the reference genome. As a result a RefSeq transcript may not match the reference genome.</p> </li> <li> <p>RefSeq transcripts differ ~5% respect to the reference genome. This is a consequence of the previous item. Between 3% to 7% of the transcripts in RefSeq do not exactly match the reference genome, thus the proteins inferred from the genomic CDSs sequences are different than the \"real\" RefSeq CDS sequences. Most of the time, the difference (if any) is only one amino acid in the whole protein, but sometimes the difference is much larger.</p> </li> <li> <p>Variant annotations using RefSeq may not be precise at the exact loci where the RefSeq transcript doesn't match the genome reference. This is yet another consequence of the previous items, but since the transcript do not match the reference genome, and variant annotations are based on the reference genome, the variant annotaion predictions might be off at those genomic loci.</p> </li> <li> <p>NCBI's gene IDs are just gene names, simetime with '_1', '_2', ..., etc. Gene IDs from NCBI genomes (e.g. GRCh38.p13) are just gene names. If a gene is mapped to multiple genomic loci, then the same gene name is used and string is added to make it unique ('_1', for the first duplicate, '_2' for the second and so on). For example, here are the gene IDs for gene 'KIR3DL3' (note the last line is 'KIR3DL3_46', so there are 47 loci for this gene):</p> </li> </ul> <pre><code># Note: Results edited for readability\n$ grep \"gene\\t\" GCF_000001405.39_GRCh38.p13_genomic.gtf | grep KIR3DL3\nNC_000019.10    BestRefSeq  gene    54724442    54736632    .   +   .   gene_id \"KIR3DL3\"; ...\nNW_016107300.1  BestRefSeq  gene    26066   38262   .   +   .   gene_id \"KIR3DL3_1\"; ...\nNW_016107301.1  BestRefSeq  gene    26066   38253   .   +   .   gene_id \"KIR3DL3_2\"; ...\nNW_016107302.1  BestRefSeq  gene    26075   38226   .   +   .   gene_id \"KIR3DL3_3\"; ...\nNW_016107303.1  BestRefSeq  gene    26066   38222   .   +   .   gene_id \"KIR3DL3_4\"; ...\nNW_016107304.1  BestRefSeq  gene    26066   38255   .   +   .   gene_id \"KIR3DL3_5\"; ...\nNW_016107305.1  BestRefSeq  gene    26072   38219   .   +   .   gene_id \"KIR3DL3_6\"; ...\n...\nNT_187686.1 BestRefSeq  gene    177446  189666  .   -   .   gene_id \"KIR3DL3_44\"; ...\nNT_187687.1 BestRefSeq  gene    132277  144472  .   -   .   gene_id \"KIR3DL3_45\"; ...\nNT_113949.2 BestRefSeq  gene    139138  151310  .   -   .   gene_id \"KIR3DL3_46\"; ...\n</code></pre> <ul> <li> <p>UCSC transcripts (hg19/hg38) are not unique. Transcript IDs might not be unique. Many assume that IDs are unique, but this is not always true to UCSC's genomic files.</p> </li> <li> <p>A UCSC transcripts (hg19/hg38) can map to multiple loci. A transcript from hg19/hg39 can map to multiple genomic loci, this is a consequence of transcripts IDs not being unique. For example, transcript NR_110738.1 is mapped to 123 loci:</p> </li> </ul> <p><code>$ cat hg38.refseq | cut -f 2 | sort | uniq -c | sort -rn | head  123 NR_110738.1   92 NR_110737.1   92 NM_014218.3   91 NM_001368251.1   71 NM_001281972.2   54 NM_001291696.1   54 NM_001281971.2   53 NM_014513.2   53 NM_001360171.1   52 NM_014512.1</code></p>"},{"location":"snpeff/human_genomes/#canonical-transcripts","title":"Canonical transcripts","text":"<p>You need to be careful because the definition of \"Canonical trnascript\" changes for each data source and sometimes for each genome version.</p> <p>The definition used by SnpEff is: \u201cThe canonical transcript is defined as either the longest CDS, if the gene has translated transcripts, or the longest cDNA.\u201d (Ref: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2686571)</p> <p>Just to show that there are subtle differences, here some of the definitions Canonical from some prominent genomic sources:</p> <p>Ensembl (Ref: http://useast.ensembl.org/Help/Glossary)</p> <ol> <li>Longest CCDS translation with no stop codons</li> <li>longest Ensembl/Havana merged translation with no stop codons</li> <li>longest translation with no stop codons.</li> <li>If no translation, choose the longest non-protein-coding transcript.</li> <li>Note: \u201c\u2026does not necessarily reflect the most biologically relevant transcript of a gene\u201d</li> </ol> <p>UCSC (Ref: https://genome.ucsc.edu/FAQ/FAQgenes.html)</p> <ol> <li>hg19: \u201cGenerally, this is the longest isoform.\u201d</li> <li>hg38: \u201cThe canonical transcript is chosen using the APPRIS principal transcript when available. If no APPRIS tag exists for any transcript associated with the cluster, then a transcript in the BASIC set is chosen. If no BASIC transcript exists, then the longest isoform is used\u201d.</li> </ol> <p>UniProt (Ref: https://www.uniprot.org/help/canonical_and_isoforms)</p> <ol> <li>It is the most prevalent.</li> <li>It is the most similar to orthologous sequences found in other species.</li> <li>By virtue of its length or amino acid composition, it allows the clearest description of domains, isoforms, genetic variation, post-translational modifications, etc.</li> <li>In the absence of any information, we choose the longest sequence.</li> </ol> <p>As you can see these definitions do not match and obviously these differences could affect your analysis.</p>"},{"location":"snpeff/human_genomes/#mane","title":"MANE","text":"<p>MANE stands for \"Matched Annotation from NCBI and EMBL-EBI\". Both NCBI and ENSEMBL have been joining efforts in this new initiative to provide a joint transcript set compatible with both.</p> <p>MANE started in 2018, to converge into a common set of transcripts that has desirable characteristics:</p> <ul> <li>contains one well-supported transcript per protein-coding locus,</li> <li>perfectly align to the reference genome,</li> <li>has 100\\% match between RefSeq and ENSEMBL (including coding sequence and UTRs),</li> <li>has been manually curated by both groups,</li> <li>is versioned and largely stable.</li> <li>includes additional transcripts (i.e. more than one per gene) required to report variants of clinical interest, and</li> <li>will become the default transcripts shown in Genome Browsers.</li> </ul> <p>As of this writing, version 0.93 was released in January 2021. Furthermore, the upcoming ENSEMBL release 104 is expected to switch the definition of \"Canonical Transcript\" to favor MANE transcripts.</p> <p>References:</p> <ul> <li>https://www.ncbi.nlm.nih.gov/refseq/MANE/</li> <li>https://www.ensembl.info/tag/mane/</li> <li>https://useast.ensembl.org/info/genome/genebuild/mane.html</li> </ul>"},{"location":"snpeff/inputoutput/","title":"Input &amp; output files","text":"<p>Files used as input to SnpEff must comply with standard formats. Here we describe supported input data formats.</p>"},{"location":"snpeff/inputoutput/#vcf-files","title":"VCF files","text":"<p>As we mentioned before, Variant Call Format (VCF) is the recommended format for input files. This is the format used by the \"1000 Genomes Project\", and is currently considered the de facto standard for genomic variants. It is also the default format used in SnpEff.</p> <p>In a nutshell, VCF format is tab-separated text file having the following columns:</p> <ol> <li>Chromosome name</li> <li>Position</li> <li>Variant's ID</li> <li>Reference genome</li> <li>Alternative (i.e. variant)</li> <li>Quality score</li> <li>Filter (whether or not the variant passed quality filters)</li> <li>INFO : Generic information about this variant. SnpEff adds annotation information in this column.</li> </ol> <p>Here is an example of a few lines in a VCF file: <pre><code>#CHROM POS     ID        REF    ALT     QUAL FILTER INFO                    \n20     14370   rs6054257 G      A       29   PASS   NS=3;DP=14;AF=0.5;DB;H2\n20     17330   .         T      A       3    q10    NS=3;DP=11;AF=0.017   \n</code></pre> Note that the first line is header information. Header lines start with '#'</p>"},{"location":"snpeff/inputoutput/#vcf-output","title":"VCF output","text":"<p>As we mentioned in the previous chapter, VCF is SnpEff's default input and output format. It is highly recommended to use VCF as input and output format, since it is a standard format that can be also used by other tools and software packages. Thus VCF makes it much easier to integrate genomic data processing pipelines.</p> <p>SnpEff adds annotation information to the INFO field of a VCF file. The INFO field is the eight column of a VCF file, see previous section for a quick example or take a look at the VCF specification for details.</p> <p>Here is an example of a file before and after being annotated using SnpEff: VCF file before annotations <pre><code>#CHROM POS     ID        REF    ALT     QUAL FILTER INFO                    \n1   889455  .   G   A   100.0   PASS    AF=0.0005\n1   897062  .   C   T   100.0   PASS    AF=0.0005\n</code></pre></p> <p>VCF file after being annotated using SnpEff <pre><code>#CHROM POS     ID        REF    ALT     QUAL FILTER INFO                    \n1   889455  .   G   A   100.0   PASS    AF=0.0005;EFF=STOP_GAINED(HIGH|NONSENSE|Cag/Tag|Q236*|749|NOC2L||CODING|NM_015658|)\n1   897062  .   C   T   100.0   PASS    AF=0.0005;EFF=STOP_GAINED(HIGH|NONSENSE|Cag/Tag|Q141*|642|KLHL17||CODING|NM_198317|)\n</code></pre> A you can see, SnpEff added an 'EFF' tag to the INFO field (eight column).</p>"},{"location":"snpeff/inputoutput/#vcf-header-lines","title":"VCF Header lines","text":"<p>SnpEff updates the header of the VCF file to reflect additional fields. This is required by the VCF specification. SnpEff also adds the command line options used to annotate the file as well as SnpEff's version, so you can keep track of what exactly was done.</p> <p>Here is an example of some header lines added to an annotated file: <pre><code>##SnpEffVersion=\"SnpEff 3.1m (build 2013-02-08)\"\n##SnpEffCmd=\"SnpEff  hg19 demo.1kg.vcf \"\n##INFO=&lt;ID=EFF,Number=.,Type=String,Description=\"Predicted effects for this variant.Format: 'Effect ( Effect_Impact | Functional_Class | Codon_Change | Amino_Acid_change| Amino_Acid_length | Gene_Name | Gene_BioType | Coding | Transcript | Exon [ | ERRORS | WARNINGS ] )' \\\"&gt;\n</code></pre></p>"},{"location":"snpeff/inputoutput/#ann-field-vcf-output-files","title":"ANN field (VCF output files)","text":"<p>Functional annotations information is added to the INFO field using an <code>ANN</code> tag.</p> <p>NOTE: field. SnpEff implements the VCF annotation standard 'ANN' field.</p> <p>This format specification has been created by the developers of the most widely used variant annotation programs (SnpEff, ANNOVAR and ENSEMBL's VEP) and attempts to:</p> <ul> <li>provide a common framework for variant annotation,</li> <li>make pipeline development easier,</li> <li>facilitate benchmarking, and</li> <li>improve some known problems in variant annotations.</li> </ul> <p>Obviously this 'ANN' field broke compatibility with the old 'EFF' field from old SnpEff versions. In order to use the old 'EFF' field, you can use the <code>-formatEff</code> command line option.</p> <p>The annotation 'ANN' field looks like this (the full annotation standard specification can be found here).</p> <pre><code>ANN=T|missense_variant|MODERATE|CCT8L2|ENSG00000198445|transcript|ENST00000359963|protein_coding|1/1|c.1406G&gt;A|p.Gly469Glu|1666/2034|1406/1674|469/557||,T|downstream_gene_variant|MODIFIER|FABP5P11|ENSG00000240122|transcript|ENST00000430910|processed_pseudogene||n.*397G&gt;A|||||3944|\n</code></pre> <p>A variant can have (and usually has) more than one annotation. Multiple annotations are separated by commas. In the previous example there were two annotations corresponding to different genes (CCT8L2 and FABP5P11).</p> <p>Each annotation consists of multiple sub-fields separated by the pipe character \"|\" (fields 15 and 16 are empty in this example): <pre><code>Annotation      : T|missense_variant|MODERATE|CCT8L2|ENSG00000198445|transcript|ENST00000359963|protein_coding|1/1|c.1406G&gt;A|p.Gly469Glu|1666/2034|1406/1674|469/557|  |\nSubField number : 1|       2        |    3   |  4   |       5       |    6     |      7        |      8       | 9 |    10   |    11     |   12    |   13    |   14  |15| 16\n</code></pre></p> <p>Here is a description of the meaning of each sub-field:</p> <ol> <li> <p>Allele (or ALT): In case of multiple ALT fields, this helps to identify which ALT we are referring to.     E.g.:</p> <pre><code># CHROM  POS     ID  REF  ALT    QUAL  FILTER  INFO\nchr1    123456  .   C    A      .     .       ANN=A|...\nchr1    234567  .   A    G,T    .     .       ANN=G|... , T|...\n</code></pre> <p>In case of cancer sample, when comparing somatic versus germline using a non-standard reference (e.g. one of the ALTs is the reference) the format should be ALT-REFERENCE. E.g.:</p> <pre><code>#CHROM  POS     ID  REF  ALT  QUAL  FILTER  INFO\nchr1    123456  .   A    C,G  .     .       ANN=G-C|...\n</code></pre> <p>Compound variants: two or more variants affecting the annotations (e.g. two consecutive SNPs conforming a MNP, two consecutive frame_shift variants that \"recover\" the frame). In this case, the Allele field should include a reference to the other variant/s included in the annotation:</p> <pre><code>#CHROM  POS     ID  REF  ALT  QUAL  FILTER  INFO\nchr1    123456  .   A    T    .     .       ANN=T|...\nchr1    123457  .   C    G    .     .       ANN=C-chr1:123456_A&gt;T|...\n</code></pre> </li> <li> <p>Annotation (a.k.a. effect): Annotated using Sequence Ontology terms. Multiple effects can be concatenated using '&amp;'.</p> <pre><code>#CHROM  POS     ID  REF  ALT  QUAL  FILTER  INFO\nchr1    123456  .   C    A    .     .      ANN=A|intron_variant&amp;nc_transcript_variant|...\n</code></pre> </li> <li> <p>Putative_impact: A simple estimation of putative impact / deleteriousness : <code>{HIGH, MODERATE, LOW, MODIFIER}</code></p> </li> <li>Gene Name: Common gene name (HGNC). Optional: use closest gene when the variant is \"intergenic\".</li> <li>Gene ID: Gene ID</li> <li> <p>Feature type: Which type of feature is in the next field (e.g. transcript, motif, miRNA, etc.). It is preferred to use Sequence Ontology (SO) terms, but 'custom' (user defined) are allowed.</p> <pre><code>ANN=A|stop_gained|HIGH|||transcript|...\n</code></pre> <p>Tissue specific features may include cell type / tissue information separated by semicolon e.g.:</p> <pre><code>ANN=A|histone_binding_site|LOW|||H3K4me3:HeLa-S3|\n</code></pre> </li> <li> <p>Feature ID: Depending on the annotation, this may be: Transcript ID (preferably using version number), Motif ID, miRNA, ChipSeq peak, Histone mark, etc. Note: Some features may not have ID (e.g. histone marks from custom Chip-Seq experiments may not have a unique ID).</p> </li> <li>Transcript biotype: The bare minimum is at least a description on whether the transcript is {\"Coding\", \"Noncoding\"}. Whenever possible, use ENSEMBL biotypes.</li> <li>Rank / total: Exon or Intron rank / total number of exons or introns.</li> <li>HGVS.c: Variant using HGVS notation (DNA level)</li> <li>HGVS.p: If variant is coding, this field describes the variant using HGVS notation (Protein level). Since transcript ID is already mentioned in 'feature ID', it may be omitted here.</li> <li>cDNA_position / cDNA_len: Position in cDNA and trancript's cDNA length (one based).</li> <li>CDS_position / CDS_len: Position and number of coding bases (one based includes START and STOP codons).</li> <li>Protein_position / Protein_len: Position and number of AA (one based, including START, but not STOP).</li> <li>Distance to feature: All items in this field are options, so the field could be empty.<ul> <li>Up/Downstream: Distance to first / last codon</li> <li>Intergenic: Distance to closest gene</li> <li>Distance to closest Intron boundary in exon (+/- up/downstream). If same, use positive number.</li> <li>Distance to closest exon boundary in Intron (+/- up/downstream)</li> <li>Distance to first base in MOTIF</li> <li>Distance to first base in miRNA</li> <li>Distance to exon-intron boundary in splice_site or splice _region</li> <li>ChipSeq peak: Distance to summit (or peak center)</li> <li>Histone mark / Histone state: Distance to summit (or peak center)</li> </ul> </li> <li>Errors, Warnings or Information messages: Add errors, warnings or informative message that can affect annotation accuracy. See details here</li> </ol> <p>Consistency between HGVS and functional annotations:</p> <p>In some cases there might be inconsistent reporting between 'annotation' and HGVS. This is due to the fact that VCF recommends aligning to the leftmost coordinate, whereas HGSV recommends aligning to the \"most 3-prime coordinate\". For instance, an InDel on the edge of an exon, which has an 'intronic' annotation according to VCF alignment recommendation, can lead to a 'stop_gained' when aligned using HGVS's recommendation (using the most 3-prime possible alignment). So the 'annotation' sub-field will report 'intron' whereas HGVS sub-field will report a 'stop_gained'. This is obviously inconsistent and must be avoided. In order to report annotations that are consistent with HGVS notation, variants must be re-aligned according to each transcript's strand (i.e. align the variant according to the transcript's most 3-prime coordinate). Then annotations are calculated, thus the reported annotations will be consistent with HGVS notation. Annotation software should have a command line option to override this behaviour (e.g. <code>-no_shift_hgvs</code>)</p>"},{"location":"snpeff/inputoutput/#eff-field-vcf-output-files","title":"EFF field (VCF output files)","text":"<p>Effects information is added to the INFO field using an 'EFF' tag.</p> <p>Warning</p> <p>This section refers the obsolete annotation format using the 'EFF' tag which can be activated using the <code>-formatEff</code> command line option. As of version 4.1 SnpEff uses the 'ANN' field by default.</p> <p>Notes:</p> <ul> <li>As of version 4.0, the default output uses Sequence Ontology for 'Effect' names. You can output \"old\" style effect names by using the <code>-classic</code> command line option.</li> <li>When multiple effects are available, they are sorted first by \"Effect_Impact\", then by \"Effect\" and finally by \"marker's genomic coordinates\" (e.g. affected transcript's genomic coordinates).</li> <li>Staring from version 4.0, SnpEff outputs HGVS notation in the 'AA' sub-field by default.</li> </ul> <p>There can be multiple effects separated by comma. The format for each effect is: <pre><code>EFF= Effect ( Effect_Impact | Functional_Class | Codon_Change | Amino_Acid_Change| Amino_Acid_Length | Gene_Name | Transcript_BioType | Gene_Coding | Transcript_ID | Exon_Rank  | Genotype_Number [ | ERRORS | WARNINGS ] )\n</code></pre></p> EFF Sub-field Meaning Effect Effect of this variant. See details here. Effect impact Effect impact {High, Moderate, Low, Modifier}. See details here. Functional Class Functional class {NONE, SILENT, MISSENSE, NONSENSE}. Codon_Change / Distance Codon change: old_codon/new_codon OR distance to transcript (in case of upstream / downstream) Amino_Acid_Change Amino acid change: old_AA AA_position/new_AA (e.g. 'E30K') Amino_Acid_Length Length of protein in amino acids (actually, transcription length divided by 3). Gene_Name Gene name Transcript_BioType Transcript bioType, if available. Gene_Coding <code>[CODING                                                                                            | NON_CODING]</code>. This field is 'CODING' if any transcript of the gene is marked as protein coding. Transcript_ID Transcript ID (usually ENSEMBL IDs) Exon/Intron Rank Exon rank or Intron rank (e.g. '1' for the first exon, '2' for the second exon, etc.) Genotype_Number Genotype number corresponding to this effect (e.g. '2' if the effect corresponds to the second ALT) Warnings / Errors Any warnings or errors (not shown if empty)."},{"location":"snpeff/inputoutput/#multiple-annotations-per-vcf-line","title":"Multiple annotations per VCF line","text":"<p>Usually there is more than one annotation reported in each <code>ANN</code> (or <code>EFF</code>) field.</p> <p>There are several reasons for this:</p> <ul> <li>A variant can affect multiple genes. E.g a variant can be DOWNSTREAM from one gene and UPSTREAM from another gene. E.g.:</li> <li> <p>In complex organisms, genes usually have multiple transcripts. So SnpEff reports the effect of a variant on each transcript.     E.g.:</p> <pre><code>#CHROM  POS       ID   REF  ALT    QUAL  FILTER  INFO\n1       889455    .    G    A      .     .       .\n</code></pre> <p>In this case SnpEff will report the effect of each variant on each gene and each transcript (output edited for readability):</p> <pre><code>#CHROM  POS     ID   REF  ALT  QUAL FILTER   INFO\n1       889455  .    G    A    .    .        ANN=A|stop_gained|HIGH|NOC2L|ENSG00000188976|transcript|ENST00000327044|protein_coding|7/19|c.706C&gt;T|p.Gln236*|756/2790|706/2250|236/749||\n,A|downstream_gene_variant|MODIFIER|NOC2L|ENSG00000188976|transcript|ENST00000487214|processed_transcript||n.*865C&gt;T|||||351|\n,A|downstream_gene_variant|MODIFIER|NOC2L|ENSG00000188976|transcript|ENST00000469563|retained_intron||n.*878C&gt;T|||||4171|\n,A|non_coding_exon_variant|MODIFIER|NOC2L|ENSG00000188976|transcript|ENST00000477976|retained_intron|5/17|n.2153C&gt;T||||||;LOF=(NOC2L|ENSG00000188976|6|0.17);NMD=(NOC2L|ENSG00000188976|6|0.17)\n</code></pre> </li> <li> <p>A VCF line can have more then one variant.       E.g. If reference genome is 'G', but the sample has either 'A' or 'T' (non-biallelic variant), then this will be reported as one VCF line, having multiple alternative variants (notice that there are two ALTs):</p> <pre><code>  #CHROM  POS       ID   REF  ALT      QUAL  FILTER  INFO\n  1       889455    .    G    A,T      .     .       .\n</code></pre> <p>In this case SnpEff will report the effect of each ALT on each gene and each transcript.   Notice that ENST00000327044 has a <code>stop_gained</code> variant (ALT = 'A') and a <code>missense_variant</code> (ALT = 'T')</p> <pre><code>  #CHROM  POS      ID    REF  ALT    QUAL FILTER    INFO\n1       889455   .     G    A,T    .    .         ANN=A|stop_gained|HIGH|NOC2L|ENSG00000188976|transcript|ENST00000327044|protein_coding|7/19|c.706C&gt;T|p.Gln236*|756/2790|706/2250|236/749||\n,T|missense_variant|MODERATE|NOC2L|ENSG00000188976|transcript|ENST00000327044|protein_coding|7/19|c.706C&gt;A|p.Gln236Lys|756/2790|706/2250|236/749||\n,A|downstream_gene_variant|MODIFIER|NOC2L|ENSG00000188976|transcript|ENST00000487214|processed_transcript||n.*865C&gt;T|||||351|\n,T|downstream_gene_variant|MODIFIER|NOC2L|ENSG00000188976|transcript|ENST00000487214|processed_transcript||n.*865C&gt;A|||||351|\n,A|downstream_gene_variant|MODIFIER|NOC2L|ENSG00000188976|transcript|ENST00000469563|retained_intron||n.*878C&gt;T|||||4171|\n,T|downstream_gene_variant|MODIFIER|NOC2L|ENSG00000188976|transcript|ENST00000469563|retained_intron||n.*878C&gt;A|||||4171|\n,A|non_coding_exon_variant|MODIFIER|NOC2L|ENSG00000188976|transcript|ENST00000477976|retained_intron|5/17|n.2153C&gt;T||||||\n,T|non_coding_exon_variant|MODIFIER|NOC2L|ENSG00000188976|transcript|ENST00000477976|retained_intron|5/17|n.2153C&gt;A||||||;LOF=(NOC2L|ENSG00000188976|6|0.17);NMD=(NOC2L|ENSG00000188976|6|0.\n</code></pre> </li> </ul> <p>Effect sort order. When multiple effects are reported, SnpEff sorts the effects the following way:</p> <ul> <li>Putative impact: Effects having higher putative impact are first.</li> <li>Effect type: Effects assumed to be more deleterious effects first.</li> <li>Canonical transcript before non-canonical.</li> <li>Marker genomic coordinates (e.g. genes starting before first).</li> </ul>"},{"location":"snpeff/inputoutput/#variant-annotaiton-details","title":"Variant annotaiton details","text":"<p>Detailed description of the variant's functional annotation predicted by SnpEff in the <code>Effect</code> and <code>Effect_Impact</code> sub-fields.</p> <p>Notes:</p> <ul> <li>Effect (Sequence Ontology) Sequence ontology (SO) allows to standardize terminology used for assessing sequence changes and impact. This allows for a common language across all variant annotation programs and makes it easier to communicate using a uniform terminology. Starting from version 4.0 VCF output uses SO terms by default.</li> <li>Effect (Classic) This are the \"classic\" effect names usd by SnpEff, these can be accessed using the <code>-classic</code> command line option.</li> <li> <p>Effect impact Effects are categorized by 'impact': {High, Moderate, Low, Modifier}. This are pre-defined categories to help users find more significant variants.</p> <p>Warning</p> <p>Impact categories must be used with care, they were created only to help and simplify the filtering process. Obviously, there is no way to predict whether a \"high impact\" or a \"low impact\" variant is the one producing a phenotype of interest.</p> </li> </ul> <p>Here is a list of effects and some brief explanations:</p> EffectSeq. Ontology EffectClassic Note &amp; Example Impact coding_sequence_variant <code>CDS</code> The variant hits a CDS. <code>MODIFIER</code> chromosome <code>CHROMOSOME_LARGE_DELETION</code> A large parte (over 1%) of the chromosome was deleted. <code>HIGH</code> duplication <code>CHROMOSOME_LARGE_DUPLICATION</code> Duplication of a large chromosome segment (over 1% or 1,000,000 bases) <code>HIGH</code> inversion <code>CHROMOSOME_LARGE_INVERSION</code> Inversion of a large chromosome segment (over 1% or 1,000,000 bases). <code>HIGH</code> coding_sequence_variant <code>CODON_CHANGE</code> One or many codons are changed e.g.:  An MNP of size multiple of 3 <code>LOW</code> inframe_insertion <code>CODON_INSERTION</code> One or many codons are inserted e.g.:  An insert multiple of three in a codon boundary <code>MODERATE</code> disruptive_inframe_insertion <code>CODON_CHANGE_PLUS</code> <code>CODON_INSERTION</code> One codon is changed and one or many codons are inserted e.g.:  An insert of size multiple of three, not at codon boundary <code>MODERATE</code> inframe_deletion <code>CODON_DELETION</code> One or many codons are deleted e.g.:  A deletion multiple of three at codon boundary <code>MODERATE</code> disruptive_inframe_deletion <code>CODON_CHANGE_PLUS</code> <code>CODON_DELETION</code> One codon is changed and one or more codons are deleted e.g.:  A deletion of size multiple of three, not at codon boundary <code>MODERATE</code> downstream_gene_variant <code>DOWNSTREAM</code> Downstream of a gene (default length: 5K bases) <code>MODIFIER</code> exon_variant <code>EXON</code> The variant hits an exon (from a non-coding transcript) or a retained intron. <code>MODIFIER</code> exon_loss_variant <code>EXON_DELETED</code> A deletion removes the whole exon. <code>HIGH</code> exon_loss_variant <code>EXON_DELETED_PARTIAL</code> Deletion affecting part of an exon. <code>HIGH</code> duplication <code>EXON_DUPLICATION</code> Duplication of an exon. <code>HIGH</code> duplication <code>EXON_DUPLICATION_PARTIAL</code> Duplication affecting part of an exon. <code>HIGH</code> inversion <code>EXON_INVERSION</code> Inversion of an exon. <code>HIGH</code> inversion <code>EXON_INVERSION_PARTIAL</code> Inversion affecting part of an exon. <code>HIGH</code> frameshift_variant <code>FRAME_SHIFT</code> Insertion or deletion causes a frame shift e.g.:  An indel size is not multple of 3 <code>HIGH</code> gene_variant <code>GENE</code> The variant hits a gene. <code>MODIFIER</code> feature_ablation <code>GENE_DELETED</code> Deletion of a gene. <code>HIGH</code> duplication <code>GENE_DUPLICATION</code> Duplication of a gene. <code>MODIFIER</code> gene_fusion <code>GENE_FUSION</code> Fusion of two genes. <code>HIGH</code> gene_fusion <code>GENE_FUSION_HALF</code> Fusion of one gene and an intergenic region. <code>HIGH</code> bidirectional_gene_fusion <code>GENE_FUSION_REVERSE</code> Fusion of two genes in opposite directions. <code>HIGH</code> rearranged_at_DNA_level <code>GENE_REARRANGEMENT</code> Rearrangement affecting one or more genes. <code>HIGH</code> intergenic_region <code>INTERGENIC</code> The variant is in an intergenic region <code>MODIFIER</code> conserved_intergenic_variant <code>INTERGENIC_CONSERVED</code> The variant is in a highly conserved intergenic region <code>MODIFIER</code> intragenic_variant <code>INTRAGENIC</code> The variant hits a gene, but no transcripts within the gene <code>MODIFIER</code> intron_variant <code>INTRON</code> Variant hits and intron. Technically, hits no exon in the transcript. <code>MODIFIER</code> conserved_intron_variant <code>INTRON_CONSERVED</code> The variant is in a highly conserved intronic region <code>MODIFIER</code> miRNA <code>MICRO_RNA</code> Variant affects an miRNA <code>MODIFIER</code> missense_variant <code>NON_SYNONYMOUS_CODING</code> Variant causes a codon that produces a different amino acid e.g.:  Tgg/Cgg, W/R <code>MODERATE</code> initiator_codon_variant <code>NON_SYNONYMOUS_START</code> Variant causes start codon to be mutated into another start codon (the new codon produces a different AA). e.g.: Atg/Ctg, M/L (ATG and CTG can be START codons) <code>LOW</code> stop_retained_variant <code>NON_SYNONYMOUS_STOP</code> Variant causes stop codon to be mutated into another stop codon (the new codon produces a different AA). e.g.: Atg/Ctg, M/L (ATG and CTG can be START codons) <code>LOW</code> protein_protein_contact <code>PROTEIN_PROTEIN_INTERACTION_LOCUS</code> Protein-Protein interaction loci. <code>HIGH</code> structural_interaction_variant <code>PROTEIN_STRUCTURAL_INTERACTION_LOCUS</code> Within protein interacion loci (e.g. two AA that are in contact within the same protein, prossibly helping structural conformation). <code>HIGH</code> rare_amino_acid_variant <code>RARE_AMINO_ACID</code> The variant hits a rare amino acid thus is likely to produce protein loss of function <code>HIGH</code> splice_acceptor_variant <code>SPLICE_SITE_ACCEPTOR</code> The variant hits a splice acceptor site (defined as two bases before exon start, except for the first exon). <code>HIGH</code> splice_donor_variant <code>SPLICE_SITE_DONOR</code> The variant hits a Splice donor site (defined as two bases after coding exon end, except for the last exon). <code>HIGH</code> splice_region_variant <code>SPLICE_SITE_REGION</code> A sequence variant in which a change has occurred within the region of the splice site, either within 1-3 bases of the exon or 3-8 bases of the intron. <code>LOW</code> splice_region_variant <code>SPLICE_SITE_BRANCH</code> A varaint affective putative (Lariat) branch point, located in the intron. <code>LOW</code> splice_region_variant <code>SPLICE_SITE_BRANCH_U12</code> A varaint affective putative (Lariat) branch point from U12 splicing machinery, located in the intron. <code>MODERATE</code> stop_lost <code>STOP_LOST</code> Variant causes stop codon to be mutated into a non-stop codon e.g.: Tga/Cga, */R <code>HIGH</code> 5_prime_UTR_premature_start_codon_gain_variant <code>START_GAINED</code> A variant in 5'UTR region produces a three base sequence that can be a START codon. <code>LOW</code> start_lost <code>START_LOST</code> Variant causes start codon to be mutated into a non-start codon.  e.g.: aTg/aGg, M/R <code>HIGH</code> stop_gained <code>STOP_GAINED</code> Variant causes a STOP codon e.g.: Cag/Tag, Q/* <code>HIGH</code> synonymous_variant <code>SYNONYMOUS_CODING</code> Variant causes a codon that produces the same amino acid e.g.:  Ttg/Ctg, L/L <code>LOW</code> start_retained <code>SYNONYMOUS_START</code> Variant causes start codon to be mutated into another start codon. e.g.:  Ttg/Ctg, L/L (TTG and CTG can be START codons) <code>LOW</code> stop_retained_variant <code>SYNONYMOUS_STOP</code> Variant causes stop codon to be mutated into another stop codon. e.g.: taA/taG, */* <code>LOW</code> transcript_variant <code>TRANSCRIPT</code> The variant hits a transcript. <code>MODIFIER</code> feature_ablation <code>TRANSCRIPT_DELETED</code> Deletion of a transcript. <code>HIGH</code> regulatory_region_variant <code>REGULATION</code> The variant hits a known regulatory feature (non-coding). <code>MODIFIER</code> upstream_gene_variant <code>UPSTREAM</code> Upstream of a gene (default length: 5K bases) <code>MODIFIER</code> 3_prime_UTR_variant <code>UTR_3_PRIME</code> Variant hits 3'UTR region <code>MODIFIER</code> 3_prime_UTR_truncation + exon_loss <code>UTR_3_DELETED</code> The variant deletes an exon which is in the 3'UTR of the transcript <code>MODERATE</code> 5_prime_UTR_variant <code>UTR_5_PRIME</code> Variant hits 5'UTR region <code>MODIFIER</code> 5_prime_UTR_truncation + exon_loss_variant <code>UTR_5_DELETED</code> The variant deletes an exon which is in the 5'UTR of the transcript <code>MODERATE</code> sequence_feature + exon_loss_variant <code>NEXT_PROT</code> A 'NextProt' based annotation. Details are provided in the 'feature type' sub-field (ANN), or in the effect details (EFF). <code>MODERATE</code>"},{"location":"snpeff/inputoutput/#details-about-rare-amino-acid-annotaitons","title":"Details about Rare amino acid annotaitons","text":"<p>These are amino acids that occurs very rarely in an organism. For instance, humans are supposed to use 20 amino acids, but there is also one rare AA. Selenocysteine, single letter code 'U', appears roughly 100 times in the whole genome. The amino acid is so rare that usually it does not appear in codon translation tables. It is encoded as UGA, which usually means a STOP codon. Secondary RNA structures are assumed to enable this special translation.</p> <p>A variant in one of these sites is likely to cause a loss of function in the protein. E.g. in case of a Selenocysteine, a loss of a selenium molecule is likely to cause loss of function. Put it simply, the assumption is that there is a great deal of trouble to get that non-standard amino acid there, so it must be important. RARE_AMINO_ACID mark is used to show that special attention should be paid in these cases.</p> <p>Warning</p> <p>When the variant hits a RARE_AMINO_ACID mark, it is likely that the 'old_AA/new_AA' field will be incorrect. This may happen because the amino acid is not predictable using a codon table.</p>"},{"location":"snpeff/inputoutput/#details-about-protein-interaction-annotaitons","title":"Details about Protein interaction annotaitons","text":"<p>Protein interactions are calculated from PDB or AlphaFold. There are two main types of interactions:</p> <ul> <li><code>protein_protein_contact:</code> These are \"protein-protein\" interaction loci. They are calculated from PDB's co-crystalized structures by inferring pairs of amino acids   in different proteins that have atoms closer than 3 Angstrom from each other.</li> <li><code>structural_interaction_variant:</code> These are \"within protein\" interaction loci, which are likely to be supporting the protein structure.   They are calculated from single protein PDB entries, by selecting amino acids that are:   a) atom within 3 Angstrom of each other; and b) are far away in the AA sequence (over 20 AA distance).   The assumption is that, since they are very close in distance, they must be \"interacting\" and thus important for protein structure.</li> </ul>"},{"location":"snpeff/inputoutput/#impact-prediction","title":"Impact prediction","text":"<p>SnpEff reports putative variant impact in order to make it easier quickly to categorize and prioritize variants.</p> <p>Warning</p> <p>Impact categories must be used with care, they were created only to help and simplify the filtering process. Obviously, there is no way to predict whether a <code>HIGH</code> impact or a <code>LOW</code> impact variant is the one producing a phenotype of interest.</p> Impact Meaning Example <code>HIGH</code> The variant is assumed to have high (disruptive) impact in the protein, probably causing protein truncation, loss of function or triggering nonsense mediated decay. <code>stop_gained</code>, <code>frameshift_variant</code> <code>MODERATE</code> A non-disruptive variant that might change protein effectiveness. <code>missense_variant</code>, <code>inframe_deletion</code> <code>LOW</code> Assumed to be mostly harmless or unlikely to change protein behavior. <code>synonymous_variant</code> <code>MODIFIER</code> Usually non-coding variants or variants affecting non-coding genes, where predictions are difficult or there is no evidence of impact. <code>exon_variant</code>, <code>downstream_gene_variant</code>"},{"location":"snpeff/inputoutput/#functional-class","title":"Functional class","text":"<p>When a variant is a single nucleotide (SNV) in a protein coding transcript, SnpEff will inferr the \"Functional class\".</p> <p>Functional class can be, which is inferred as:</p> Functional Class Meaning <code>SILENT</code> The condon remains the same after the variant change <code>MISSENSE</code> The codon changes after the variant change <code>NONSENSE</code> The codon changed into a STOP codon"},{"location":"snpeff/inputoutput/#loss-of-function-lof-and-nonsense-mediated-decay-nmd-predictions","title":"Loss of function (LOF) and nonsense-mediated decay (NMD) predictions","text":"<p>Loss of function ('LOF') and nonsense-mediated decay ('NMD') predictions. In older versions, this prediction was activated using command line option <code>-lof</code>, but as of version 4.0, it is activated by default. Some details on how these variants work, can be found in these slides.</p> <p>Info</p> <p>Starting from version 4.0, this option is activated by default.</p> <p>Analyze if a set of effects are can create a \"Loss Of Function\" and \"Nonsense mediated decays\" effects.</p> <p>Needless to say, this is a prediction based on analysis of groups of \"putative effects\". Proper wet-lab validation is required to infer \"real\" LOF.</p> <p>References: I used the LOF definition used in the following paper A Systematic Survey of Loss-of-Function Variants in Human Protein-Coding Genes.</p> <p>Info</p> <p>From the paper:</p> <p>We adopted a definition for LoF variants expected to correlate with complete loss of function of the affected transcripts: stop codon-introducing (nonsense) or splice site-disrupting single-nucleotide variants (SNVs), insertion/deletion (indel) variants predicted to disrupt a transcript's reading frame, or larger deletions removing either the first exon or more than 50% of the protein-coding sequence of the affected transcript.</p> <p>Both nonsense SNVs and frameshift indels are enriched toward the 3' end of the affected gene, consistent with a greater tolerance to truncation close to the end of the coding sequence; putative LoF variants identified in the last 5% of the coding region were thus systematically removed from our high-confidence set.</p> <p>Other parameters used for LOF/NMD calculations:</p> <ul> <li>Number of bases before last exon-exon junction that nonsense mediated decay is supposed to occur: 50</li> <li>It is assumed that even with a protein coding change at the last 5% of the protein, the protein could still be functional.</li> <li>It is assumed that even with a protein coding change at the first 5% of the protein: \"..suggesting some disrupted transcripts are rescued by transcriptional reinitiation at an alternative start codon.\"</li> <li>Larger deletions removing either the first exon or more than 50% of the protein-coding sequence of the affected transcript</li> </ul> <p>Usage example: <pre><code># Note: Form version 4.0 onwards, the '-lof' command line option is not required\njava -Xmx8g -jar snpEff.jar -v \\\n    -lof \\\n    GRCh37.75 \\\n    test.chr22.vcf &gt; test.chr22.ann.vcf\n</code></pre></p> <p>SnpEff adds 'LOF' and 'NMD' tags to INFO fields (column 8 in VCF format).  LOF and NMD tags have the following format:</p> <pre><code>Gene | ID | num_transcripts | percent_affected\n</code></pre> <p>Where:</p> Field Description Gene Gene name ID Gene ID (usually ENSEMBL) Num_transcripts Number of transcripts in this gene percent_affected Percentage of transcripts affected by this variant. <p>Example: If we have this effect</p> <pre><code>EFF=stop_gained(LOW|NONSENSE|Gga/Tga|p.Gly163*/c.487G&gt;T|574|GAB4|protein_coding|CODING|ENST00000400588|3|1),...\n</code></pre> <p>and the corresponding LOF and NMD tags are</p> <pre><code>LOF=(GAB4|ENSG00000215568|4|0.25);NMD=(GAB4|ENSG00000215568|4|0.25)\n</code></pre> <p>The meaning of the LOF tag is:</p> Field Description Gene GAB4 ID ENSG00000215568 Num_transcripts There are 4 transcripts in this gene percent_affected 25% of transcripts are affected by this variant."},{"location":"snpeff/inputoutput/#errors-and-warnings","title":"Errors and Warnings","text":"<p>As mentioned int the previous section, the last sub-field in EFF field shows errors or warnings (if any). Here is a description of the errors and warnings:</p> Error Meaning and possible solutions <code>ERROR_CHROMOSOME_NOT_FOUND</code> Chromosome does not exits in reference database. Typically indicates a mismatch between the chromosome names in the input file and the chromosome names used in the reference. See this FAQ for more details. <code>ERROR_OUT_OF_CHROMOSOME_RANGE</code> This means that the position is higher than chromosome's length. Probably an indicator that your data is not from this reference genome. <code>ERROR_OUT_OF_EXON</code> Exonic information not matching the coordinates. Indicates a problem (or even a bug?) in the database <code>ERROR_MISSING_CDS_SEQUENCE</code> Transcript has no CDS info. Indicates a problem (or even a bug?) in the database Warning Meaning and possible solutions <code>WARNING_REF_DOES_NOT_MATCH_GENOME</code> This means that the <code>REF</code> field does not match the reference genome. Warning! This warning probably indicated there is something really wrong with your data!  This happens when your data was aligned to a different reference genome than the one used to create SnpEff's database. If there are many of these warnings, it's a strong indicator that the data doesn't match and all the annotations will be garbage (because you are using the wrong database). Solution: Use the right database to annotate! Due to performance and memory optimizations, SnpEff only checks reference sequence on Exons. <code>WARNING_SEQUENCE_NOT_AVAILABLE</code> For some reason the exon sequence is not available, so we cannot calculate effects. <code>WARNING_TRANSCRIPT_INCOMPLETE</code> A protein coding transcript whose length is non-multiple of 3. This means that information is missing for one or more amino acids. This is usually due to errors in the genomic information (e.g. the genomic databases provided by UCSC or ENSEMBL). Genomic information databases are constantly being improved and are getting more accurate, but some errors still remain. <code>WARNING_TRANSCRIPT_MULTIPLE_STOP_CODONS</code> A protein coding transcript has two or more STOP codons in the middle of the coding sequence (CDS). This should not happen and it usually means the genomic information may have an error in this transcript.  This is usually due to errors in the genomic information (e.g. the genomic databases provided by UCSC or ENSEMBL). Genomic information databases are constantly being improved and are getting more accurate, but some errors still remain. <code>WARNING_TRANSCRIPT_NO_START_CODON</code> A protein coding transcript does not have a proper START codon. It is rare that a real transcript does not have a START codon, so this probably indicates errors in genomic information for this transcript (e.g. the genomic databases provided by UCSC or ENSEMBL).  Genomic information databases are constantly being improved and are getting more accurate, but some errors still remain. Info Meaning <code>INFO_REALIGN_3_PRIME</code> Variant has been realigned to the most 3-prime position within the transcript. This is usually done to to comply with HGVS specification to always report the most 3-prime annotation. <code>INFO_COMPOUND_ANNOTATION</code> This effect is a result of combining more than one variants (e.g. two consecutive SNPs that conform an MNP, or two consecutive frame_shift variants that compensate frame). <code>INFO_NON_REFERENCE_ANNOTATION</code> An alternative reference sequence was used to calculate this annotation (e.g. cancer sample comparing somatic vs. germline)."},{"location":"snpeff/inputoutput/#bed-files","title":"BED files","text":"<p>In an enrichment experiment, such as ChIP-Seq, the results are enrichment regions, usually called \"peaks\". It is common for \"peak callers\" (algorithms that detect enrichment), write the results in a BED file. SnpEff can annotate BED files in order to facilitate interpretation of enrichment experiments.</p> <p>Warning</p> <p>Column fifth onwards are ignored when using BED file format and they will be lost in the output file.</p> <p>SnpEff can annotate BED files in order to facilitate interpretation of enrichment experiments. Annotations are added to the fourth column of the BED file.</p> <p>E.g.: <pre><code>$ java -Xmx8g -jar snpEff.jar -i bed BDGP5.69 chipSeq_peaks.bed\n\n# SnpEff version 3.3 (build 2013-05-15), by Pablo Cingolani\n# Command line: SnpEff  -i bed BDGP5.69 /home/pcingola/fly_pvuseq/chipSeq/Sample_w1118_IP_w_5hmC/w1118_IP_w_5hmC_peaks.bed\n# Chromo  Start     End       Name;Effect|Gene|BioType        Score\n2L        189463    190154    MACS_peak_1;Exon|exon_6_12_RETAINED|FBtr0078122|protein_coding|spen|protein_coding;Exon|exon_5_10_RETAINED|FBtr0078123|protein_coding|spen|protein_coding;Exon|exon_7_13_RETAINED|FBtr0306341|protein_coding|spen|protein_coding;Exon|exon_6_11_RETAINED|FBtr0078121|protein_coding|spen|protein_coding 245.41\n2L        195607    196120    MACS_peak_2;Exon|exon_6_12_RETAINED|FBtr0078122|protein_coding|spen|protein_coding;Exon|exon_5_10_RETAINED|FBtr0078123|protein_coding|spen|protein_coding;Exon|exon_7_13_RETAINED|FBtr0306341|protein_coding|spen|protein_coding;Exon|exon_6_11_RETAINED|FBtr0078121|protein_coding|spen|protein_coding 51.22\n2L        527253    527972    MACS_peak_3;Intron|intron_2_RETAINED-RETAINED|FBtr0078063|protein_coding|ush|protein_coding     55.97\n2L        711439    711764    MACS_peak_4;Intron|intron_1_RETAINED-RETAINED|FBtr0078045|protein_coding|ds|protein_coding      61.16\n2L        1365255   1365556   MACS_peak_5;Upstream|FBtr0077927|protein_coding|CG14346|protein_coding;Upstream|FBtr0077926|protein_coding|CG14346|protein_coding;Intergenic|NLaz...CG14346;Upstream|FBtr0077942|protein_coding|NLaz|protein_coding     62.78\n2L        1970199   1970405   MACS_peak_6;Upstream|FBtr0077813|protein_coding|Der-1|protein_coding;Intergenic|tRNA:CR31942...Der-1;Downstream|FBtr0077812|tRNA|tRNA:CR31942|tRNA      110.34\n2L        3345637   3346152   MACS_peak_7;Intron|intron_2_ALTTENATIVE_3SS-ALTTENATIVE_3SS|FBtr0089979|protein_coding|E23|protein_coding;Intron|intron_3_ALTTENATIVE_3SS-ALTTENATIVE_3SS|FBtr0089981|protein_coding|E23|protein_coding 65.49\n2L        4154734   4155027   MACS_peak_8;Intergenic|CG2955...Or24a;Downstream|FBtr0077468|protein_coding|CG2955|protein_coding       76.92\n2L        4643232   4643531   MACS_peak_9;Downstream|FBtr0110769|protein_coding|BG642163|protein_coding;Exon|exon_2_2_RETAINED|FBtr0300354|protein_coding|CG15635|protein_coding      76.92\n</code></pre> When a peak intersects multiple transcripts or even multiple genes, each annotation is separated by a semicolon. So if you look into the previous results in more detail, the first line looks like this (format edited for readability purposes): <pre><code>2L  189463  190154  MACS_peak_1;Exon|exon_6_12_RETAINED|FBtr0078122|protein_coding|spen|protein_coding\n                                ;Exon|exon_5_10_RETAINED|FBtr0078123|protein_coding|spen|protein_coding\n                                ;Exon|exon_7_13_RETAINED|FBtr0306341|protein_coding|spen|protein_coding\n                                ;Exon|exon_6_11_RETAINED|FBtr0078121|protein_coding|spen|protein_coding\n</code></pre> This peak is hitting four transcripts (FBtr0078122, FBtr0078123, FBtr0306341, FBtr0078121) in gene 'spen'.</p>"},{"location":"snpeff/inputoutput/#exon-naming-convention","title":"Exon naming convention","text":"<p>The format for the exon identifier is <code>exon_Rank_Total_Type</code>, where:</p> <ul> <li><code>rank</code> is the exon rank in the transcript (position in the transcript)</li> <li><code>total</code> is the total number of exons in that transcript</li> <li><code>type</code> is the exon splice type.</li> </ul> <p>For instance <code>exon_5_10_RETAINED</code> would be the fifth exon in a 10 exon transcript. This exon is type \"RETAINED\", which means it is not spliced out.</p> <p>Exons are categorized by splicing as follows:</p> <ul> <li><code>NONE</code> : Not spliced</li> <li><code>RETAINED</code> : All transcripts have this exon</li> <li><code>SKIPPED</code> : Some transcripts skip it</li> <li><code>ALTTENATIVE_3SS</code> : Some transcripts have and alternative 3' exon start</li> <li><code>ALTTENATIVE_5SS</code> : Some transcripts have and alternative 5' exon end</li> <li><code>MUTUALLY_EXCLUSIVE</code> : Mutually exclusive (respect to other exon)</li> <li><code>ALTTENATIVE_PROMOMOTER</code> : The first exon is different in some transcripts.</li> <li><code>ALTTENATIVE_POLY_A</code> : The last exon.</li> </ul> <p>See this Wikipedia entry for more information on exon splice types.</p>"},{"location":"snpeff/inputoutput/#intron-naming-convention","title":"Intron naming convention","text":"<p>Similarly to exons, introns are named as <code>intron_Rank_ExonTypeBefore-ExonTypeAfter</code>, where:</p> <ul> <li><code>Rank</code> :  the rank number for this intron in the transcript</li> <li><code>ExonTypeBefore</code> :  the splicing type of the exon preceding this intron (see exon naming convention for details).</li> <li><code>ExonTypeAfter</code> :  the splicing type of the after this intron (see exon naming convention for details).</li> </ul> <p>For instance <code>intron_9_SKIPPED-RETAINED</code> would be the ninth intron of the transcript. The intron is preceded by a <code>SKIPPED</code> exon and followed by a <code>RETAINED</code> exon.</p>"},{"location":"snpeff/integration/","title":"Integration: GATK and Galaxy","text":"<p>SnpEff is integrated with other tools commonly used in sequencing data analysis pipelines. Most notably Galaxy and Broad Institute's Genome Analysis Toolkit (GATK) projects support SnpEff. By using standards, such as VCF, SnpEff makes it easy to integrate with other programs.</p>"},{"location":"snpeff/integration/#integration-gatk","title":"Integration: GATK","text":"<p>In order to make sure SnpEff and GATK understand each other, you must activate GATK compatibility in SnpEff by using the <code>-o gatk</code> command line option. The reason for using '-o gatk' is that, even though both GATK and SnpEff use VCF format, SnpEff has recently updated the <code>EFF</code> sub-field format and this might cause some trouble (since GATK still uses the original version).</p> <p>Warning</p> <p>GATK only picks one effect. Indeed, the GATK team decided to only report the effect having the highest impact. This was done intentionally for the sake of brevity, in a 'less is more' spirit. You can get the full effect by using snpEff independently, instead of using it within GATK framework.</p> <p>Script example: In this example we combine SnpEff and GATK's VariantAnnotator (you can find this script in <code>snpEff/scripts/</code> directory of the distribution) <pre><code>#!/bin/sh\n\n#-------------------------------------------------------------------------------\n# Files\n#-------------------------------------------------------------------------------\n\nin=$1                                                   # Input VCF file\neff=`dirname $in`/`basename $in .vcf`.ann.vcf        # SnpEff annotated VCF file\nout=`dirname $in`/`basename $in .vcf`.gatk.vcf          # Output VCF file (annotated by GATK)\n\nref=$HOME/snpEff/data/genomes/hg19.fa                   # Reference genome file\ndict=`dirname $ref`/`basename $ref .fa`.dict            # Reference genome: Dictionary file\n\n#-------------------------------------------------------------------------------\n# Path to programs and libraries\n#-------------------------------------------------------------------------------\n\ngatk=$HOME/tools/gatk/GenomeAnalysisTK.jar\npicard=$HOME/tools/picard/\nsnpeff=$HOME/snpEff/snpEff.jar\n\n#-------------------------------------------------------------------------------\n# Main\n#-------------------------------------------------------------------------------\n\n# Create genome index file\necho\necho \"Indexing Genome reference FASTA file: $ref\"\nsamtools faidx $ref\n\n# Create dictionary\necho\necho \"Creating Genome reference dictionary file: $dict\"\njava -jar $picard/CreateSequenceDictionary.jar R= $ref O= $dict\n\n# Annotate\necho\necho \"Annotate using SnpEff\"\necho \"    Input file  : $in\"\necho \"    Output file : $eff\"\njava -Xmx8g -jar $snpeff -c $HOME/snpEff/snpEff.config -v -o gatk hg19 $in &gt; $eff\n\n# Use GATK\necho\necho \"Annotating using GATK's VariantAnnotator:\"\necho \"    Input file  : $in\"\necho \"    Output file : $out\"\njava -Xmx8g -jar $gatk \\\n    -T VariantAnnotator \\\n    -R $ref \\\n    -A SnpEff \\\n    --variant $in \\\n    --snpEffFile $eff \\\n    -L $in \\\n    -o $out\n</code></pre></p> <p>Warning</p> <p>Important: In order for this to work, GATK requires that the Genome Reference file should have the chromosomes in karotyping order (largest to smallest chromosomes, followed by the X, Y, and MT). Your VCF file should also respect that order.</p> <p>Now we can use the script: <pre><code>$ ~/snpEff/scripts/gatk.sh zzz.vcf\n\nIndexing Genome reference FASTA file: /home/pcingola/snpEff/data/genomes/hg19.fa\n\nCreating Genome reference dictionary file: /home/pcingola/snpEff/data/genomes/hg19.dict\n[Fri Apr 12 11:23:12 EDT 2013] net.sf.picard.sam.CreateSequenceDictionary REFERENCE=/home/pcingola/snpEff/data/genomes/hg19.fa OUTPUT=/home/pcingola/snpEff/data/genomes/hg19.dict    TRUNCATE_NAMES_AT_WHITESPACE=true NUM_SEQUENCES=2147483647 VERBOSITY=INFO QUIET=false VALIDATION_STRINGENCY=STRICT COMPRESSION_LEVEL=5 MAX_RECORDS_IN_RAM=500000 CREATE_INDEX=false CREATE_MD5_FILE=false\n[Fri Apr 12 11:23:12 EDT 2013] Executing as pcingola@localhost.localdomain on Linux 3.6.11-4.fc16.x86_64 amd64; OpenJDK 64-Bit Server VM 1.6.0_24-b24; Picard version: 1.89(1408)\n[Fri Apr 12 11:23:12 EDT 2013] net.sf.picard.sam.CreateSequenceDictionary done. Elapsed time: 0.00 minutes.\nRuntime.totalMemory()=141164544\nTo get help, see http://picard.sourceforge.net/index.shtml#GettingHelp\nException in thread \"main\" net.sf.picard.PicardException: /home/pcingola/snpEff/data/genomes/hg19.dict already exists.  Delete this file and try again, or specify a different output file.\n        at net.sf.picard.sam.CreateSequenceDictionary.doWork(CreateSequenceDictionary.java:114)\n        at net.sf.picard.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:177)\n        at net.sf.picard.sam.CreateSequenceDictionary.main(CreateSequenceDictionary.java:93)\n\nAnnotate using SnpEff\n    Input file  : zzz.vcf\n    Output file : ./zzz.ann.vcf\n00:00:00.000    Reading configuration file '/home/pcingola/snpEff/snpEff.config'\n00:00:00.173    done\n00:00:00.173    Reading database for genome version 'hg19' from file '/home/pcingola//snpEff/data/hg19/snpEffectPredictor.bin' (this might take a while)\n00:00:11.860    done\n00:00:11.885    Building interval forest\n00:00:17.755    done.\n00:00:18.391    Genome stats :\n# Genome name                : 'Homo_sapiens (USCS)'\n# Genome version             : 'hg19'\n# Has protein coding info    : true\n# Genes                      : 25933\n# Protein coding genes       : 20652\n# Transcripts                : 44253\n# Avg. transcripts per gene  : 1.71\n# Protein coding transcripts : 36332\n# Cds                        : 365442\n# Exons                      : 429543\n# Exons with sequence        : 409789\n# Exons without sequence     : 19754\n# Avg. exons per transcript  : 9.71\n# Number of chromosomes      : 50\n# Chromosomes names [sizes]  : '1' [249250621]  '2' [243199373] '3' [198022430] '4' [191154276] '5' [180915260] '6' [171115067] '7' [159138663] 'X' [155270560] '8' [146364022] '9' [141213431] '10' [135534747]    '11' [135006516]    '12' [133851895]    '13' [115169878]    '14' [107349540]    '15' [102531392]    '16' [90354753] '17' [81195210] '18' [78077248] '20' [63025520] 'Y' [59373566]  '19' [59128983] '22' [51304566] '21' [48129895] '6_ssto_hap7' [4905564] '6_mcf_hap5' [4764535]  '6_cox_hap2' [4734611]  '6_mann_hap4' [4679971] '6_qbl_hap6' [4609904]  '6_dbb_hap3' [4572120]  '6_apd_hap1' [4383650]  '17_ctg5_hap1' [1574839]    '4_ctg9_hap1' [582546]  'Un_gl000220' [156152]  '19_gl000209_random' [145745]   'Un_gl000213' [139339]  '17_gl000205_random' [119732]   'Un_gl000223' [119730]  '4_gl000194_random' [115071]    'Un_gl000228' [114676]  'Un_gl000219' [99642]   'Un_gl000218' [97454]   'Un_gl000211' [93165]   'Un_gl000222' [89310]   '4_gl000193_random' [88375] '7_gl000195_random' [86719] '1_gl000192_random' [79327] 'Un_gl000212' [60768]   '1_gl000191_random' [50281] 'M' [16571] \n00:00:18.391    Predicting variants\n00:00:20.267    Creating summary file: snpEff_summary.html\n00:00:20.847    Creating genes file: snpEff_genes.txt\n00:00:25.026    done.\n00:00:25.036    Logging\n00:00:26.037    Checking for updates...\n\nAnnotating using GATK's VariantAnnotator:\n    Input file  : zzz.vcf\n    Output file : ./zzz.gatk.vcf\nINFO  11:23:41,316 ArgumentTypeDescriptor - Dynamically determined type of zzz.vcf to be VCF \nINFO  11:23:41,343 HelpFormatter - -------------------------------------------------------------------------------- \nINFO  11:23:41,344 HelpFormatter - The Genome Analysis Toolkit (GATK) v2.4-9-g532efad, Compiled 2013/03/19 07:35:36 \nINFO  11:23:41,344 HelpFormatter - Copyright (c) 2010 The Broad Institute \nINFO  11:23:41,344 HelpFormatter - For support and documentation go to http://www.broadinstitute.org/gatk \nINFO  11:23:41,347 HelpFormatter - Program Args: -T VariantAnnotator -R /home/pcingola/snpEff/data/genomes/hg19.fa -A SnpEff --variant zzz.vcf --snpEffFile ./zzz.ann.vcf -L zzz.vcf -o ./zzz.gatk.vcf \nINFO  11:23:41,347 HelpFormatter - Date/Time: 2013/04/12 11:23:41 \nINFO  11:23:41,348 HelpFormatter - -------------------------------------------------------------------------------- \nINFO  11:23:41,348 HelpFormatter - -------------------------------------------------------------------------------- \nINFO  11:23:41,353 ArgumentTypeDescriptor - Dynamically determined type of zzz.vcf to be VCF \nINFO  11:23:41,356 ArgumentTypeDescriptor - Dynamically determined type of ./zzz.ann.vcf to be VCF \nINFO  11:23:41,399 GenomeAnalysisEngine - Strictness is SILENT \nINFO  11:23:41,466 GenomeAnalysisEngine - Downsampling Settings: Method: BY_SAMPLE, Target Coverage: 1000 \nINFO  11:23:41,480 RMDTrackBuilder - Loading Tribble index from disk for file zzz.vcf \nINFO  11:23:41,503 RMDTrackBuilder - Loading Tribble index from disk for file ./zzz.ann.vcf \nWARN  11:23:41,505 RMDTrackBuilder - Index file /data/pcingola/Documents/projects/snpEff/gatk_test/./zzz.ann.vcf.idx is out of date (index older than input file), deleting and updating the index file \nINFO  11:23:41,506 RMDTrackBuilder - Creating Tribble index in memory for file ./zzz.ann.vcf \nINFO  11:23:41,914 RMDTrackBuilder - Writing Tribble index to disk for file /data/pcingola/Documents/projects/snpEff/gatk_test/./zzz.ann.vcf.idx \nINFO  11:23:42,076 IntervalUtils - Processing 33411 bp from intervals \nINFO  11:23:42,125 GenomeAnalysisEngine - Creating shard strategy for 0 BAM files \nINFO  11:23:42,134 GenomeAnalysisEngine - Done creating shard strategy \nINFO  11:23:42,134 ProgressMeter - [INITIALIZATION COMPLETE; STARTING PROCESSING] \nINFO  11:23:42,135 ProgressMeter -        Location processed.sites  runtime per.1M.sites completed total.runtime remaining \nINFO  11:23:49,268 VariantAnnotator - Processed 9966 loci.\n\nINFO  11:23:49,280 ProgressMeter -            done        3.34e+04    7.0 s        3.6 m    100.0%         7.0 s     0.0 s \nINFO  11:23:49,280 ProgressMeter - Total runtime 7.15 secs, 0.12 min, 0.00 hours \nINFO  11:23:49,953 GATKRunReport - Uploaded run statistics report to AWS S3 \n</code></pre></p>"},{"location":"snpeff/integration/#integration-galaxy","title":"Integration: Galaxy","text":"<p>In order to install SnpEff in your own Galaxy server, you can use the <code>galaxy/*.xml</code> files provided in the main distribution.</p> <p>This is a screen capture from a Galaxy server (click to enlarge):</p> <p></p> <p>Installing SnpEff in a Galaxy server: <pre><code># Set variable to snpEff install dir (we only use it for this install script)\nexport snpEffDir=\"$HOME/snpEff\"\n\n# Go to your galaxy 'tools' dir\ncd galaxy-dist/tools\n\n# Create a directory and copy the XML config files from SnpEff's distribution\nmkdir snpEff\ncd snpEff/\ncp $snpEffDir/galaxy/* .\n\n# Create links to JAR files\nln -s $snpEffDir/snpEff.jar\nln -s $snpEffDir/SnpSift.jar\n\n# Link to config file\nln -s $snpEffDir/snpEff.config\n\n# Allow scripts execution\nchmod a+x *.{pl,sh}\n\n# Copy genomes information\ncd ../..\ncp $snpEffDir/galaxy/tool-data/snpEff_genomes.loc tool-data/\n\n# Edit Galaxy's tool_conf.xml and add all the tools\nvi tool_conf.xml\n\n-------------------- Begin: Edit tool_conf.xml --------------------\n&lt;!-- \n    Add this section to tool_conf.xml file in your galaxy distribution\n\n    Note: The following lines should be added at the end of the \n          file, right before \"&lt;/toolbox&gt;\" line\n--&gt;\n&lt;section name=\"snpEff tools\" id=\"snpEff_tools\"&gt;\n    &lt;tool file=\"snpEff/snpEff.xml\" /&gt;\n    &lt;tool file=\"snpEff/snpEff_download.xml\" /&gt;\n    &lt;tool file=\"snpEff/snpSift_annotate.xml\" /&gt;\n    &lt;tool file=\"snpEff/snpSift_caseControl.xml\" /&gt;\n    &lt;tool file=\"snpEff/snpSift_filter.xml\" /&gt;\n    &lt;tool file=\"snpEff/snpSift_int.xml\" /&gt;\n&lt;/section&gt;\n-------------------- End: Edit tool_conf.xml --------------------\n\n# Run galaxy and check that the new menus appear\n./run.sh\n</code></pre></p>"},{"location":"snpeff/introduction/","title":"SnpEff","text":"<p>SnpEff is a variant annotation and effect prediction tool. It annotates and predicts the effects of genetic variants (such as amino acid changes).</p>"},{"location":"snpeff/introduction/#download-install","title":"Download &amp; Install","text":"<p>Download and installing SnpEff it pretty easy, take a look at the download page.</p>"},{"location":"snpeff/introduction/#building-from-source","title":"Building from source","text":"<p>Take a look at the \"Source code\" section.</p>"},{"location":"snpeff/introduction/#snpeff-summary","title":"SnpEff Summary","text":"<p>A typical SnpEff use case would be:</p> <ul> <li>Input:     The inputs are predicted variants (SNPs, insertions, deletions and MNPs).     The input file is usually obtained as a result of a sequencing experiment, and it is usually in variant call format (VCF).</li> <li>Output:     SnpEff analyzes the input variants.     It annotates the variants and calculates the effects they produce on known genes (e.g. amino acid changes).     A list of effects and annotations that SnpEff can calculate can be found here.</li> </ul> <p>Variants</p> <p>By genetic variant we mean difference between a genome and a \"reference\" genome. As an example, imagine we are sequencing a \"sample\". Here \"sample\" can mean anything that you are interested in studying, from a cell culture, to a mouse or a cancer patient.</p> <p>It is a standard procedure to compare your sample sequences against the corresponding \"reference genome\". For instance you may compare the cancer patient genome against the \"reference genome\".</p> <p>In a typical sequencing experiment, you will find many places in the genome where your sample differs from the reference genome. These are called \"genomic variants\" or just \"variants\".</p> <p>Typically, variants are categorized as follows:</p> Type What is means Example SNP Single-Nucleotide Polymorphism Reference = 'A', Sample = 'C' Ins Insertion Reference = 'A', Sample = 'AGT' Del Deletion Reference = 'AC', Sample = 'C' MNP Multiple-nucleotide polymorphism Reference = 'ATA', Sample = 'GTC' MIXED Multiple-nucleotide and an InDel Reference = 'ATA', Sample = 'GTCAGT' <p>This is not a comprehensive list, it is just to give you an idea.</p> <p>Annotations</p> <p>So, you have a huge file describing all the differences between your sample and the reference genome. But you want to know more about these variants than just their genetic coordinates. E.g.: Are they in a gene? In an exon? Do they change protein coding? Do they cause premature stop codons?</p> <p>SnpEff can help you answer all these questions. The process of adding this information about the variants is called \"Annotation\".</p> <p>SnpEff provides several degrees of annotations, from simple (e.g. which gene is each variant affecting) to extremely complex annotations (e.g. will this non-coding variant affect the expression of a gene?). It should be noted that the more complex the annotations, the more it relies in computational predictions. Such computational predictions can be incorrect, so results from SnpEff (or any prediction algorithm) cannot be trusted blindly, they must be analyzed and independently validated by corresponding wet-lab experiments.</p>"},{"location":"snpeff/introduction/#citing","title":"Citing","text":"<p>If you are using SnpEff or SnpSift, please cite our work as shown here. Thank you!</p>"},{"location":"snpeff/introduction/#snpeff-features","title":"SnpEff Features","text":"<p>The following table shows the main SnpEff features:</p> Feature Comment Local install SnpEff can be installed in your local computer or servers.  Local installations are preferred for processing genomic data.  As opposed to remote web-based services, running a program locally has many advantages: <ul><li> There no need to upload huge genomic dataset. </li><li> Processing doesn't depend on availability or processing capacity of remote servers. </li><li> Service continuity: no need to worry if a remote service will be maintained in the future. </li><li> Security and confidentiality issues of uploading data to third party servers are not a problem. </li><li> Avoid legal problems of processing clinical data on \"outside\" servers. </li></ul> Multi platform SnpEff is written in Java. It runs on Unix / Linux, OS.X and Windows. Simple installation Installation is as simple as downloading a ZIP file and double clicking on it. Genomes Human genome, as well as all model organisms are supported. Over 2,500 genomes are supported, which includes most mammalian, plant, bacterial and fungal genomes with published genomic data. Speed SnpEff is really fast. It can annotate up to 1,000,000 variants per minute. GATK&amp;Galaxy integration SnpEff can be easily integrated with GATK and Galaxy pipelines. GUI Web based user interface via Galaxy project Input and Output formats SnpEff accepts input files in the following format:<ul><li> <code>VCF</code> format, which is the de-facto standard for sequencing variants.</li><li><code>BED</code> format: To annotate enrichment experiments (e.g. ChIP-Seq peaks) or other genomic data.</li></ul> Variants supported SnpEff can annotate SNPs, MNPs, insertions and deletions. Support for mixed variants and structural variants is available (although sometimes limited). Effect supported Many effects are calculated: such as SYNONYMOUS_CODING, NON_SYNONYMOUS_CODING, FRAME_SHIFT, STOP_GAINED just to name a few. Variant impact SnpEff provides a simple assessment of the putative impact of the variant (e.g. HIGH, MODERATE or LOW impact). Cancer tissue analysis Somatic vs Germline mutations can be calculated on the fly. This is very useful for the cancer researcher community. Loss of Function (LOF) assessment SnpEff can estimate if a variant is deemed to have a loss of function on the protein. Nonsense mediate decay (NMD) assessment Some mutations may cause mRNA to be degraded thus not translated into a protein. NMD analysis marks mutations that are estimated to trigger nonsense mediated decay. HGVS notation SnpEff can provide output in HGVS notation, which is quite popular in clinical and translation research environments. User annotations A user can provide custom annotations (by means of BED files). Public databases SnpEff can annotate using publicly available data from well known databases, for instance:<ul><li>ENCODE datasets are supported by SnpEff (by means of BigWig files provided by ENCODE project).</li><li>Epigenome Roadmap provides data-sets that can be used with SnpEff.</li><li>TFBS Transcription factor binding site predictions can be annotated. Motif data used in this annotations is generates by <code>Jaspar</code> and <code>ENSEBML</code> projects</li><li>NextProt database can be used to annotate protein domains as well as important functional sites in a protein (e.g. phosphorilation site)</li></ul> Common variants (dbSnp) Annotating \"common\" variants from dbSnp and 1,000 Genomes can be easily done (see <code>SnpSift annotate</code>). Gwas catalog Support for GWAS catalog annotations (see <code>SnpSift gwasCat</code>) Conservation scores PhastCons conservation score annotations support (see <code>SnpSift phastCons</code>) DbNsfp A comprehensive database providing many annotations and scores, such as: <code>SIFT</code>, <code>Polyphen2</code> ,<code>GERP++</code>, <code>PhyloP</code>, <code>MutationTaster</code>, <code>SiPhy</code>, <code>Interpro</code>, <code>Haploinsufficiency</code>, etc. (via SnpSift).See <code>SnpSift dbnsfp</code> for details. Non-coding annotations Regulatory and non-coding annotations are supported for different tissues and cell lines. Annotations supported include PolII,H3K27ac, H3K4me2, H3K4me3, H3K27me3, CTCF, H3K36me3, just to name a few. Gene Sets annotations Gene sets (MSigDb, GO, BioCarta, KEGG, Reactome, etc.) can be used to annotate via <code>SnpSift geneSets</code> command."},{"location":"snpeff/introduction/#databases","title":"Databases","text":"<p>In order to produce the annotations, SnpEff requires a database. We build these databases using information from trusted resources.</p> <p>Info</p> <p>By default SnpEff downloads and installs databases automatically (since version 4.0)</p> <p>Currently, there are pre-built database for over 20,000 reference genomes. This means that most cases are covered.</p> <p>In some very rare occasions, people need to build a database for an organism not currently supported (e.g. the genome is not publicly available). In most cases, this can be done and there is a section of this manual teaching how to build your own SnpEff database.</p> <p>Which databases are supported? You can find out all the supported databases by running the <code>databases</code> command:</p> <pre><code>java -jar snpEff.jar databases | less\n</code></pre> <p>This command shows the database name, genome name and source data (where was the genome reference data obtained from). Keep in mind that many times I use ENSEMBL reference genomes, so the name would be <code>GRCh37</code> instead of <code>hg19</code>, or <code>GRCm38</code> instead of <code>mm10</code>, and so on.</p> <p>Example: Finding a database: So, let's say you want to find out the name of the latest mouse (Mus.Musculus) database. You can runs something like this:</p> <pre><code>java -jar snpEff.jar databases | grep -i musculus\n\n129S1_SvImJ_v1.99                                               Mus_musculus_129s1svimj                                                                                     https://snpeff.blob.core.windows.net/databases/v5_0/snpEff_v5_0_129S1_SvImJ_v1.99.zip\nAKR_J_v1.99                                                     Mus_musculus_akrj                                                                                           https://snpeff.blob.core.windows.net/databases/v5_0/snpEff_v5_0_AKR_J_v1.99.zip\nA_J_v1.99                                                       Mus_musculus_aj                                                                                             https://snpeff.blob.core.windows.net/databases/v5_0/snpEff_v5_0_A_J_v1.99.zip\nBALB_cJ_v1.99                                                   Mus_musculus_balbcj                                                                                         https://snpeff.blob.core.windows.net/databases/v5_0/snpEff_v5_0_BALB_cJ_v1.99.zip\nC3H_HeJ_v1.99                                                   Mus_musculus_c3hhej                                                                                         https://snpeff.blob.core.windows.net/databases/v5_0/snpEff_v5_0_C3H_HeJ_v1.99.zip\nC57BL_6NJ_v1.99                                                 Mus_musculus_c57bl6nj                                                                                       https://snpeff.blob.core.windows.net/databases/v5_0/snpEff_v5_0_C57BL_6NJ_v1.99.zip\nCAST_EiJ_v1.99                                                  Mus_musculus_casteij                                                                                        https://snpeff.blob.core.windows.net/databases/v5_0/snpEff_v5_0_CAST_EiJ_v1.99.zip\nCBA_J_v1.99                                                     Mus_musculus_cbaj                                                                                           https://snpeff.blob.core.windows.net/databases/v5_0/snpEff_v5_0_CBA_J_v1.99.zip\nDBA_2J_v1.99                                                    Mus_musculus_dba2j                                                                                          https://snpeff.blob.core.windows.net/databases/v5_0/snpEff_v5_0_DBA_2J_v1.99.zip\nFVB_NJ_v1.99                                                    Mus_musculus_fvbnj                                                                                          https://snpeff.blob.core.windows.net/databases/v5_0/snpEff_v5_0_FVB_NJ_v1.99.zip\nGRCm38.75                                                       Mus_musculus                                                                                                https://snpeff.blob.core.windows.net/databases/v5_0/snpEff_v5_0_GRCm38.75.zip\nGRCm38.99                                                       Mus_musculus                                                                                                https://snpeff.blob.core.windows.net/databases/v5_0/snpEff_v5_0_GRCm38.99.zip\nLP_J_v1.99                                                      Mus_musculus_lpj                                                                                            https://snpeff.blob.core.windows.net/databases/v5_0/snpEff_v5_0_LP_J_v1.99.zip\nNOD_ShiLtJ_v1.99                                                Mus_musculus_nodshiltj                                                                                      https://snpeff.blob.core.windows.net/databases/v5_0/snpEff_v5_0_NOD_ShiLtJ_v1.99.zip\nNZO_HlLtJ_v1.99                                                 Mus_musculus_nzohlltj                                                                                       https://snpeff.blob.core.windows.net/databases/v5_0/snpEff_v5_0_NZO_HlLtJ_v1.99.zip\nPWK_PhJ_v1.99                                                   Mus_musculus_pwkphj                                                                                         https://snpeff.blob.core.windows.net/databases/v5_0/snpEff_v5_0_PWK_PhJ_v1.99.zip\nWSB_EiJ_v1.99                                                   Mus_musculus_wsbeij                                                                                         https://snpeff.blob.core.windows.net/databases/v5_0/snpEff_v5_0_WSB_EiJ_v1.99.zip\ntestMm37.61                                                     Mus_musculus                                                                                                https://snpeff.blob.core.windows.net/databases/v5_0/snpEff_v5_0_testMm37.61.zip\n</code></pre> <p>At the time of writing this, you have 10 options (obviously this will change in the future). Some are databases are GRCm version 37 (i.e. mm9) and some are version 38 (i.e. mm10). Since it is generally better to use the latest release, you should probably pick <code>GRCm38.74</code>. Again, this is an example of the version numbers at the time of writing this paragraph, in the future there will be other releases and you should update to the corresponding version.</p> <p>Unsupported reference genomes: If your reference genome of interest is not supported yet (i.e. there is no database available), you can build a database yourself (see Building databases). If you have problems adding you own organism, send the issue to SnpEff repository and I'll do my best to help you out.</p>"},{"location":"snpeff/outputsummary/","title":"Output summary files","text":"<p>SnpEff creates an additional output file showing overall statistics. This \"stats\" file is an HTML file which can be opened using a web browser. It can also be created as a CSV file, for easier parsing or manipulation. You can find an example of a 'stats' file here.</p>"},{"location":"snpeff/outputsummary/#summary-file-options","title":"Summary file options","text":"<p>By default, SnpEff performs some statistics and saves them to the <code>snpEff_summary.html</code> on the same directory where snpEff is being executed. You can see the file, by opening it in your browser. SnpEff also creates a \"Genes Statistics\" file (<code>snpEff_genes.txt</code>) with gene-level statistics in tabular (tab-separated) format.</p> <p>There are some command line options related to the statistics:</p> <ul> <li><code>-stats &lt;file&gt;</code>: You can change the default name and location of the HTML file. This also changes the name and location of the \"genes\" (TXT) file.</li> <li><code>-noStats</code>: Do not calculate statisticsm, or create stats (summary) files</li> <li><code>-csvStats &lt;file&gt;</code>: Create the statistics file in CSV format with the specified name.</li> </ul> <p>Info</p> <p>The \"Genes statistics\" file path is by default the directory where SnpEff is executed and called <code>snpEff_genes.txt</code>. If you change the summary file name / path by either using <code>-stats</code> or <code>csvStats</code> command line, the \"Genes statistics\" file path will be the same directory as the summary file and the file name is the same \"base name\" plus a <code>\".genes.txt\"</code>.</p>"},{"location":"snpeff/outputsummary/#summary-report","title":"Summary report","text":"<p>The summary report consist of several sections:</p> <ul> <li>Main summary table</li> <li>Variant rate by chromosome: A table of number of variants and variants rate per chromosome</li> <li>Variants by type</li> <li>Number of variants by impact: A count and percentage of variants by impact</li> <li>Number of variants by functional class: A count and percentage of variants by functional class</li> <li>Number of variants by annotation</li> <li>Quality histogram: Variant Quality histogram, i.e. a histogram of the VCF's  <code>QUAL</code> field</li> <li>InDel length histogram: Length of <code>INS</code> and <code>DEL</code> variants</li> <li>Base variant table: Table of SNV variants changes</li> <li>Transition vs transversions (ts/tv): Transition vs transversions table, split into \"known\" and all variants (known variants are the ones with non-empty <code>ID</code> field).</li> <li>Allele frequency: Allele frequency histogram</li> <li>Allele Count: Allele count histogram</li> <li>Codon change table: A table of all codon changes counts</li> <li>Amino acid change table: A table of all amino acid changes counts</li> <li>Chromosome variants plots: Plots of number of variants for each chromosome location</li> <li>Details by gene: Link to \"Genes Statistics\" file</li> </ul>"},{"location":"snpeff/outputsummary/#main-summary-table","title":"Main summary table","text":"<p>The main summary table contains basic information about the SnpEff run and some overall statistics:</p> Table Entry Note Genome Genome name and version, as specified in the command line Date Date and time when the analysis was performed SnpEff version SnpEff version Command line arguments Command line arguments and options used to annotate Warnings Number of WARNING annotation messages (i.e. <code>WARNING</code> messages in the ANN field) Errors Number of ERROR annotation messages (i.e. <code>ERROR</code> messages in the ANN field) Number of lines (input file) Number of lines in the input file, excluding comment / header lines Number of variants (before filter) Number of variants in the input file. Note that this can differ from the number of lines; e.g. VCF allows for multiple variants per line and IUPAC expansion. Number of not variants Number of non-variants, e.g. if the <code>REF</code> and <code>ALT</code> fields are the same Number of variants processed Number of variants processed. This can be different than the number of variants due to filtering and non-variants entries. Number of known variants Variants that have a non-empty <code>ID</code> field. Number of multi-allelic VCF entries Variants that have mode then two alleles. Most variants have only two alleles: <code>REF</code> and one <code>ALT</code>. Multi-allelic variants have multiple <code>ALT</code> entries. Number of annotations Total number of variant annotations. Note that this is typically higher than the number of variant Genome total length Total genome length (in bases) Genome effective length Total length of the chromosomes (in bases). This only counts chromosomes that had varinats Variant rate Number of variants per genomic length: <code>Number of variants</code> / <code>Genome effeective length</code> <p>Warning</p> <p>The number of input lines, number of variants, and number of annotation are different counts and typically are not equal, see details in this FAQ</p>"},{"location":"snpeff/outputsummary/#variants-by-type","title":"Variants by type","text":"<p>This table contains a list of the number of variants, grouped by variant type:</p> Type Note <code>SNP</code> SNP / SNV is a single nucleotide variant, e.g. 'A -&gt; G' <code>MNP</code> MNP / MNV is a multiple nucleotide variant, e.g. 'AC -&gt; GT' <code>INS</code> Insertion, e.g. 'A -&gt; AT' <code>DEL</code> Deletion, e.g. 'AT -&gt; A' <code>MIXED</code> A mixed vairant is a combination of SNP / MNP / INS / DEL, for example ' <code>INV</code> An inversion of reference sequence <code>DUP</code> A duplication is a region of elevated copy number relative to the reference <code>BND</code> An arbitrary rearrangement <code>INTERVAL</code> An interval marke, e.g. an interval from a BED file"},{"location":"snpeff/outputsummary/#histograms","title":"Histograms","text":"<p>E.g.: In the stats file, you can see coverage histogram plots like this one:</p> <p></p>"},{"location":"snpeff/outputsummary/#annotations-region","title":"Annotations &amp; Region","text":"<p>SnpEff annotates variants using \"functional annotaions\", e.g. <code>NON_SYNONYMOUS_CODING</code>, <code>STOP_GAINED</code>, etc.. These variants affect regions of the genome (e.g. <code>EXON</code>, <code>INTRON</code>). The two tables count how many effects for each type and for each region exists.</p> <p>E.g.: In an <code>EXON</code> region, you can have all the following effect types: <code>NON_SYNONYMOUS_CODING</code>, <code>SYNONYMOUS_CODING</code>, <code>FRAME_SHIFT</code>, <code>STOP_GAINED</code>, etc.</p> <p>The complicated part is that some annotaitons affect a region that has the same name (yes, I know, this is confusing).</p> <p>E.g.: In a <code>UTR_5_PRIME</code> region you can have <code>UTR_5_PRIME</code> and <code>START_GAINED</code> effect type.</p> <p>This means that the number of both tables are not exactly the same, because the labels don't mean the same. See the next figure as an example:</p> <p></p> <p>So the number of effects that affect a UTR_5_PRIME region is 206. Of those, 57 are effects type <code>START_GAINED</code> and 149 are effects type <code>UTR_5_PRIME</code>.</p> <p>How exactly are effect type and effect region related? See the following table:</p> Effect Type Region <code>NONE</code>, <code>CHROMOSOME</code>, <code>CUSTOM</code>, <code>CDS</code> <code>NONE</code> <code>INTERGENIC</code>, <code>INTERGENIC_CONSERVED</code> <code>INTERGENIC</code> <code>UPSTREAM</code> <code>UPSTREAM</code> <code>UTR_5_PRIME</code>, <code>UTR_5_DELETED</code>, <code>START_GAINED</code> <code>UTR_5_PRIME</code> <code>SPLICE_SITE_ACCEPTOR</code> <code>SPLICE_SITE_ACCEPTOR</code> <code>SPLICE_SITE_DONOR</code> <code>SPLICE_SITE_DONOR</code> <code>SPLICE_SITE_REGION</code> <code>SPLICE_SITE_REGION</code> <code>INTRAGENIC</code>, <code>START_LOST</code>, <code>SYNONYMOUS_START</code>, <code>NON_SYNONYMOUS_START</code>, <code>GENE</code>, <code>TRANSCRIPT</code> <code>EXON</code> or <code>NONE</code> <code>EXON</code>, <code>EXON_DELETED</code>, <code>NON_SYNONYMOUS_CODING</code>, <code>SYNONYMOUS_CODING</code>, <code>FRAME_SHIFT</code>, <code>CODON_CHANGE</code>, <code>CODON_INSERTION</code>, <code>CODON_CHANGE_PLUS_CODON_INSERTION</code>, <code>CODON_DELETION</code>, <code>CODON_CHANGE_PLUS_CODON_DELETION</code>, <code>STOP_GAINED</code>, <code>SYNONYMOUS_STOP</code>, <code>STOP_LOST</code>, <code>RARE_AMINO_ACID</code> <code>EXON</code> <code>INTRON</code>, <code>INTRON_CONSERVED</code> <code>INTRON</code> <code>UTR_3_PRIME</code>, <code>UTR_3_DELETED</code> <code>UTR_3_PRIME</code> <code>DOWNSTREAM</code> <code>DOWNSTREAM</code> <code>REGULATION</code> <code>REGULATION</code>"},{"location":"snpeff/outputsummary/#gene-statistics","title":"Gene statistics","text":"<p>SnpEff also generates a TXT (tab separated) file having counts of number of variants affecting each transcript and gene. By default, the file name is <code>snpEff_genes.txt</code>, but it can be changed using the <code>-stats</code> command line option.</p> <p>Here is an example of this file: <pre><code>$ head snpEff_genes.txt\n# The following table is formatted as tab separated values.\n#GeneName   GeneId  TranscriptId    BioType variants_impact_HIGH    variants_impact_LOW variants_impact_MODERATE    variants_impact_MODIFIER    variants_effect_3_prime_UTR_variant variants_effect_5_prime_UTR_premature_start_codon_gain_variant  variants_effect_5_prime_UTR_variant variants_effect_downstream_gene_variant variants_effect_intron_variant  variants_effect_missense_variant    variants_effect_non_coding_exon_variant variants_effect_splice_acceptor_variant variants_effect_splice_donor_variant    variants_effect_splice_region_variant   variants_effect_start_lost  variants_effect_stop_gained variants_effect_stop_lost   variants_effect_synonymous_variant  variants_effect_upstream_gene_variant   bases_affected_DOWNSTREAM   total_score_DOWNSTREAM  length_DOWNSTREAM   bases_affected_EXON total_score_EXON    length_EXON bases_affected_INTRON   total_score_INTRON  length_INTRON   bases_affected_SPLICE_SITE_ACCEPTOR total_score_SPLICE_SITE_ACCEPTOR    length_SPLICE_SITE_ACCEPTOR bases_affected_SPLICE_SITE_DONOR    total_score_SPLICE_SITE_DONOR   length_SPLICE_SITE_DONOR    bases_affected_SPLICE_SITE_REGION   total_score_SPLICE_SITE_REGION  length_SPLICE_SITE_REGION   bases_affected_TRANSCRIPT   total_score_TRANSCRIPT  length_TRANSCRIPT   bases_affected_UPSTREAM total_score_UPSTREAM    length_UPSTREAM bases_affected_UTR_3_PRIME  total_score_UTR_3_PRIME length_UTR_3_PRIME  bases_affected_UTR_5_PRIME  total_score_UTR_5_PRIME length_UTR_5_PRIME\nAC000029.1  ENSG00000221069 ENST00000408142 miRNA   0   0   0   2   0   0   0   2   0   0   0   0   0   0   0   0   5000    0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\nAC000068.5  ENSG00000185065 ENST00000431090 antisense   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   5000    0   0   0   0   0   0\nAC000081.2  ENSG00000230194 ENST00000433141 processed_pseudogene    0   0   0   8   0   0   0   3   0   0   0   0   0   0   5000    0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   5   0   5000    0   0\nAC000089.3  ENSG00000235776 ENST00000424559 processed_pseudogene    0   0   0   1   0   0   0   0   0   0   0   0   0   0   5000    0   0   0   0   0   0\nAC002472.1  ENSG00000269103 ENST00000547793 protein_coding  0   0   0   6   0   0   0   5   0   0   0   0   0   0   0   5000    0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   5000    0   0\nAC002472.11 ENSG00000226872 ENST00000450652 antisense   0   0   0   13  0   0   0   5   2   0   0   0   0   0   0   5000    0   0   0   2   0   11199   0   0   0   0   0   0   0   0   0   0   0   0   6   0   5000    0   0\nAC002472.13 ENSG00000187905 ENST00000342608 protein_coding  0   1   6   1   0   0   0   0   1   6   0   0   0   1   0   116 1   0   934 0   0   0   0   0   0   1   0   3   0   0   0   0   0   0   0   0   0   0   0\nAC002472.13 ENSG00000187905 ENST00000442047 protein_coding  0   1   6   1   0   0   0   0   1   6   0   0   0   1   0   116 1   0   934 0   0   0   0   0   0   1   0   3   0   0   0   0   0   0   0   0   0   0   0\n</code></pre></p> <p>The columns in this table are:</p> Column name Meaning GeneName Gene name (usually HUGO) GeneId Gene's ID TranscriptId Transcript's ID BioType Transcript's bio-type (if available) The following column is repeated for each impact {HIGH, MODERATE, LOW, MODIFIER} variants_impact_* Count number of variants for each impact category The following column is repeated for each annotated effect (e.g. missense_variant, synonymous_variant, stop_lost, etc.) variants_effect_* Count number of variants for each effect type The following columns are repeated for several genomic regions (DOWNSTREAM, EXON, INTRON, UPSTREAM, etc.) bases_affected_* Number of bases that variants overlap genomic region total_score_* Sum of scores overlapping this genomic region. Note: Scores are only available when input files are type 'BED' (e.g. when annotating ChipSeq experiments) length_* Genomic region length"},{"location":"snpeff/running/","title":"Running SnpEff","text":"<p>We show some basic examples how to use SnpEff.</p>"},{"location":"snpeff/running/#basic-example-installing-snpeff","title":"Basic example: Installing SnpEff","text":"<p>Obviously the first step to use the program is to install it (for details, take a look at the download page. You have to download the core program and then uncompress the ZIP file. In Windows systems, you can just double click and copy the contents of the ZIP file to wherever you want the program installed. If you have a Unix or a Mac system, the command line would be:</p> <pre><code># Download using wget\nwget https://snpeff.blob.core.windows.net/versions/snpEff_latest_core.zip\n\n# If you prefer to use 'curl' instead of 'wget', you can type:\n#     curl -L https://snpeff.blob.core.windows.net/versions/snpEff_latest_core.zip &gt; snpEff_latest_core.zip\n\n# Install\nunzip snpEff_latest_core.zip\n</code></pre>"},{"location":"snpeff/running/#basic-example-annotate-using-snpeff","title":"Basic example: Annotate using SnpEff","text":"<p>Let's assume you have a VCF file and you want to annotate the variants in that file. An example file is provided in <code>examples/test.chr22.vcf</code> (this data is from the 1000 Genomes project, so the reference genome is the human genome GRCh37).</p> <p>You can annotate the file by running the following command (as an input, we use a Variant Call Format (VCF) file available in SnpEff's <code>examples</code> directory).</p> <pre><code>java -Xmx8g -jar snpEff.jar GRCh37.75 examples/test.chr22.vcf &gt; test.chr22.ann.vcf\n\n# Here is how the output looks like\n$ head examples/test.chr22.ann.vcf\n##SnpEffVersion=\"4.1 (build 2015-01-07), by Pablo Cingolani\"\n##SnpEffCmd=\"SnpEff  GRCh37.75 examples/test.chr22.vcf \"\n##INFO=&lt;ID=ANN,Number=.,Type=String,Description=\"Functional annotations: 'Allele | Annotation | Annotation_Impact | Gene_Name | Gene_ID | Feature_Type | Feature_ID | Transcript_BioType | Rank | HGVS.c | HGVS.p | cDNA.pos / cDNA.length | CDS.pos / CDS.length | AA.pos / AA.length | Distance | ERRORS / WARNINGS / INFO' \"&gt;\n##INFO=&lt;ID=LOF,Number=.,Type=String,Description=\"Predicted loss of function effects for this variant. Format: 'Gene_Name | Gene_ID | Number_of_transcripts_in_gene | Percent_of_transcripts_affected' \"&gt;\n##INFO=&lt;ID=NMD,Number=.,Type=String,Description=\"Predicted nonsense mediated decay effects for this variant. Format: 'Gene_Name | Gene_ID | Number_of_transcripts_in_gene | Percent_of_transcripts_affected' \"&gt;\n#CHROM  POS ID  REF ALT QUAL    FILTER  INFO\n22  17071756    .   T   C   .   .   ANN=C|3_prime_UTR_variant|MODIFIER|CCT8L2|ENSG00000198445|transcript|ENST00000359963|protein_coding|1/1|c.*11A&gt;G|||||11|,C|downstream_gene_variant|MODIFIER|FABP5P11|ENSG00000240122|transcript|ENST00000430910|processed_pseudogene||n.*397A&gt;G|||||4223|\n22  17072035    .   C   T   .   .   ANN=T|missense_variant|MODERATE|CCT8L2|ENSG00000198445|transcript|ENST00000359963|protein_coding|1/1|c.1406G&gt;A|p.Gly469Glu|1666/2034|1406/1674|469/557||,T|downstream_gene_variant|MODIFIER|FABP5P11|ENSG00000240122|transcript|ENST00000430910|processed_pseudogene||n.*397G&gt;A|||||3944|\n22  17072258    .   C   A   .   .   ANN=A|missense_variant|MODERATE|CCT8L2|ENSG00000198445|transcript|ENST00000359963|protein_coding|1/1|c.1183G&gt;T|p.Gly395Cys|1443/2034|1183/1674|395/557||,A|downstream_gene_variant|MODIFIER|FABP5P11|ENSG00000240122|transcript|ENST00000430910|processed_pseudogene||n.*397G&gt;T|||||3721|\n22  17072674    .   G   A   .   .   ANN=A|missense_variant|MODERATE|CCT8L2|ENSG00000198445|transcript|ENST00000359963|protein_coding|1/1|c.767C&gt;T|p.Pro256Leu|1027/2034|767/1674|256/557||,A|downstream_gene_variant|MODIFIER|FABP5P11|ENSG00000240122|transcript|ENST00000430910|processed_pseudogene||n.*397C&gt;T|||||3305|\n</code></pre> <p>As you can see, SnpEff added functional annotations in the <code>ANN</code> info field (eigth column in the VCF output file).</p> <p>Details about the 'ANN' field format can be found in the ANN Field section and in VCF annotation about standard 'ANN' field. Note: Older SnpEff version used 'EFF' field (details about the 'EFF' field format can be found in the EFF Field section).</p> <p>You can also annotate using the \"verbose\" mode (command line option <code>-v</code>), this makes SnpEff to show a lot of information which can be useful for debugging.</p> <p>Here output is edited for brevity:</p> <pre><code>$ java -Xmx8g -jar snpEff.jar -v GRCh37.75 examples/test.chr22.vcf &gt; test.chr22.ann.vcf\n\n00:00:00.000    Reading configuration file 'snpEff.config'. Genome: 'GRCh37.75'\n00:00:00.434    done\n00:00:00.434    Reading database for genome version 'GRCh37.75' from file '/home/pcingola/snpEff_v4_0/./data/GRCh37.75/snpEffectPredictor.bin' (this might take a while)\n00:00:00.434    Database not installed\n    Attempting to download and install database 'GRCh37.75'\n00:00:00.435    Reading configuration file 'snpEff.config'. Genome: 'GRCh37.75'\n00:00:00.653    done\n00:00:00.654    Downloading database for 'GRCh37.75'\n00:00:00.655    Connecting to http://downloads.sourceforge.net/project/snpeff/databases/v4_0/snpEff_v4_0_GRCh37.75.zip\n00:00:01.721    Local file name: 'snpEff_v4_0_GRCh37.75.zip'\n.............................................\n00:01:31.595    Download finished. Total 177705174 bytes.\n00:01:31.597    Extracting file 'data/GRCh37.75/motif.bin' to '/home/pcingola/snpEff_v4_0/./data/GRCh37.75/motif.bin'\n00:01:31.597    Creating local directory: '/home/pcingola/snpEff_v4_0/./data/GRCh37.75'\n00:01:31.652    Extracting file 'data/GRCh37.75/nextProt.bin'\n00:01:31.707    Extracting file 'data/GRCh37.75/pwms.bin'\n00:01:31.707    Extracting file 'data/GRCh37.75/regulation_CD4.bin'\n...\n00:01:32.038    Extracting file 'data/GRCh37.75/snpEffectPredictor.bin'\n00:01:32.881    Unzip: OK\n00:01:32.881    Done\n00:01:32.881    Database installed.\n00:01:58.779    done\n00:01:58.813    Reading NextProt database from file '/home/pcingola/snpEff_v4_0/./data/GRCh37.75/nextProt.bin'\n00:02:01.448    NextProt database: 523361 markers loaded.\n00:02:01.448    Adding transcript info to NextProt markers.\n00:02:02.180    NextProt database: 706289 markers added.\n00:02:02.181    Loading Motifs and PWMs\n00:02:02.181        Loading PWMs from : /home/pcingola/snpEff_v4_0/./data/GRCh37.75/pwms.bin\n00:02:02.203        Loading Motifs from file '/home/pcingola/snpEff_v4_0/./data/GRCh37.75/motif.bin'\n00:02:02.973        Motif database: 284122 markers loaded.\n00:02:02.973    Building interval forest\n00:02:41.857    done.\n00:02:41.858    Genome stats :\n#-----------------------------------------------\n# Genome name                : 'Homo_sapiens'\n# Genome version             : 'GRCh37.75'\n# Has protein coding info    : true\n# Genes                      : 63677\n# Protein coding genes       : 23172\n#-----------------------------------------------\n# Transcripts                : 215170\n# Avg. transcripts per gene  : 3.38\n#-----------------------------------------------\n# Checked transcripts        :\n#               AA sequences : 104254 ( 114.79% )\n#              DNA sequences : 179360 ( 83.36% )\n#-----------------------------------------------\n# Protein coding transcripts : 90818\n#              Length errors :  14349 ( 15.80% )\n#  STOP codons in CDS errors :     39 ( 0.04% )\n#         START codon errors :   8721 ( 9.60% )\n#        STOP codon warnings :  21788 ( 23.99% )\n#              UTR sequences :  87724 ( 40.77% )\n#               Total Errors :  21336 ( 23.49% )\n#-----------------------------------------------\n# Cds                        : 792087\n# Exons                      : 1306656\n# Exons with sequence        : 1306656\n# Exons without sequence     : 0\n# Avg. exons per transcript  : 6.07\n# WARNING!                   : Mitochondrion chromosome 'MT' does not have a mitochondrion codon table (codon table = 'Standard'). You should update the config file.\n#-----------------------------------------------\n# Number of chromosomes      : 297\n# Chromosomes names [sizes]  :\n#       'HG1292_PATCH' [250051446]\n#       'HG1287_PATCH' [249964560]\n#       'HG1473_PATCH' [249272860]\n#       'HG1471_PATCH' [249269426]\n#       'HSCHR1_1_CTG31' [249267852]\n#       'HSCHR1_2_CTG31' [249266025]\n#       'HSCHR1_3_CTG31' [249262108]\n#       'HG999_2_PATCH' [249259300]\n#       'HG989_PATCH' [249257867]\n#       'HG999_1_PATCH' [249257505]\n#       'HG1472_PATCH' [249251918]\n#       '1' [249250621]\n#       'HG1293_PATCH' [249140837]\n#       'HG686_PATCH' [243297375]\n#       'HSCHR2_1_CTG12' [243216362]\n#       'HSCHR2_2_CTG12' [243205453]\n#       'HSCHR2_1_CTG1' [243205406]\n#       'HG953_PATCH' [243199374]\n#       '2' [243199373]\n.....\n.....\n#-----------------------------------------------\n\n00:02:59.416    Predicting variants\n\nWARNINGS: Some warning were detected\nWarning type    Number of warnings\nWARNING_TRANSCRIPT_INCOMPLETE   8215\nWARNING_TRANSCRIPT_NO_START_CODON   3483\n\n\n00:03:04.327    Creating summary file: snpEff_summary.html\n00:03:04.891    Creating genes file: snpEff_genes.txt\n00:03:17.334    done.\n00:03:17.336    Logging\n00:03:18.337    Checking for updates...\n</code></pre> <p>Notice how SnpEff automatically downloads and installs the database. Next time SnpEff will use the local version, so the installation step is only done once.</p> <p>The annotated variants will be in the new file \"test.chr22.ann.vcf\".</p> <p>Warning</p> <p>SnpEff creates a file called \"snpEff_summary.html\" showing basic statistics about the analyzed variants. Take a quick look at it.</p> <p>Info</p> <p>We used the java parameter -Xmx8g to increase the memory available to the Java Virtual Machine to 4G. SnpEff's human genome database is large and it has to be loaded into memory. If your computer doesn't have at least 4G of memory, you probably won't be able to run this example.</p> <p>Info</p> <p>If you are running SnpEff from a directory different than the one it was installed, you will have to specify where the config file is. This is done using the '-c' command line option:</p> <pre><code>java -Xmx8g -jar snpEff.jar -c path/to/snpEff/snpEff.config -v GRCh37.75 test.chr22.vcf &gt; test.chr22.ann.vcf\n</code></pre>"},{"location":"snpeff/running/#detailed-examples","title":"Detailed examples","text":"<p>Take a look at several detailed examples in our examples page.</p>"},{"location":"snpeff/running/#specify-a-configuration-file","title":"Specify a configuration file","text":"<p>Sometimes you need to specify the path to the config file. For instance, when you run SnpEff from a different directory than your install directory, you have to specify where the config file is located using the '-c' command line option.</p> <pre><code>java -Xmx8g path/to/snpEff/snpEff.jar -c path/to/snpEff/snpEff.config GRCh37.75 path/to/snps.vcf\n</code></pre> <p>Info</p> <p>Since version 4.1B, you can use the <code>-configOption</code> command line option to override any value in the config file</p>"},{"location":"snpeff/running/#java-memory-options","title":"Java memory options","text":"<p>By default the amount of memory set by a java process is set too low. If you don't assign more memory to the process, you will most likely have an \"OutOfMemory\" error.</p> <p>You should set the amount of memory in your java virtual machine to, at least, 2 Gb. This can be easily done using the Java command line option <code>-Xmx</code>. E.g. In this example I use 4Gb:</p> <pre><code># Run using 4 Gb of memory\njava -Xmx8g snpEff.jar hg19 path/to/your/files/snps.vcf\n</code></pre> <p>Note: There is no space between <code>-Xmx</code> and <code>4G</code>.</p>"},{"location":"snpeff/running/#running-snpeff-in-the-cloud","title":"Running SnpEff in the Cloud","text":"<p>You can run SnpEff in a \"the Cloud\" exactly the same way as running it on your local computer. You should not have any problems at all.</p> <p>Here is an example of installing it and running it on an Amazon EC2 instance (virtual machine):</p> <p><pre><code>$ ssh -i ./aws_amazon/my_secret_key.pem ec2-user@ec2-54-234-14-244.compute-1.amazonaws.com\n\n\n       __|  __|_  )\n       _|  (     /   Amazon Linux AMI\n      ___|\\___|___|\n\n\n[ec2-user@ip-10-2-202-163 ~]$ wget https://snpeff.blob.core.windows.net/versions/snpEff_latest_core.zip\n[ec2-user@ip-10-2-202-163 ~]$ unzip snpEff_latest_core.zip\n[ec2-user@ip-10-2-202-163 ~]$ cd snpEff/\n[ec2-user@ip-10-2-202-163 snpEff]$ java -jar snpEff.jar download -v hg19\n00:00:00.000    Downloading database for 'hg19'\n...\n00:00:36.340    Done\n[ec2-user@ip-10-2-202-163 snpEff]$ java -Xmx8g -jar snpEff.jar dump -v hg19 &gt; /dev/null\n00:00:00.000    Reading database for genome 'hg19' (this might take a while)\n00:00:20.688    done\n00:00:20.688    Building interval forest\n00:00:33.110    Done.\n</code></pre> As you can see, it's very simple.</p>"},{"location":"snpeff/running/#loading-the-database","title":"Loading the database","text":"<p>One of the first thins SnpEff has to do is to load the database. Usually it takes from a few seconds to a couple of minutes, depending on database size. Complex databases, like human, require more time to load. After the database is loaded, SnpEff can analyze thousands of variants per second.</p>"},{"location":"snpeff/running/#command-line-vs-web-interface","title":"Command line vs Web interface","text":"<p>In order to run SnpEff you need to be comfortable running command from a command line terminal. If you are not, then it is probably a good idea to ask you systems administrator to install a Galaxy server and use the web interface. You can also use the open Galaxy server, but functionality may be limited and SnpEff versions may not be updated frequently.</p>"},{"location":"snpeff/troubleshooting/","title":"Troubleshooting","text":"<p>Some common problems</p>"},{"location":"snpeff/troubleshooting/#chromosome-not-found","title":"Chromosome not found","text":"<p>Warning</p> <p>This is by far the most common problem. It means that the input VCF file has chromosome names that do not match SnpEff's database and don't match reference genome either, since SnpEff's database are created using reference genome chromosome names.</p> <p>The solution is simple: fix your VCF file to use standard chromosome names. You can see which chromosome names are used by SnpEff simply by using the <code>-v</code> (verbose) command line option. This shows all chromosome names and their respective lengths. Notice the last line (\"Chromosomes names [sizes]\"): <pre><code>$ java -Xmx8g -jar snpEff.jar -v GRCh37.75 examples/test.chr22.vcf &gt; test.chr22.ann.vcf\n00:00:00.000    Reading configuration file 'snpEff.config'. Genome: 'GRCh37.75'\n...\n# Number of chromosomes      : 297\n# Chromosomes names [sizes]  :\n#       'HG1292_PATCH' [250051446]\n#       'HG1287_PATCH' [249964560]\n#       'HG1473_PATCH' [249272860]\n#       'HG1471_PATCH' [249269426]\n#       'HSCHR1_1_CTG31' [249267852]\n#       'HSCHR1_2_CTG31' [249266025]\n#       'HSCHR1_3_CTG31' [249262108]\n#       'HG999_2_PATCH' [249259300]\n#       'HG989_PATCH' [249257867]\n#       'HG999_1_PATCH' [249257505]\n#       'HG1472_PATCH' [249251918]\n#       '1' [249250621]\n#       '2' [243199373]\n#       '3' [198022430]\n#       '4' [191154276]\n#       '5' [180915260]\n#       '6' [171115067]\n#       '7' [159138663]\n#       'X' [155270560]\n...\n</code></pre></p>"},{"location":"snpeff/troubleshooting/#apparent-inconsistencies-when-using-ucsc-genome-browser","title":"Apparent inconsistencies when using UCSC genome browser","text":"<p>Warning</p> <p>Usage of hg19 genome is deprecated and discouraged, you should use GRChXX.YY instead (e.g. the latest version at the time of writing is GRCh37.70)</p> <p>Reference sequence and annotations are made for an organism version and sub-version. For examples human genome, version 37, sub-version 70 would be called (GRCh37.70).</p> <p>UCSC doesn't specify sub-version. They just say hg19. This annoying sub-version problem appeared often and, having reproducibility of results in mind, I dropped UCSC annotations in favor of ENSEMBL ones (they have clear versioning).</p>"},{"location":"snpeff/troubleshooting/#snpeff-reporting-an-effect-that-doesnt-match-ensembls-web-page","title":"SnpEff reporting an effect that doesn't match ENSEMBL's web page","text":"<p>Please remember that databases are updated often (e.g. by ENSEMBL), so if you are using an old database, you might get different effects.</p> <p>For example, this transcript ENST00000487462 changed from protein_coding in GRCh37.63 <pre><code>1       protein_coding  exon    1655388 1655458 .       -       .        gene_id \"ENSG00000008128\"; transcript_id \"ENST00000487462\"; exon_number \"1\"; gene_name \"CDK11A\"; transcript_name \"CDK11A-013\";\n1       protein_coding  exon    1653905 1654270 .       -       .        gene_id \"ENSG00000008128\"; transcript_id \"ENST00000487462\"; exon_number \"2\"; gene_name \"CDK11A\"; transcript_name \"CDK11A-013\";\n</code></pre> ...to processed_transcript in GRCh37.64: <pre><code>1       processed_transcript    exon    1655388 1655458 .       -       .        gene_id \"ENSG00000008128\"; transcript_id \"ENST00000487462\"; exon_number \"1\"; gene_name \"CDK11A\"; gene_biotype \"protein_coding\"; transcript_name \"CDK11A-013\";\n1       processed_transcript    exon    1653905 1654270 .       -       .        gene_id \"ENSG00000008128\"; transcript_id \"ENST00000487462\"; exon_number \"2\"; gene_name \"CDK11A\"; gene_biotype \"protein_coding\"; transcript_name \"CDK11A-013\";\n</code></pre></p> <p>This means that you'll get different results for this transcript using sub-version 63 or 64. I assume that latest versions are improved, so I always encourage to upgrade.</p> <p>Sometimes it might even be the case that latest released database and the one shown on the web interface may be out of sync.</p>"},{"location":"snpeff/troubleshooting/#snpeff-reports-a-synonymous-and-a-non_synonymous-effect-on-the-same-gene","title":"SnpEff reports a SYNONYMOUS and a NON_SYNONYMOUS effect on the same gene","text":"<p>This is not a bug. It is not uncommon for a gene to have more than one transcript (e.g. in human most genes have multiple transcripts). A variant (e.g. a SNP) might affect different transcripts in different ways, as a result of different reading frames.</p> <p>For instance: <pre><code>chr5 137622242 . C T . . EFF=NON_SYNONYMOUS_CODING(MODERATE|MISSENSE|Gaa/Aaa|E/K|CDC25C|protein_coding|CODING|ENST00000514017|exon_5_137622186_137622319),\n                             SYNONYMOUS_CODING(LOW|SILENT|caG/caA|Q|CDC25C|protein_coding|CODING|ENST00000323760|exon_5_137622186_137622319),\n                             SYNONYMOUS_CODING(LOW|SILENT|caG/caA|Q|CDC25C|protein_coding|CODING|ENST00000348983|exon_5_137622186_137622319),\n                             SYNONYMOUS_CODING(LOW|SILENT|caG/caA|Q|CDC25C|protein_coding|CODING|ENST00000356505|exon_5_137622186_137622319),\n                             SYNONYMOUS_CODING(LOW|SILENT|caG/caA|Q|CDC25C|protein_coding|CODING|ENST00000357274|exon_5_137622186_137622319),\n                             SYNONYMOUS_CODING(LOW|SILENT|caG/caA|Q|CDC25C|protein_coding|CODING|ENST00000415130|exon_5_137622186_137622319),\n                             SYNONYMOUS_CODING(LOW|SILENT|caG/caA|Q|CDC25C|protein_coding|CODING|ENST00000513970|exon_5_137622186_137622319),\n                             SYNONYMOUS_CODING(LOW|SILENT|caG/caA|Q|CDC25C|protein_coding|CODING|ENST00000514555|exon_5_137622186_137622319),\n                             SYNONYMOUS_CODING(LOW|SILENT|caG/caA|Q|CDC25C|protein_coding|CODING|ENST00000534892|exon_5_137622186_137622319)\n</code></pre> in this example (it was divided into multiple lines for legibility), the first transcript ENST0000051401 has a NON_SYNONYMOUS effect, but all other transcripts have a SYNONYMOUS effect.</p>"},{"location":"snpeff/troubleshooting/#counting-total-number-of-effects-of-a-given-type","title":"Counting total number of effects of a given type","text":"<p>Some people try to count the number of effects in a file by doing (assuming we want to count how many MODIFIER effects we have):</p> <pre><code>grep -o MODIFIER output.ann.vcf | wc -l\n</code></pre> <p>This is incorrect because a VCF line can have multiple effects (e.g. when there are multiple transcripts in a gene). A proper way to count effects would be:</p> <pre><code>cat output.ann.vcf \\\n    | cut -f 8 \\\n    | tr \";\" \"\\n\" \\\n    | grep ^EFF= \\\n    | cut -f 2 -d = \\\n    | tr \",\" \"\\n\" \\\n    | grep MODIFIER \\\n    | wc -l\n</code></pre> <p>Brief explanation:</p> Command Meaning <code>cut -f 8</code> Extract INFO fields <code>tr \";\" \"\\n\"</code> Expand each field into one line <code>grep ^EFF=</code> Only keep 'EFF' fields <code>cut -f 2 -d =</code> Keep only the effect data (drop the 'EFF=' part) <code>tr \",\" \"\\n\"</code> Expand effects to multiple lines <code>grep MODIFIER | wc -l</code> Count the ones you want (in this example 'MODIFIER')"},{"location":"snpsift/annotate/","title":"SnpSift Annotate","text":"<p>Annotate using fields from another VCF file (e.g. dbSnp, 1000 Genomes projects, ClinVar, ExAC, etc.).</p>"},{"location":"snpsift/annotate/#typical-usage","title":"Typical usage","text":"<p>This is typically used to annotate IDs and INFO fields from a 'database' VCF file (e.g. dbSnp). Here is an example:</p> <pre><code>java -jar SnpSift.jar annotate dbSnp132.vcf variants.vcf &gt; variants_annotated.vcf\n</code></pre> <p>Important: <code>SnpSift annotate</code> command has different strategies depending on the input VCF file:</p> <ul> <li>Uncomressed VCF If the file is not compressed, it created an index in memory to optimize search. This assumes that both the database and the input VCF files are sorted by position, since it is required by the VCF standard (chromosome sort order can differ between files).</li> <li>Compressed, Tabix indexed It uses the tabix index to speed up annotations.</li> <li>Compressed, NOT Tabix indexed It loads the entire 'database' VCF file into memory, which may be slow or even impractical for large 'database' VCF files.  This allows to annotate using unsorted VCF files.</li> </ul> <p>Note:</p> <ul> <li>By default it adds ALL database INFO fields.</li> <li>You can use the <code>-info</code> command line option if you only want select only a subset of fields from db.vcf file.</li> <li>You can use the <code>-id</code> command line option if you only want to add ID fields (no INFO fields will be added).</li> <li>Using the <code>-exists</code> command line option, you can annotate entries that exists in the 'database' file.</li> </ul> <p>Info</p> <p>DbSnp in VCF format can be downloaded here (GRCh38 coordinates). For other versions, check this link.</p>"},{"location":"snpsift/annotate/#example-1-annotating-id-from-dbsnp","title":"Example 1: Annotating <code>ID</code> from dbSnp","text":"<pre><code>$ cat test.chr22.vcf\n#CHROM  POS         ID           REF  ALT  QUAL   FILTER  INFO\n22      16157571    .            T    G    0.0    FAIL    NS=53\n22      16346045    .            T    C    0.0    FAIL    NS=244\n22      16350245    .            C    A    0.0    FAIL    NS=192\n22      17054103    .            G    A    0.0    PASS    NS=404\n22      17071906    .            A    T    0.0    PASS    NS=464\n22      17072347    .            C    T    0.0    PASS    NS=464\n22      17072394    .            C    G    0.0    PASS    NS=463\n22      17072411    .            G    T    0.0    PASS    NS=464\n\n$ java -jar SnpSift.jar annotate -id db/dbSnp/dbSnp137.20120616.vcf test.chr22.vcf\n#CHROM  POS         ID           REF  ALT  QUAL   FILTER  INFO\n22      16157571    .            T    G    0.0    FAIL    NS=53\n22      16346045    rs56234788   T    C    0.0    FAIL    NS=244\n22      16350245    rs2905295    C    A    0.0    FAIL    NS=192\n22      17054103    rs4008588    G    A    0.0    PASS    NS=404\n22      17071906    .            A    T    0.0    PASS    NS=464\n22      17072347    rs139948519  C    T    0.0    PASS    NS=464\n22      17072394    .            C    G    0.0    PASS    NS=463\n22      17072411    rs41277596   G    T    0.0    PASS    NS=464\n</code></pre>"},{"location":"snpsift/annotate/#example-2-annotating-id-and-all-info-fields-from-dbsnp","title":"Example 2: Annotating <code>ID</code> and all <code>INFO</code> fields from dbSnp","text":"<p>(VCF headers not shown for brevity): <pre><code>$ cat test.chr22.vcf\n#CHROM  POS         ID           REF  ALT  QUAL   FILTER  INFO\n22      16157571    .            T    G    0.0    FAIL    NS=53\n22      16346045    .            T    C    0.0    FAIL    NS=244\n22      16350245    .            C    A    0.0    FAIL    NS=192\n22      17054103    .            G    A    0.0    PASS    NS=404\n22      17071906    .            A    T    0.0    PASS    NS=464\n22      17072347    .            C    T    0.0    PASS    NS=464\n22      17072394    .            C    G    0.0    PASS    NS=463\n22      17072411    .            G    T    0.0    PASS    NS=464\n\n$ java -jar SnpSift.jar annotate db/dbSnp/dbSnp137.20120616.vcf test.chr22.vcf\n#CHROM  POS         ID           REF  ALT  QUAL   FILTER  INFO\n22      16157571    .            T    G    0.0    FAIL    NS=53\n22      16346045    rs56234788   T    C    0.0    FAIL    NS=244;RSPOS=16346045;GMAF=0.162248628884826;dbSNPBuildID=129;SSR=0;SAO=0;VP=050100000000000100000100;WGT=0;VC=SNV;SLO;GNO\n22      16350245    rs2905295    C    A    0.0    FAIL    NS=192;RSPOS=16350245;GMAF=0.230804387568556;dbSNPBuildID=101;SSR=1;SAO=0;VP=050000000000000100000140;WGT=0;VC=SNV;GNO\n22      17054103    rs4008588    G    A    0.0    PASS    NS=404;RSPOS=17054103;GMAF=0.123400365630713;dbSNPBuildID=108;SSR=0;SAO=0;VP=050100000000070010000100;WGT=0;VC=SNV;SLO;VLD;G5A;G5;KGPilot123\n22      17071906    .            A    T    0.0    PASS    NS=464\n22      17072347    rs139948519  C    T    0.0    PASS    NS=464;RSPOS=17072347;dbSNPBuildID=134;SSR=0;SAO=0;VP=050200000004040010000100;WGT=0;VC=SNV;S3D;ASP;VLD;KGPilot123\n22      17072394    .            C    G    0.0    PASS    NS=463\n22      17072411    rs41277596   G    T    0.0    PASS    NS=464;RSPOS=17072411;GMAF=0.00411334552102377;dbSNPBuildID=127;SSR=0;SAO=0;VP=050200000008040010000100;GENEINFO=CCT8L2:150160;WGT=0;VC=SNV;S3D;CFL;VLD;KGPilot123\n</code></pre></p>"},{"location":"snpsift/casecontrol/","title":"SnpSift CaseControl","text":"<p>Allows you to count how many samples are in 'case' and 'control' groups.</p>"},{"location":"snpsift/casecontrol/#typical-usage","title":"Typical usage","text":"<p>This command counts the number of 'homozygous', 'heterozygous' and 'total' variants in a case and control groups and performs some basic pValue calculation using Fisher exact test and Cochran-Armitage test.</p> <p>Case and Control groups can be defined either by a command line string or a TFAM file (see PLINK's documentation).</p> <p>Case/Control command line string containing plus and minus symbols {'+', '-', '0'} where '+' is case, '-' is control and '0' is neutral (ignored).</p> <p>E.g. We have ten samples, which means ten genotype columns in the VCF file. The first four are 'cases', the fifth one is 'neutral', and the last five are 'control'. So the description string would be \"++++0-----\" (note that the following output has been edited, only counts are shown, no pValues): <pre><code>$ java -jar SnpSift.jar caseControl \"++++0-----\" cc.vcf\n#CHROM  POS    ID  REF  ALT  QUAL  FILTER  INFO                                FORMAT  Sample_01  Sample_02  Sample_03  Sample_04  Sample_05  Sample_06  Sample_07  Sample_08  Sample_09  Sample_10\n1       69496  .   G    A    .     PASS    AF=0.01;Cases=1,2,4;Controls=2,2,6  GT      0/1        1/1        1/0        0/0        0/0        0/1        1/1        1/1        1/0        0/0\n</code></pre> Cases genotypes are samples 1 to 4 : 0/1, 1/1, 1/0 and 0/0. So there are 1 homozygous, 2 heterozygous, and a total of 4 variants (2 * 1 + 1 * 2 = 4). Thus the annotation is <code>Cases=1,2,4</code></p> <p>Control genotypes are samples 6 to 10 : 0/1, 1/1, 1/1, 1/0 and 0/0. So there are 2 homozygous, 2 heterozygous, and a total of 6 variants (2 * 2 + 1 * 2 = 6) Thus the annotation is <code>Controls=2,2,6</code></p> <p>Info</p> <p>You can use the <code>-tfam</code> command line option to specify a TFAM file. Case, control from are read from phenotype field of a TFAM file (6th column). Phenotype order in TFAM files do not need to match VCF sample order (sample IDs are used). Phenotype column should be coded as {0,1,2} meaning {Missing, Control, Case} respectively. See PLINK's reference for details about TFAM file format.</p> <p>Info</p> <p>You can use the <code>-name nameString</code> command line option to add name to the INFO tags.</p> <p>This can be used to count different case/control groups in the same dataset (e.g. multiple phenotypes)</p> <pre><code>$  java -jar SnpSift.jar caseControl -name \"_MY_GROUP\" \"++++0-----\" cc.vcf \\\n| java -jar SnpSift.jar caseControl -name \"_ANOTHER_GROUP\" \"+-+-+-+-+-\" -\n\n#CHROM  POS    ID  REF  ALT  QUAL  FILTER  INFO                                                                                                         FORMAT  Sample_01  Sample_02  Sample_03  Sample_04  Sample_05  Sample_06  Sample_07  Sample_08  Sample_09  Sample_10\n1       69496  .   G    A    .     PASS    AF=0.01;Cases_MY_GROUP=1,2,4;Controls_MY_GROUP=2,2,6;Cases_ANOTHER_GROUP=1,3,5;Controls_ANOTHER_GROUP=2,1,5  GT      0/1        1/1        1/0        0/0        0/0        0/1        1/1        1/1        1/0        0/0\n</code></pre>"},{"location":"snpsift/casecontrol/#p-values","title":"p-values","text":"<p>SnpSift caseControl calculates the p-value using different models: dominant, recessive, allelic and co-dominant.</p> <p>Info</p> <p>When we say we use Fisher exact test, it means that we use the real Fisher exact test calculation, not approximations (like Chi-Square approximations). So the p-values should be correct even for low counts on any of the values in the contingency tables. Approximations tend to be wrong when any count in a contingency table is below 5. You should not see that problem here.</p> <p>Models:</p> <ul> <li> <p>Dominant model (<code>CC_DOM</code>): A 2 by 2 contingency table is created:</p> -- Alt (A/a + a/a) Ref (A/A) Cases N11 N12 Controls N21 N22 <p>This means that the first column are the number of samples that have ANY non-reference: either 1 (heterozygous) or 2 (homozygous). Fisher exact test is used to calculate the p-value.</p> </li> <li> <p>Recessive model (<code>CC_REC</code>): A 2 by 2 contingency table is created:</p> -- Alt (a/a) Ref + Het (A/A + A/a) Cases N11 N12 Controls N21 N22 <p>This means that the first column are the number of samples that have both non-reference chromosomes: homozygous ALT. Fisher exact test is used to calculate the p-value.</p> </li> <li> <p>Allelic model (<code>CC_ALL</code>): A 2 by 2 contingency table is created:</p> -- Variants References Cases N11 N12 Controls N21 N22 <p>This means that the first column are the number of non-reference genotypes. For instance homozygous reference samples count as 0, heterozygous count as 1 and homozygous non-reference count as 2. Fisher exact test is used to calculate the p-value.</p> </li> <li> <p>Genotipic / Codominant model (<code>CC_GENO</code>): A 2 by 3 contingency table is created:</p> -- A/A a/A a/a Cases N11 N12 N13 Controls N21 N22 N23 <p>This means that the first column are the number of homozygous reference genotypes. The second column is the number of heterozygous. And the third column is the number of homozygous non-reference.</p> <p>Chi-Square distribution with two degrees of freedom is calculate the p-value.</p> </li> <li> <p>Cochran-Armitage trend model (<code>CC_TREND</code>): A 2 by 3 contingency table is created:</p> -- A/A a/A a/a Cases N11 N12 N13 Controls N21 N22 N23 Weight 0.0 1.0 2.0 <p>This means that the first column are the number of homozygous reference genotypes. The second column is the number of heterozygous. And the third column is the number of homozygous non-reference.</p> <p>Cochran-Armitage test is used to calculate the p-value, using the weights shown in the last row.</p> </li> </ul>"},{"location":"snpsift/concordance/","title":"SnpSift Concordance","text":"<p>Calculate concordance between two VCF files.</p>"},{"location":"snpsift/concordance/#typical-usage","title":"Typical usage","text":"<p>This is typically used when you want to calculate concordance between a genotyping experiment and a sequencing experiment.</p> <p>For instance, you sequenced several samples and, as part of a related experiment or just as quality control, you also genotype the same samples using a genotyping array. Now you want to compare the two experiments. Ideally there would be no difference between the variants from genotyping and sequencing, but this is hardly the case in real world.</p> <p>You can use <code>SnpSift concordance</code> to measure the differences between the two experiments.</p> <p>Warning</p> <p>It is assumed that both VCF files are sorted by chromosome and position.</p> <p>Warning</p> <p>Sample names are defined in '#CHROM' line of the header section. Concordance is calculated only if sample label matches in both files.</p> <p>Example: <pre><code>$ java -Xmx1g -jar SnpSift.jar concordance -v genotype.vcf sequencing.vcf &gt; concordance.txt\n00:00:00.000    Indexing file 'genotype.vcf'\n        index:  MT  460030998\n        index:  1   19705\n                1 / 2   45170805 / 45174315\n                2 / 3   77052081 / 77055591\n                3 / 4   104065531 / 104069041\n                4 / 5   124098372 / 124101881\n                5 / 6   146535292 / 146538802\n                6 / 7   184793526 / 184797035\n                7 / 8   206156508 / 206160018\n                8 / 9   223072816 / 223076326\n                9 / 10  242315995 / 242319505\n                10 / 11 261053789 / 261057299\n                11 / 12 290190553 / 290194063\n                12 / 13 312869636 / 312873146\n                13 / 14 321966539 / 321970049\n                14 / 15 336131317 / 336134827\n                15 / 16 350871669 / 350875179\n                16 / 17 368900523 / 368904032\n                17 / 18 391305860 / 391309369\n                18 / 19 398932237 / 398935747\n                19 / 20 425219198 / 425222708\n                20 / 21 437022008 / 437025517\n                21 / 22 442563678 / 442567188\n                22 / X  451783418 / 451786927\n                X / Y   459553691 / 459557200\n                Y / MT  459588787 / 459592296\n00:00:01.137    Open VCF file 'genotype.vcf'\n00:00:01.141    Open VCF file 'sequencing.vcf'\n00:00:01.176    Chromosome: '1'\n00:00:02.127        1:1550992   1:1528859\n00:00:02.739        1:2426313   1:2389636\n...\n00:02:13.780        1:248487058 1:248471945\n</code></pre></p>"},{"location":"snpsift/concordance/#output","title":"Output","text":"<p>SnpSift's concordance output is written to STDOUT and two files. For instance the command <code>java -jar SnpSift.jar concordance -v genotype.vcf sequencing.vcf</code> will write:</p> <ul> <li>Concordance by variant: Written to STDOUT</li> <li>Concordance by sample: Written to <code>concordance_genotyping_sequencing.by_sample.txt</code></li> <li>Summary:  Written to <code>concordance_genotyping_sequencing.summary.txt</code></li> </ul>"},{"location":"snpsift/concordance/#concordance-by-variant","title":"Concordance by variant","text":"<p>This sections is a table showing concordance details for every entry (chr:position) that both files have in common. E.g.: <pre><code>chr  pos     ref  alt  change_0_0  change_0_1  change_0_2  change_1_0  change_1_1  change_1_2  change_2_0  change_2_1  change_2_2  missing_genotype_genotype  missing_genotype_sequencing\n1    865584  G    A        508         0           0           0           2           0           0           0           0           0                                 5\n1    865625  G    A        512         0           0           0           1           0           0           0           0           0                                 1\n1    865628  G    A        511         0           0           0           2           0           0           0           0           0                                 1\n1    865665  G    A        495         0           0           0           4           0           0           0           0           0                                17\n1    865694  C    T        428         0           0           0          82           0           0           0           4           0                                 0\n</code></pre> Each genotype is coded according to the number of ALT variants. i.e.:</p> <ul> <li>'0/0' (homozygous reference) is coded as '0'</li> <li>'0/1' or '1/0' (heterozygous ALT) coded as '1'</li> <li>'1/1' (homozygous ALT) is coded as '1'</li> </ul> <p>So the column \"change_X_Y\" on the table shows how many genotypes coded 'X' in the first VCF, changed to 'Y' in the second VCF. For example, 'change_0_1' counts the number of \"homozygous reference in genotype.vcf\" that changed to \"heterozygous ALT in sequencing.vcf\". Or 'change_2_2' counts the number of \"homozygous ALT\" that did not change (in both files they are '2').</p> <p>A few rules apply:</p> <ul> <li>If a VCF entry (chr:pos) is present in only one of the files, obviously we cannot calculate concordance, so it is ignored.</li> <li>If a VCF entry (chr:pos) has more than one ALT it is ignored. This means that non-biallelic variants are ignored.</li> <li>If, for the same chr:pos, REF field is different between the two files, then the entry is ignored.</li> <li>If, for the same chr:pos, ALT field is different between the two files, then the entry is ignored.</li> </ul>"},{"location":"snpsift/concordance/#concordance-by-sample","title":"Concordance by sample","text":"<p>This section shows details in the same format as the previous section. Here, concordance metrics are shown aggregated for each sample. E.g.: <pre><code># Totals by sample\nsample  change_0_0  change_0_1  change_0_2  change_1_0  change_1_1  change_1_2  change_2_0  change_2_1  change_2_2  missing_genotype_genotype  missing_genotype_sequencing\nID_003  79          0           0           1           8           0           0           0           2           1                          1\nID_004  83          0           0           1           2           0           0           0           5           0                          1\nID_005  80          0           0           0           7           0           0           0           4           1                          0\nID_006  79          0           0           0           5           0           0           0           6           0                          2\nID_008  81          0           0           0           4           0           0           0           4           0                          3\nID_009  80          0           0           0           7           0           0           0           3           0                          2\nID_012  74          0           0           0           10          0           0           0           1           0                          7\nID_013  79          1           0           0           4           0           0           0           5           0                          3\nID_018  84          0           0           0           5           0           0           0           3           0                          0\n...\n</code></pre></p>"},{"location":"snpsift/concordance/#summary","title":"Summary","text":"<p>Summary file contains overall information and errors. Here is an example of a summary file: <pre><code>$ cat concordance_genotyping_sequencing.summary.txt\nNumber of samples:\n    929    File genotype.vcf\n    583    File sequencing.vcf\n    514    Both files\nErrors:\n        ALT field does not match    19\n</code></pre> The header indicates that one file ('genotype.vcf') has 929 samples, the other file has 583 and there are 514 matching sample IDs in both files.</p> <p>At the end of the file, a footer shows the total for each column followed by number of possible errors (or mismatches). In this case the were 19 ALT fields that did not match between 'genotype.vcf' and 'sequencing.vcf'. This can happen, for instance, when there are INDELs, which cannot be detected by genotyping arrays.</p> <p>Info</p> <p>Summary messages are shown to STDERR if you use verbose mode (command line option <code>-v</code>).</p>"},{"location":"snpsift/dbnsfp/","title":"SnpSift dbNSFP","text":"<p>The dbNSFP is an integrated database of functional predictions from multiple algorithms (SIFT, Polyphen2, LRT and MutationTaster, PhyloP and GERP++, etc.).</p>"},{"location":"snpsift/dbnsfp/#typical-usage","title":"Typical usage","text":"<p>One of the main advantages is that you can annotate using multiple prediction tools with just one command. This allows for faster annotations. Here is the link to dbNSFP database website for more details.</p> <p>Database: In order to annotate using dbNSFP, you need to download the dbNSFP database and the index file. dbNSFP is large (several GB) so it might take a while to download it. The database is compressed (block-gzip) and tabix-indexed, so two files are required (the data .gz file and the .gz.tbi index file).</p> <p>You can download the files from SnpEff's site (remember that you need both the database and the index file):</p> <ul> <li>GRCh37 / hg19 (dbNSFP Academic):<ul> <li>Database. Save file as <code>dbNSFP.txt.gz</code></li> <li>Index. Save file as <code>dbNSFP.txt.gz.tbi</code></li> </ul> </li> <li>GRCh38 / hg38  (dbNSFP Academic):<ul> <li>Database. Save file as <code>dbNSFP.txt.gz</code></li> <li>Index. Save file as <code>dbNSFP.txt.gz.tbi</code></li> </ul> </li> </ul>"},{"location":"snpsift/dbnsfp/#dbnsfp-annotation-example","title":"dbNSFP Annotation example","text":"<p>Here is a full example how to perform annotations:</p> <pre><code># Annotate using dbNSFP\n# Note that the first time you run the command, it will attempt to download the dbNSFP database.\njava -jar SnpSift.jar dbnsfp -v myFile.vcf &gt; myFile.annotated.vcf\n</code></pre> <p>Info</p> <p>You can now specify which fields you want to use for annotation using the <code>-f</code> command line option followed by a comma separated list of field names. Defaults fields are shown when running the command without any arguments <code>java -jar SnpSift.jar dbNSFP</code></p> <p>If your dbNSFP file is not in the 'default' path (where SnpEff expects it), you can specify the path to your dbNSFP file using the <code>-db</code> command line option:</p> <pre><code># Annotate using dbNSFP\njava -jar SnpSift.jar dbnsfp -v -db path/to/my/dbNSFP2.9.txt.gz myFile.vcf &gt; myFile.annotated.vcf\n</code></pre>"},{"location":"snpsift/dbnsfp/#building-dbnsfp-for-developers","title":"Building dbNSFP (for developers)","text":"<p>Info</p> <p>Users do NOT need to do this, since a pre-indexed database can be downloaded from SnpSift's site (see previous sub-section). These instructions are mostly for developers.</p> <p>You can also create dbNSFP files yourself, downloading the files from DbNsfp site. Two files are required:</p> <ul> <li>A block-gzipped database file</li> <li>The corresponding tabix index for the database file.</li> </ul> <p>Creating a file that SnpSift can use is simple, just follow this guideline: <pre><code># Download dbNSFP database\n$ wget http://dbnsfp.houstonbioinformatics.org/dbNSFPzip/dbNSFP2.9.zip\n\n# Uncompress\n$ unzip dbNSFP2.9.zip\n\n# Create a single file version\n$ (head -n 1 dbNSFP2.9_variant.chr1 ; cat dbNSFP2.9_variant.chr* | grep -v \"^#\" ) &gt; dbNSFP2.9.txt\n\n# Compress using block-gzip algorithm\nbgzip dbNSFP2.9.txt\n\n# Create tabix index\ntabix -s 1 -b 2 -e 2 dbNSFP2.9.txt.gz\n</code></pre></p> <p>Building dbNSFP for hg19/GRCh37 using dbNSFP 3.X:</p> <p>Latest dbNSFP versions (3.X) are based on GRCh38/hg38 genomic coordinates. In order to use the latest dbNSFP databses with GRCh37/hg19 genome versions you need to create a new dbNSFP file with the right coordinates. Fortunately, dbNSFP 3.X provides GRCh37/hg19 coordinates, so we only need to swap coordinates and sort by genomic position. You can easily do this by using the <code>dbNSFP_sort.pl</code> script (you can find it here) by running something like the following command lines: <pre><code># Set to your downloaded dbNSFP version\nversion=\"3.2a\"\n\n# Replace coordinates by columns 7 and 8 (hg19 coordinates) and sort by those coordinates\ncat dbNSFP${version}_variant.chr* \\\n    | $HOME/snpEff/scripts_build/dbNSFP_sort.pl 7 8 \\\n    &gt; dbNSFP${version}_hg19.txt\n\n# Compress and index\nbgzip dbNSFP${version}_hg19.txt\ntabix -s 1 -b 2 -e 2 dbNSFP${version}_hg19.txt.gz\n</code></pre></p>"},{"location":"snpsift/extractfields/","title":"SnpSift Extract Fields","text":"<p>Extract fields from a VCF file to a TXT, tab separated format, that you can easily load in R, XLS, etc.</p>"},{"location":"snpsift/extractfields/#typical-usage","title":"Typical usage","text":"<p>You can also use sub-fields and genotype fields / sub-fields such as:</p> <ul> <li>Standard VCF fields:<ul> <li><code>CHROM</code></li> <li><code>POS</code></li> <li><code>ID</code></li> <li><code>REF</code></li> <li><code>ALT</code></li> <li><code>FILTER</code></li> </ul> </li> <li>INFO fields:<ul> <li><code>AF</code></li> <li><code>AC</code></li> <li><code>DP</code></li> <li><code>MQ</code></li> <li>etc. (any info field available)</li> </ul> </li> <li>SnpEff 'ANN' fields:<ul> <li><code>ANN[*].ALLELE</code> (alias GENOTYPE)</li> <li><code>ANN[*].EFFECT</code> (alias ANNOTATION): Effect in Sequence ontology terms (e.g. 'missense_variant', 'synonymous_variant', 'stop_gained', etc.)</li> <li><code>ANN[*].IMPACT:</code> { HIGH, MODERATE, LOW, MODIFIER }</li> <li><code>ANN[*].GENE:</code> Gene name (e.g. 'PSD3')</li> <li><code>ANN[*].GENEID:</code> Gene ID</li> <li><code>ANN[*].FEATURE</code></li> <li><code>ANN[*].FEATUREID</code> (alias TRID: Transcript ID)</li> <li><code>ANN[*].BIOTYPE:</code> Biotype, as described by the annotations (e.g. 'protein_coding')</li> <li><code>ANN[*].RANK:</code> Exon or Intron rank (i.e. exon number in a transcript)</li> <li><code>ANN[*].HGVS_C</code> (alias HGVS_DNA, CODON): Variant in HGVS (DNA) notation</li> <li><code>ANN[*].HGVS_P</code> (alias HGVS, HGVS_PROT, AA): Variant in HGVS (protein) notation</li> <li><code>ANN[*].CDNA_POS</code> (alias POS_CDNA)</li> <li><code>ANN[*].CDNA_LEN</code> (alias LEN_CDNA)</li> <li><code>ANN[*].CDS_POS</code> (alias POS_CDS)</li> <li><code>ANN[*].CDS_LEN</code> (alias LEN_CDS)</li> <li><code>ANN[*].AA_POS</code> (alias POS_AA)</li> <li><code>ANN[*].AA_LEN</code> (alias LEN_AA)</li> <li><code>ANN[*].DISTANCE</code></li> <li><code>ANN[*].ERRORS</code> (alias WARNING, INFOS)</li> </ul> </li> <li> <p>SnpEff 'EFF' fields (this is for older SnpEff/SnpSift versions, new version use 'ANN' field):</p> <ul> <li><code>EFF[*].EFFECT</code></li> <li><code>EFF[*].IMPACT</code></li> <li><code>EFF[*].FUNCLASS</code></li> <li><code>EFF[*].CODON</code></li> <li><code>EFF[*].AA</code></li> <li><code>EFF[*].AA_LEN</code></li> <li><code>EFF[*].GENE</code></li> <li><code>EFF[*].BIOTYPE</code></li> <li><code>EFF[*].CODING</code></li> <li><code>EFF[*].TRID</code></li> <li><code>EFF[*].RANK</code></li> </ul> <p>Info</p> <p>You can combine <code>vcfEffOnePerLine.pl</code> script with <code>SnpSift extractFields</code> if you want to have each effect in a separate line.</p> </li> <li> <p>SnpEff 'LOF' fields:</p> <ul> <li><code>LOF[*].GENE</code></li> <li><code>LOF[*].GENEID</code></li> <li><code>LOF[*].NUMTR</code></li> <li><code>LOF[*].PERC</code></li> </ul> </li> <li>SnpEff' NMD' fields:<ul> <li><code>NMD[*].GENE</code></li> <li><code>NMD[*].GENEID</code></li> <li><code>NMD[*].NUMTR</code></li> <li><code>NMD[*].PERC</code></li> </ul> </li> </ul> <p>Warning</p> <p>When using multiple indexes you must remember to use quotes and escape the character in the command line (e.g. <code>\"ANN[*].EFFECT\"</code>). Otherwise, the shell would parse the asterisk changing the expression and producing unexpected results.</p> <p>Info</p> <p>You can use command line option <code>-s</code> to specify multiple field separator and <code>-e</code> to specify how to represent empty fields.</p>"},{"location":"snpsift/extractfields/#example-1-extracting-chromosome-position-id-and-allele-frequency","title":"Example 1: Extracting chromosome, position, ID and allele frequency","text":"<pre><code>$ java -jar SnpSift.jar extractFields s.vcf CHROM POS ID AF | head\n#CHROM        POS        ID            AF\n1             69134                    0.086\n1             69496      rs150690004   0.001\n1             69511      rs75062661    0.983\n1             69569                    0.538\n1             721559                   0.001\n1             721757                   0.011\n1             846854     rs111957712   0.003\n1             865584     rs148711625   0.001\n1             865625     rs146327803   0.001\n</code></pre>"},{"location":"snpsift/extractfields/#example-2-extracting-genotype-fields","title":"Example 2: Extracting genotype fields","text":"<pre><code>$ java -jar SnpSift.jar extractFields file.vcf \"CHROM\" \"POS\" \"ID\" \"THETA\" \"GEN[0].GL[1]\" \"GEN[1].GL\" \"GEN[3].GL[*]\" \"GEN[*].GT\"\n</code></pre> <p>This means to extract:</p> <ul> <li><code>CHROM</code> <code>POS</code> <code>ID</code>: regular fields (as in the previous example)</li> <li><code>THETA</code> : This one is from INFO</li> <li><code>GEN[0].GL[1]</code> : Second likelihood from first genotype</li> <li><code>GEN[1].GL</code> : The whole GL fields (all entries without separating them)</li> <li><code>GEN[3].GL[*]</code> : All likelihoods form genotype 3 (this time they will be tab separated, as opposed to the previous one).</li> <li><code>GEN[*].GT</code> : Genotype subfields (GT) from ALL samples (tab separated).</li> </ul> <p>The result will look something like: <pre><code>#CHROM  POS     ID              THETA   GEN[0].GL[1]    GEN[1].GL               GEN[3].GL[*]            GEN[*].GT\n1       10583   rs58108140      0.0046  -0.47           -0.24,-0.44,-1.16       -0.48   -0.48   -0.48   0|0     0|0     0|0     0|1     0|0     0|1     0|0     0|0     0|1\n1       10611   rs189107123     0.0077  -0.48           -0.24,-0.44,-1.16       -0.48   -0.48   -0.48   0|0     0|1     0|0     0|0     0|0     0|0     0|0     0|0     0|0\n1       13302   rs180734498     0.0048  -0.58           -2.45,-0.00,-5.00       -0.48   -0.48   -0.48   0|0     0|1     0|0     0|0     0|0     1|0     0|0     0|1     0|0\n1       13327   rs144762171     0.0204  -1.11           -1.97,-0.01,-2.51       -0.48   -0.48   -0.48   0|0     0|1     0|0     0|0     0|0     1|0     0|0     0|0     0|0\n1       13957   rs201747181     0.0100  0               0,0,0                   0       0       0       0|0     0|1     0|0     0|0     0|0     0|0     0|0     0|0     0|0\n1       13980   rs151276478     0.0139  -0.48           -0.48,-0.48,-0.48       -0.48   -0.48   -0.48   0|0     0|0     0|0     0|0     0|0     0|0     0|0     0|0     0|0\n1       30923   rs140337953     0.0162  -0.61           -0.10,-0.69,-2.81       -0.48   -0.48   -0.48   1|1     0|0     0|0     1|1     1|0     0|0     1|1     1|0     1|1\n1       46402   rs199681827     0.0121  0               0,0,0                   0       0       0       0|0     0|0     0|0     0|0     0|0     0|0     0|0     0|0     0|0\n1       47190   rs200430748     0.0153  0               0,0,0                   0       0       0       0|0     0|0     0|0     0|0     0|0     0|0     0|0     0|0     0|0\n</code></pre></p>"},{"location":"snpsift/extractfields/#example-3-extracting-fields-with-multiple-values-in-a-friendlier-format","title":"Example 3: Extracting fields with multiple values in a friendlier format","text":"<p>You can use command line option <code>-s</code> to specify multiple field separator and <code>-e</code> to specify how to represent empty fields.</p> <pre><code>$ java -jar SnpSift.jar extractFields -s \",\" -e \".\" test.chr22.ann.vcf CHROM POS REF ALT \"EFF[*].EFFECT\" \"EFF[*].AA\"\n</code></pre> <p>Notice how we separate same fields using \",\" instead of the default tab using the option <code>-s \",\"</code>, and we use \".\" for empty fields (option <code>-e \".\"</code>).</p> <p>The results is: <pre><code>$ java -jar SnpSift.jar extractFields -s \",\" -e \".\" examples/test.chr22.ann.vcf CHROM POS REF ALT \"ANN[*].EFFECT\" \"ANN[*].HGVS_P\"\n#CHROM  POS REF ALT ANN[*].EFFECT   ANN[*].HGVS_P\n22  17071756    T   C   3_prime_UTR_variant,downstream_gene_variant .,.\n22  17072035    C   T   missense_variant,downstream_gene_variant    p.Gly469Glu,.\n22  17072258    C   A   missense_variant,downstream_gene_variant    p.Gly395Cys,.\n22  17072674    G   A   missense_variant,downstream_gene_variant    p.Pro256Leu,.\n22  17072747    T   C   missense_variant,downstream_gene_variant    p.Met232Val,.\n22  17072781    C   T   synonymous_variant,downstream_gene_variant  p.Pro220Pro,.\n22  17073043    C   T   missense_variant,downstream_gene_variant    p.Arg133Gln,.\n22  17073066    A   G   synonymous_variant,downstream_gene_variant  p.Ala125Ala,.\n22  17073119    C   T   missense_variant,downstream_gene_variant    p.Val108Met,.\n</code></pre></p>"},{"location":"snpsift/extractfields/#example-4-extracting-effects-one-per-line","title":"Example 4: Extracting effects, one per line","text":"<p>In order to extract effects, you can simply do something like this (notice that there are multiple columns per line because there are multiple effects per variant): <pre><code>$ java -jar SnpSift.jar extractFields examples/test.chr22.ann.vcf CHROM POS REF ALT \"ANN[*].EFFECT\"\n#CHROM  POS REF ALT ANN[*].EFFECT\n22  17071756    T   C   3_prime_UTR_variant downstream_gene_variant\n22  17072035    C   T   missense_variant    downstream_gene_variant\n22  17072258    C   A   missense_variant    downstream_gene_variant\n22  17072674    G   A   missense_variant    downstream_gene_variant\n22  17072747    T   C   missense_variant    downstream_gene_variant\n22  17072781    C   T   synonymous_variant  downstream_gene_variant\n22  17073043    C   T   missense_variant    downstream_gene_variant\n22  17073066    A   G   synonymous_variant  downstream_gene_variant\n22  17073119    C   T   missense_variant    downstream_gene_variant\n</code></pre> Note that since some variant have more than one effect, there can be more than one \"EFFECT\" column.</p> <p>If we prefer to have one effect per line, then we can use the <code>vcfEffOnePerLine.pl</code> provided with SnpEff distribution <pre><code>$ cat examples/test.chr22.ann.vcf \\\n    | ./scripts/vcfEffOnePerLine.pl \\\n    | java -jar SnpSift.jar extractFields - CHROM POS REF ALT \"ANN[*].EFFECT\" \\\n\n#CHROM  POS REF ALT ANN[*].EFFECT\n22  17071756    T   C   3_prime_UTR_variant\n22  17071756    T   C   downstream_gene_variant\n22  17072035    C   T   missense_variant\n22  17072035    C   T   downstream_gene_variant\n22  17072258    C   A   missense_variant\n22  17072258    C   A   downstream_gene_variant\n22  17072674    G   A   missense_variant\n22  17072674    G   A   downstream_gene_variant\n22  17072747    T   C   missense_variant\n</code></pre> Now we obtain one effect per line, while all other parameters in the line are repeated across mutiple lines (e.g. there are two chr22:17071756 lines, one for each variant annotation).</p> <p>Info</p> <p>Note that in SnpSift, we used <code>-</code> as input file name, which denotes STDIN.</p>"},{"location":"snpsift/extractfields/#example-5-extracting-genotype-using-genotype-name-instead-of-genotype-number","title":"Example 5: Extracting genotype using genotype name instead of genotype number","text":"<p>As of SnpSift version 4.1A, you can use the genotype name in expressions:</p> <pre><code>$ java -jar SnpSift.jar extractFields examples/1kg.head_chr1.vcf.gz CHROM POS REF ALT \"GEN[HG00096].DS\" \"GEN[HG00097].DS\"\n#CHROM    POS      REF  ALT    GEN[HG00096].DS    GEN[HG00097].DS\n1         10583    G    A      0.2                 0.15\n1         10611    C    G      0.05                0.75\n1         13302    C    T      0.05                1.0\n1         13327    G    C      0.0                 0.95\n1         13957    TC   T      0.05                0.65\n1         13980    T    C      0.05                0.6\n1         30923    G    T      1.75                0.35\n1         46402    C    CTGT   0.05                0.15\n1         47190    G    GA     0.15                0.0\n</code></pre>"},{"location":"snpsift/extractfields/#example-6-extracting-non-alphanumeric-field-names","title":"Example 6: Extracting non alphanumeric field names","text":"<p>Warning</p> <p><code>SnpSift extractFields</code> can get confused if the VCF field has non-alphanumeric charaters in the name (e.g. <code>dbNSFP_GERP++_RS</code> has two \"+\" signs). A quick fix, it so is to change the field names in the VCF file.</p> <p>Here is an example: <pre><code># Change field names in VCF\n$ cat kath.vcf | sed \"s/dbNSFP_GERP++/dbNSFP_GERP/g\" &gt; kath.gerp.vcf\n\n# Use new names to extract fields\n$ java -jar SnpSift.jar  extractFields kath.gerp.vcf CHROM POS REF ALT dbNSFP_GERP_RS dbNSFP_GERP_NS\n#CHROM  POS REF ALT dbNSFP_GERP_RS\n1   142827044   G   A       \n2   132914561   G   A       \n7   151933217   C   A       \n7   151933251   T   C       \n7   151933302   T   C       \n7   151945101   G   C   -0.892\n7   151945167   G   T       \n7   151962176   T   A       \n7   151970672   A   T       \n7   151970856   T   A   3.71\n18  14183638    G   C       \n18  14183710    A   G       \n18  14542909    G   A       \n18  14543039    T   C   -0.942\n</code></pre></p>"},{"location":"snpsift/faq/","title":"SnpSift: Frequently Asked Questions","text":""},{"location":"snpsift/faq/#corrupted-database-vcf-files-clinvar","title":"Corrupted database VCF files: ClinVar","text":"<p>Some VCF files used as annotation databases can be non-compliant.</p> <p>Most notably, some ClinVar versions have illegal VCF values, which will make downstream analysis tools, such as <code>SnpSift</code> to report the errors.</p> <p>For example, if you look into the file:</p> <pre><code>$ curl -s ftp://ftp.ncbi.nlm.nih.gov/pub/clinvar/vcf_GRCh37/clinvar.vcf.gz | gunzip -c | grep \"&amp;base\" | head -n 1\n\n13  32890543    125955  G   A   .   .   ALLELEID=131493;CLNDISDB=MedGen:C2675520,OMIM:612555;CLNDN=Breast-ovarian_cancer,_familial_2;CLNHGVS=NC_000013.10:g.32890543G&gt;A;CLNREVSTAT=no_assertion_criteria_provided;CLNSIG=Uncertain_significance;CLNVC=single_nucleotide_variant;CLNVCSO=SO:0001483;CLNVI=Breast_Cancer_Information_Core__(BRCA2):190-16&amp;base_change=G_to_A;GENEINFO=BRCA2:675;MC=SO:0001627|intron_variant;ORIGIN=1;RS=276174799\n</code></pre> <p>As you can see, the \"CLNVI\" is:</p> <pre><code>CLNVI=Breast_Cancer_Information_Core__(BRCA2):190-16&amp;base_change=G_to_A\n</code></pre> <p>This means that the CLNVI contains an illegal <code>'='</code> character. The VCF specification clearly states that the equal sign is not allowed:</p> <pre><code>\u00a0 Reference: https://samtools.github.io/hts-specs/VCFv4.3.pdf\n\u00a0 Section 1.2: \"Character encoding, non-printable characters and characters with special meaning\"\n\n\u00a0 \u00a0\u00a0Characters with special meaning (such as field delimiters \u2019;\u2019 in INFO or \u2019:\u2019 FORMAT fields) must be represented\n\u00a0 \u00a0 using the capitalized percent encoding:\n\u00a0 \u00a0 \u00a0 %3A : (colon)\n\u00a0 \u00a0 \u00a0 %3B ; (semicolon)\n\u00a0 \u00a0 \u00a0 %3D = (equal sign)\n\u00a0 \u00a0 \u00a0 ...\n</code></pre> <p>Furthermore, section 1.6.1.8 specifies:</p> <pre><code>\u00a0 INFO - additional information: (String, no semi-colons or equals-signs permitted; commas are permitted only\n\u00a0 as delimiters for lists of values; characters with special meaning can be encoded using the percent encoding, see\n\u00a0 Section 1.2; space characters are allowed)\u00a0\n</code></pre>"},{"location":"snpsift/faq/#finding-all-clinvar-problems","title":"Finding all ClinVar problems","text":"<p>An easy way to find many of the problems in the VCF file is to use the <code>SnpSift checkVcf</code> command:</p> <pre><code>$ java -jar SnpSift.jar vcfCheck clinvar.vcf.gz 2&gt;&amp;1 | head\n...WARNING: Malformed VCF entryfile '/home/pcingola/Downloads/clinvar.vcf.gz', line 3655:\n    Entry  : 1  25717365    17708   C   C   .   .   ALLELEID=32747;CLNDISDB=.;CLNDN=RH_E/e_POLYMORPHISM;CLNHGVS=NC_000001.10:g.25717365C=;CLNREVSTAT=no_assertion_criteria_provided;CLNSIG=Benign;CLNVC=single_nucleotide_variant;CLNVCSO=SO:0001483;CLNVI=OMIM_Allelic_Variant:111700.0001;GENEINFO=RHCE:6006;MC=SO:0001627|intron_variant,SO:0001819|synonymous_variant;ORIGIN=1;RS=609320\n    Errors :\n        INFO filed 'CLNHGVS' has an invalid value 'NC_000001.10:g.25717365C=' (no spaces, tabs, '=' or ';' are allowed)\n\nWARNING: Malformed VCF entryfile '/home/pcingola/Downloads/clinvar.vcf.gz', line 3657:\n    Entry  : 1  25735202    242743  G   G   .   .   ALLELEID=38411;CLNHGVS=NC_000001.10:g.25735202G=;CLNREVSTAT=no_interpretation_for_the_single_variant;CLNVC=single_nucleotide_variant;CLNVCSO=SO:0001483;CLNVI=OMIM_Allelic_Variant:111700.0002;GENEINFO=RHCE:6006;MC=SO:0001819|synonymous_variant;ORIGIN=1;RS=676785;SSR=1;CLNDISDBINCL=.;CLNDNINCL=RH_C/c_POLYMORPHISM;CLNSIGINCL=17709:Benign\n    Errors :\n        INFO filed 'CLNHGVS' has an invalid value 'NC_000001.10:g.25735202G=' (no spaces, tabs, '=' or ';' are allowed)\n</code></pre> <p>OK, it looks like there are quite a few problems, let's count them:</p> <pre><code>$ java -jar SnpSift.jar vcfCheck ~/Downloads/clinvar.vcf.gz 2&gt;&amp;1 | grep WARN | wc -l\n1793\n</code></pre> <p>Well, there seems to be 1793 lines VCF with some sort of problem. Let's see how to fix them.</p>"},{"location":"snpsift/faq/#fixing-clinvars-vcf-database","title":"Fixing ClinVar's VCF database","text":"<p>So, you need to fix ClinVar by either:\u00a0</p> <ol> <li>Remove the offending\u00a0fields from the VCF file</li> <li>Fix the character coding for the offending values</li> </ol>"},{"location":"snpsift/faq/#option-1-remove-the-offending-fields","title":"Option 1: Remove the offending fields","text":"<p>This is the easiest way to fix ClinVar's VCF file. First, let's find the corrupted fields: <pre><code>$ java -jar SnpSift.jar vcfCheck clinvar.vcf.gz 2&gt;&amp;1 | grep \"INFO field\" | cut -f 2 -d \"'\" | sort | uniq -c\n    212 CLNHGVS\n   1583 CLNVI\n</code></pre> OK, there are 212 lines with corrupted <code>CLNHGVS</code> fields and 1583 lines with corrupted <code>CLNVI</code> fields. Let's create a new database without those fields</p> <pre><code>$ java -jar SnpSift.jar rmInfo clinvar.vcf.gz CLNHGVS CLNVI &gt; clinvar.fixed_1.vcf\n00:00:00    Reading STDIN\n00:00:03    Done\n\n# Let's also compress and index the new file so we can use it as a database\n$ bgzip clinvar.fixed_1.vcf \n$ tabix clinvar.fixed_1.vcf.gz \n</code></pre> <p>Now we can re-check the new file to make sure it's OK. <pre><code>$ java -jar SnpSift.jar vcfCheck clinvar.fixed_1.vcf.gz \n....................................................................................................\n100000  ....................................................................................................\n200000  ..................................................................................................\n</code></pre> Everything seems OK.</p>"},{"location":"snpsift/faq/#option-2-fix-the-encoding","title":"Option 2: Fix the encoding","text":"<p>Here we need to fix the encoding of the fields. We know (see previous section) that the problematic fields are <code>CLNVI</code> and <code>CLNHGVS</code>, so what exactly are the problems?</p> <p><pre><code>$ java -jar SnpSift.jar vcfCheck clinvar.vcf.gz 2&gt;&amp;1 | grep \"INFO field\" | grep CLNVI | head\n        INFO field 'CLNVI' has an invalid value 'Breast_Cancer_Information_Core__(BRCA2):190-16&amp;base_change=G_to_A' (no spaces, tabs, '=' or ';' are allowed)\n        INFO field 'CLNVI' has an invalid value 'Breast_Cancer_Information_Core__(BRCA2):190-12&amp;base_change=del_TCT' (no spaces, tabs, '=' or ';' are allowed)\n        INFO field 'CLNVI' has an invalid value 'Breast_Cancer_Information_Core__(BRCA2):190-5&amp;base_change=del_T' (no spaces, tabs, '=' or ';' are allowed)\n        INFO field 'CLNVI' has an invalid value 'Breast_Cancer_Information_Core__(BRCA2):190-7&amp;base_change=T_to_C' (no spaces, tabs, '=' or ';' are allowed)\n        INFO field 'CLNVI' has an invalid value 'Breast_Cancer_Information_Core__(BRCA2):195&amp;base_change=T_to_C' (no spaces, tabs, '=' or ';' are allowed)\n        INFO field 'CLNVI' has an invalid value 'Breast_Cancer_Information_Core__(BRCA2):203&amp;base_change=G_to_A' (no spaces, tabs, '=' or ';' are allowed)\n        INFO field 'CLNVI' has an invalid value 'Breast_Cancer_Information_Core__(BRCA2):203&amp;base_change=G_to_C' (no spaces, tabs, '=' or ';' are allowed)\n        INFO field 'CLNVI' has an invalid value 'Breast_Cancer_Information_Core__(BRCA2):203&amp;base_change=G_to_T' (no spaces, tabs, '=' or ';' are allowed)\n        INFO field 'CLNVI' has an invalid value 'Breast_Cancer_Information_Core__(BRCA2):214&amp;base_change=A_to_C' (no spaces, tabs, '=' or ';' are allowed)\n        INFO field 'CLNVI' has an invalid value 'Breast_Cancer_Information_Core__(BRCA2):215&amp;base_change=T_to_C' (no spaces, tabs, '=' or ';' are allowed)\n</code></pre> OK, this one seems easy: All we need to do is change <code>&amp;base_change=</code> to <code>&amp;base_change%3D</code> This can be done with a simple <code>sed</code> command:</p> <pre><code>$ zcat clinvar.vcf.gz | sed 's/\\&amp;base_change=/\\&amp;base_change%3D/g'\n</code></pre> <p>How about the other field? <pre><code>$ java -jar SnpSift.jar vcfCheck clinvar.vcf.gz 2&gt;&amp;1 | grep \"INFO field\" | grep CLNHGVS | head\n        INFO field 'CLNHGVS' has an invalid value 'NC_000001.10:g.25717365C=' (no spaces, tabs, '=' or ';' are allowed)\n        INFO field 'CLNHGVS' has an invalid value 'NC_000001.10:g.25735202G=' (no spaces, tabs, '=' or ';' are allowed)\n        INFO field 'CLNHGVS' has an invalid value 'NC_000001.10:g.25735306T=' (no spaces, tabs, '=' or ';' are allowed)\n        INFO field 'CLNHGVS' has an invalid value 'NC_000001.10:g.25735331G=' (no spaces, tabs, '=' or ';' are allowed)\n        INFO field 'CLNHGVS' has an invalid value 'NC_000001.10:g.94578548T=' (no spaces, tabs, '=' or ';' are allowed)\n        INFO field 'CLNHGVS' has an invalid value 'NC_000001.10:g.98348885G=' (no spaces, tabs, '=' or ';' are allowed)\n        INFO field 'CLNHGVS' has an invalid value 'NC_000001.10:g.100672060T=' (no spaces, tabs, '=' or ';' are allowed)\n        INFO field 'CLNHGVS' has an invalid value 'NC_000001.10:g.114377568A=' (no spaces, tabs, '=' or ';' are allowed)\n        INFO field 'CLNHGVS' has an invalid value 'NC_000001.10:g.161599571T=' (no spaces, tabs, '=' or ';' are allowed)\n        INFO field 'CLNHGVS' has an invalid value 'NC_000001.10:g.161599643T=' (no spaces, tabs, '=' or ';' are allowed)\n</code></pre></p> <p>This is essentially the same, but we need four <code>sed</code> commands (one for each base): <pre><code>$ zcat clinvar.vcf.gz \\\n    | sed 's/A=;/A%3D;/' \\\n    | sed 's/C=;/C%3D;/' \\\n    | sed 's/G=;/G%3D;/' \\\n    | sed 's/T=;/T%3D;/'\n</code></pre></p> <p>The fix:</p> <p>Now, let's put the two previously explained fixes together: <pre><code>$ zcat clinvar.vcf.gz \\\n    | sed 's/\\&amp;base_change=/\\&amp;base_change%3D/g' \\\n    | sed 's/A=;/A%3D;/' \\\n    | sed 's/C=;/C%3D;/' \\\n    | sed 's/G=;/G%3D;/' \\\n    | sed 's/T=;/T%3D;/' \\\n    &gt; clinvar.fixed.vcf\n\n# Let's also compress and index the new file so we can use it as a database\n$ bgzip clinvar.fixed.vcf \n$ tabix clinvar.fixed.vcf.gz \n</code></pre></p> <p>We re-check the new <pre><code>$ java -jar SnpSift.jar vcfCheck clinvar.fixed.vcf.gz \n....................................................................................................\n100000  ....................................................................................................\n200000  ..................................................................................................\n</code></pre> OK, we are done.</p>"},{"location":"snpsift/filter/","title":"SnpSift filter","text":"<p>SnpSift filter is one of the most useful SnpSift commands. Using SnpSift filter you can filter VCF files using arbitrary expressions, for instance <code>\"(QUAL &gt; 30) | (exists INDEL) | ( countHet() &gt; 2 )\"</code>. The actual expressions can be quite complex, so it allows for a lot of flexibility.</p>"},{"location":"snpsift/filter/#typical-usage","title":"Typical usage","text":"<p>Some examples for the impatient:</p> <ul> <li> <p>I want to filter out samples with quality less than 30:</p> <pre><code>cat variants.vcf | java -jar SnpSift.jar filter \" ( QUAL &gt;= 30 )\" &gt; filtered.vcf\n</code></pre> </li> <li> <p>...but we also want InDels that have quality 20 or more:</p> <pre><code>cat variants.vcf | java -jar SnpSift.jar filter \"(( exists INDEL ) &amp; (QUAL &gt;= 20)) | (QUAL &gt;= 30 )\" &gt; filtered.vcf\n</code></pre> </li> <li> <p>...or any homozygous variant present in more than 3 samples:</p> <pre><code>cat variants.vcf | java -jar SnpSift.jar filter \"(countHom() &gt; 3) | (( exists INDEL ) &amp; (QUAL &gt;= 20)) | (QUAL &gt;= 30 )\" &gt; filtered.vcf\n</code></pre> </li> <li> <p>...or any heterozygous sample with coverage 25 or more:</p> <pre><code>cat variants.vcf | java -jar SnpSift.jar filter \"((countHet() &gt; 0) &amp;&amp; (DP &gt;= 25)) | (countHom() &gt; 3) | (( exists INDEL ) &amp; (QUAL &gt;= 20)) | (QUAL &gt;= 30 )\" &gt; filtered.vcf\n</code></pre> </li> <li> <p>I want to keep samples where the genotype for the first sample is homozygous variant and the genotype for the second sample is reference:</p> <pre><code>cat variants.vcf | java -jar SnpSift.jar filter \"isHom( GEN[0] ) &amp; isVariant( GEN[0] ) &amp; isRef( GEN[1] )\" &gt; filtered.vcf\n</code></pre> </li> <li> <p>I want to keep samples where the ID matches a set defined in a file:</p> <pre><code>cat variants.vcf | java -jar SnpSift.jar filter --set my_rs.txt \"ID in SET[0]\" &gt; filtered.vcf\n</code></pre> <p>and the file my_rs.txt has one string per line, e.g.:</p> <pre><code>rs58108140\nrs71262674\nrs71262673\n</code></pre> </li> </ul> <p>You can combine any conditions you want using boolean operators.</p>"},{"location":"snpsift/filter/#command-line-options","title":"Command line options","text":"<pre><code>Usage: java -jar SnpSift.jar filter [options] 'expression' [input.vcf]\nOptions:\n    -a|--addFilter   : Add a string to FILTER VCF field if 'expression' is true. Default: '' (none)\n    -e|--exprFile    : Read expression from a file\n    -f|--file        : VCF input file. Default: STDIN\n    -i|--filterId    : ID for this filter (##FILTER tag in header and FILTER VCF field). Default: 'SnpSift'\n    -n|--inverse     : Inverse. Show lines that do not match filter expression\n    -p|--pass        : Use 'PASS' field instead of filtering out VCF entries\n    -r|--rmFilter    : Remove a string from FILTER VCF field if 'expression' is true (and 'str' is in the field). Default: '' (none)\n    -s|--set         : Create a SET using 'file'\n    --errMissing     : Error is a field is missing. Default: false\n    --format         : SnpEff format version: {2, 3}. Default: Auto\n    --galaxy         : Used from Galaxy (expressions have been sanitized).\n</code></pre>"},{"location":"snpsift/filter/#variables","title":"Variables","text":"<p>All VCF fields can be used as variables names, as long as they are declared in the VCF header OR they are \"standard\" VCF fields (as defined by the VCF 4.1 specification).</p> <ul> <li> <p>Fields names: \"CHROM, POS, ID, REF, ALT, QUAL or FILTER\". Examples:</p> <ul> <li> <p>Any variant in chromosome 1:</p> <pre><code>\"( CHROM = 'chr1' )\"\n</code></pre> </li> <li> <p>Variants between two positions:</p> <pre><code>\"( POS &gt; 123456 ) &amp; ( POS &lt; 654321 )\"\n</code></pre> </li> <li> <p>Has an ID and it matches the regulat expression 'rs':</p> <pre><code>\"(exists ID) &amp; ( ID =~ 'rs' )\"\n</code></pre> </li> <li> <p>The reference is 'A':</p> <pre><code>\"( REF = 'A' )\"\n</code></pre> </li> <li> <p>The alternative is 'T':</p> <pre><code>\"( ALT = 'T' )\"\n</code></pre> </li> <li> <p>Quality over 30:</p> <pre><code>\"( QUAL &gt; 30 )\"\n</code></pre> </li> <li> <p>Filter value is either 'PASS' or it is missing:</p> <pre><code>\"( na FILTER ) | (FILTER = 'PASS')\"\n</code></pre> </li> </ul> </li> <li> <p>INFO field names in the INFO field. E.g. if the info field has \"DP=48;AF1=0;...\" you can use something like:</p> <pre><code>\"( DP &gt; 10 ) &amp; ( AF1 = 0 )\"\n</code></pre> </li> </ul>"},{"location":"snpsift/filter/#multiple-valued-fields-and-variables","title":"Multiple valued fields and variables","text":"<p>When variables have multiple values, you can access individual values as if it was an array.</p> <ul> <li> <p>Multiple value info fields (comma separated) can be accessed using an index. E.g. If the INFO field has \"CI95=0.04167,0.5417\" you can use an expression such as:</p> <pre><code>\"( CI95[0] &gt; 0.1 ) &amp; (CI95[1] &lt;= 0.3)\"\n</code></pre> </li> <li> <p>Multiple indexes You may test multiple indexed fields using 'ANY' or 'ALL' as index. In the examples we assume the INFO field has \"CI95=0.04167,0.5417\"</p> <p>ANY or *: If you use 'ANY' as index, the expression will be true if any field satisfies the expression.</p> <p>So, for instance, the following expressions:</p> <pre><code>\"( CI95[ANY] &gt; 0.1 )\"\n</code></pre> <p>or:</p> <pre><code>\"( CI95[*] &gt; 0.1 )\"\n</code></pre> <p>are equivalent to (in this case, there are only two values in the array):</p> <pre><code>\"( CI95[0] &gt; 0.1 ) | ( CI95[1] &gt; 0.1 )\"\n</code></pre> <p>ALL or ?: If you use 'ALL' as index, the expression will be true if all field satisfy the expression.</p> <p>So, for instance, the following expressions:</p> <pre><code>\"( CI95[ALL] &gt; 0.1 )\"\n\"( CI95[?] &gt; 0.1 )\"\n</code></pre> <p>are equivalent to (in this case, there are only two values in the array):</p> <pre><code>\"( CI95[0] &gt; 0.1 ) &amp; ( CI95[1] &gt; 0.1 )\"\n</code></pre> </li> </ul>"},{"location":"snpsift/filter/#genotype-fields","title":"Genotype fields","text":"<p>Vcf genotype fields can be accessed individually using array notation.</p> <ul> <li> <p>Genotype fields are accessed using an index (sample number) followed by a variable name. E.g. If the genotypes are <code>GT:PL:GQ    1/1:255,66,0:63    0/1:245,0,255:99</code>     You can write something like:</p> <pre><code>\"( GEN[0].GQ &gt; 60 ) &amp; ( GEN[1].GQ &gt; 90 )\"\n</code></pre> <p>You may use an asterisk to represent 'ANY' field:</p> <pre><code>\"( GEN[*].GQ &gt; 60 )\"\n</code></pre> </li> <li> <p>Genotype multiple fields are accessed using an index (sample number) followed by a variable name and then another index. E.g. If the genotypes are <code>GT:PL:GQ    1/1:255,66,0:63    0/1:245,0,255:99</code>     You can write something like:</p> <pre><code>\"( GEN[0].PL[2] = 0 )\"\n</code></pre> <p>You may use an asterisk to represent 'ANY' field:</p> <pre><code>\"( GEN[0].PL[*] = 0 )\"\n</code></pre> <p>...or even:</p> <pre><code>\"( GEN[*].PL[*] = 0 )\"\n</code></pre> </li> </ul> <p>Info</p> <p>You can create an expression using sample names instead of genotype numbers. E.g.</p> <pre><code>$ java -jar SnpSift.jar filter \"( GEN[HG00096].DS &gt; 0.2 ) &amp; ( GEN[HG00097].DS &gt; 0.5 )\" examples/1kg.head_chr1.vcf.gz\n</code></pre>"},{"location":"snpsift/filter/#sets","title":"Sets","text":"<p>Sets are defined by the '-s' (or '--set') command line option. Each file must have one string per line. They are named based on the order used in the command line (e.g. the first one is <code>SET[0]</code>, the second one is <code>SET[1]</code>, etc.)</p> <p>Example: You can write something like (assuming your command line was \"-s set1.txt -s set2.txt -s set3.txt\"):</p> <pre><code>\"( ID in SET[2] )\"\n</code></pre>"},{"location":"snpsift/filter/#snpeff-ann-fields","title":"SnpEff 'ANN' fields","text":"<p>SnpEff annotations are parsed, so you can access individual sub-fields:</p> <p>Effect fields (from SnpEff) are accessed using an index (effect number) followed by a sub-field name.</p> <p>Available <code>ANN</code> sub-fields are (for details, take a look at the specification):</p> <ul> <li><code>ALLELE</code> (alias GENOTYPE)</li> <li><code>EFFECT</code> (alias ANNOTATION): Effect in Sequence ontology terms (e.g. 'missense_variant', 'synonymous_variant', 'stop_gained', etc.)</li> <li><code>IMPACT</code>: { HIGH, MODERATE, LOW, MODIFIER }</li> <li><code>GENE</code>: Gene name (e.g. 'PSD3')</li> <li><code>GENEID</code>: Gene ID</li> <li><code>FEATURE</code></li> <li><code>FEATUREID</code> (alias TRID: Transcript ID)</li> <li><code>BIOTYPE</code>: Biotype, as described by the annotations (e.g. 'protein_coding')</li> <li><code>RANK</code>: Exon or Intron rank (i.e. exon number in a transcript)</li> <li><code>HGVS_C</code> (alias HGVS_DNA, CODON): Variant in HGVS (DNA) notation</li> <li><code>HGVS_P</code> (alias HGVS, HGVS_PROT, AA): Variant in HGVS (protein) notation</li> <li><code>CDNA_POS</code> (alias POS_CDNA)</li> <li><code>CDNA_LEN</code> (alias LEN_CDNA)</li> <li><code>CDS_POS</code> (alias POS_CDS)</li> <li><code>CDS_LEN</code> (alias LEN_CDS)</li> <li><code>AA_POS</code> (alias POS_AA)</li> <li><code>AA_LEN</code> (alias LEN_AA)</li> <li><code>DISTANCE</code></li> <li><code>ERRORS</code> (alias WARNING, INFOS)</li> </ul> <p>For example, you may want only the lines where the first annotation has <code>missense_variant</code> variant:</p> <p>Important According to the specification, there can be more than one EFFECT separated by &amp; (e.g. 'missense_variant&amp;splice_region_variant', thus using <code>has</code> operator is better than using equality operator (<code>=</code>). For instance <code>'missense_variant&amp;splice_region_variant' = 'missense_variant'</code> is false, whereas  <code>'missense_variant&amp;splice_region_variant' has 'missense_variant'</code> is true.</p> <pre><code>$ java -jar SnpSift.jar filter \"ANN[0].EFFECT has 'missense_variant'\" examples/test.chr22.ann.vcf &gt; test.chr22.ann.filter_missense_first.vcf\n\n# Output example (edited for readability)\n$ cat test.chr22.ann.filter_missense_first.vcf\n22    17072035    .    C    T    .    .    ANN=T|missense_variant|MODERATE|CCT8L2|ENSG00000198445|transcript|ENST00000359963|protein_coding|1/1|c.1406G&gt;A|p.Gly469Glu|1666/2034|1406/1674|469/557||,T|downstream_gene_variant|MODIFIER|FABP5P11|ENSG00000240122|transcript|ENST00000430910|processed_pseudogene||n.*397G&gt;A|||||3944|\n22    17072258    .    C    A    .    .    ANN=A|missense_variant|MODERATE|CCT8L2|ENSG00000198445|transcript|ENST00000359963|protein_coding|1/1|c.1183G&gt;T|p.Gly395Cys|1443/2034|1183/1674|395/557||,A|downstream_gene_variant|MODIFIER|FABP5P11|ENSG00000240122|transcript|ENST00000430910|processed_pseudogene||n.*397G&gt;T|||||3721|\n22    17072674    .    G    A    .    .    ANN=A|missense_variant|MODERATE|CCT8L2|ENSG00000198445|transcript|ENST00000359963|protein_coding|1/1|c.767C&gt;T|p.Pro256Leu|1027/2034|767/1674|256/557||,A|downstream_gene_variant|MODIFIER|FABP5P11|ENSG00000240122|transcript|ENST00000430910|processed_pseudogene||n.*397C&gt;T|||||3305|\n22    17072747    .    T    C    .    .    ANN=C|missense_variant|MODERATE|CCT8L2|ENSG00000198445|transcript|ENST00000359963|protein_coding|1/1|c.694A&gt;G|p.Met232Val|954/2034|694/1674|232/557||,C|downstream_gene_variant|MODIFIER|FABP5P11|ENSG00000240122|transcript|ENST00000430910|processed_pseudogene||n.*397A&gt;G|||||3232|\n22    17073043    .    C    T    .    .    ANN=T|missense_variant|MODERATE|CCT8L2|ENSG00000198445|transcript|ENST00000359963|protein_coding|1/1|c.398G&gt;A|p.Arg133Gln|658/2034|398/1674|133/557||,T|downstream_gene_variant|MODIFIER|FABP5P11|ENSG00000240122|transcript|ENST00000430910|processed_pseudogene||n.*397G&gt;A|||||2936|\n22    17073119    .    C    T    .    .    ANN=T|missense_variant|MODERATE|CCT8L2|ENSG00000198445|transcript|ENST00000359963|protein_coding|1/1|c.322G&gt;A|p.Val108Met|582/2034|322/1674|108/557||,T|downstream_gene_variant|MODIFIER|FABP5P11|ENSG00000240122|transcript|ENST00000430910|processed_pseudogene||n.*397G&gt;A|||||2860|\n</code></pre> <p>...but this probably doesn't make much sense. What you may really want are lines where ANY effect to be <code>missense_variant</code>: <pre><code>$ java -jar SnpSift.jar filter \"ANN[*].EFFECT has 'missense_variant'\" examples/test.chr22.ann.vcf &gt; test.chr22.ann.filter_missense_any.vcf\n\n# Output example (edited for readability)\n$ cat test.chr22.ann.filter_missense_any.vcf\n...\n22    24891462    .    G    A    .    .    ANN=A|stop_gained|HIGH|UPB1|ENSG00000100024|transcript|ENST00000413389|protein_coding|2/10|c.59G&gt;A|p.Trp20*|1652/3418|59/951|20/316||\n                                              ,A|missense_variant|MODERATE|UPB1|ENSG00000100024|transcript|ENST00000326010|protein_coding|1/10|c.91G&gt;A|p.Gly31Ser|435/2290|91/1155|31/384||\n                                              ,A|missense_variant|MODERATE|UPB1|ENSG00000100024|transcript|ENST00000382760|protein_coding|1/4|c.91G&gt;A|p.Gly31Ser|253/1928|91/561|31/186||\n\n22    24896158    .    A    T    .    .    ANN=T|missense_variant|MODERATE|UPB1|ENSG00000100024|transcript|ENST00000326010|protein_coding|2/10|c.188A&gt;T|p.Glu63Val|532/2290|188/1155|63/384||\n                                              ,T|missense_variant|MODERATE|UPB1|ENSG00000100024|transcript|ENST00000382760|protein_coding|2/4|c.188A&gt;T|p.Glu63Val|350/1928|188/561|63/186||\n</code></pre></p> <p>May be you want only the ones that affect gene 'TRMT2A': <pre><code>$ java -jar SnpSift.jar filter \"(ANN[*].EFFECT has 'missense_variant') &amp;&amp; (ANN[*].GENE = 'TRMT2A')\" examples/test.chr22.ann.vcf &gt; test.chr22.ann.filter_missense_any_TRMT2A.vcf\n\n$ cat test.chr22.ann.filter_missense_any_TRMT2A.vcf\n22    20103915    .    C    T    .    .    ANN=T|stop_gained|HIGH|RANBP1|ENSG00000099901|transcript|ENST00000432879|protein_coding|1/3|c.208C&gt;T|p.Arg70*|455/744|208/497|70/164||WARNING_TRANSCRIPT_INCOMPLETE\n                                              ,T|missense_variant|MODERATE|TRMT2A|ENSG00000099899|transcript|ENST00000439169|protein_coding|2/12|c.245G&gt;A|p.Arg82His|561/2473|245/1932|82/643||\n                                              ,T|missense_variant|MODERATE|TRMT2A|ENSG00000099899|transcript|ENST00000252136|protein_coding|2/12|c.245G&gt;A|p.Arg82His|634/2964|245/1878|82/625||\n                                              ,T|missense_variant|MODERATE|TRMT2A|ENSG00000099899|transcript|ENST00000403707|protein_coding|3/13|c.245G&gt;A|p.Arg82His|607/2928|245/1878|82/625||\n                                              ,T|missense_variant|MODERATE|TRMT2A|ENSG00000099899|transcript|ENST00000404751|protein_coding|2/12|c.245G&gt;A|p.Arg82His|584/2498|245/1689|82/562||\n                                              ,T|missense_variant|MODERATE|TRMT2A|ENSG00000099899|transcript|ENST00000445045|protein_coding|2/2|c.209G&gt;A|p.Arg70His|432/582|209/359|70/118||WARNING_TRANSCRIPT_INCOMPLETE\n                                              ,...\n\n22    20103925    .    T    C    .    .    ANN=C|missense_variant|MODERATE|TRMT2A|ENSG00000099899|transcript|ENST00000439169|protein_coding|2/12|c.235A&gt;G|p.Asn79Asp|551/2473|235/1932|79/643||\n                                              ,C|missense_variant|MODERATE|TRMT2A|ENSG00000099899|transcript|ENST00000252136|protein_coding|2/12|c.235A&gt;G|p.Asn79Asp|624/2964|235/1878|79/625||\n                                              ,C|missense_variant|MODERATE|TRMT2A|ENSG00000099899|transcript|ENST00000403707|protein_coding|3/13|c.235A&gt;G|p.Asn79Asp|597/2928|235/1878|79/625||\n                                              ,C|missense_variant|MODERATE|TRMT2A|ENSG00000099899|transcript|ENST00000404751|protein_coding|2/12|c.235A&gt;G|p.Asn79Asp|574/2498|235/1689|79/562||\n                                              ,C|missense_variant|MODERATE|RANBP1|ENSG00000099901|transcript|ENST00000432879|protein_coding|1/3|c.218T&gt;C|p.Phe73Ser|465/744|218/497|73/164||WARNING_TRANSCRIPT_INCOMPLETE\n                                              ,C|missense_variant|MODERATE|TRMT2A|ENSG00000099899|transcript|ENST00000445045|protein_coding|2/2|c.199A&gt;G|p.Asn67Asp|422/582|199/359|67/118||WARNING_TRANSCRIPT_INCOMPLETE\n                                              ,C|splice_region_variant&amp;intron_variant|LOW|RANBP1|ENSG00000099901|transcript|ENST00000430524|protein_coding|1/5|c.-374+7T&gt;C||||||\n                                              ,...\n</code></pre></p>"},{"location":"snpsift/filter/#snpeff-eff-fields","title":"SnpEff 'EFF' fields","text":"<p>Warning</p> <p>This section documents older SnpEff/SnpSift which used 'EFF' INFO field (as opposed to 'ANN' field) or files annotated using SnpEff's <code>-classic</code> or <code>-formatEff</code> command line options.</p> <p>SnpEff annotations are parsed, so you can access individual sub-fields:</p> <p>Effect fields (from SnpEff) are accessed using an index (effect number) followed by a sub-field name.</p> <p>Available <code>EFF</code> sub-fields are:</p> <ul> <li><code>EFFECT</code>: Effect (e.g. SYNONYMOUS_CODING, NON_SYNONYMOUS_CODING, FRAME_SHIFT, etc.)</li> <li><code>IMPACT</code>: { HIGH, MODERATE, LOW, MODIFIER }</li> <li><code>FUNCLASS</code>: { NONE, SILENT, MISSENSE, NONSENSE }</li> <li><code>CODON</code>: Codon change (e.g. 'ggT/ggG')</li> <li><code>AA</code>: Amino acid change (e.g. 'G156')</li> <li><code>GENE</code>: Gene name (e.g. 'PSD3')</li> <li><code>BIOTYPE</code>: Gene biotype, as described by the annotations (e.g. 'protein_coding')</li> <li><code>CODING</code>: Gene is { CODING, NON_CODING }</li> <li><code>TRID</code>: Transcript ID</li> <li><code>RANK</code>: Exon or Intron rank (i.e. exon number in a transcript)</li> </ul> <p>For example, you may want only the lines where the first effect is a NON_SYNONYMOUS variants:</p> <pre><code>\"( EFF[0].EFFECT = 'NON_SYNONYMOUS_CODING' )\"\n</code></pre> <p>...but this probably doesn't make much sense. What you may really want are lines where ANY effect is NON_SYNONYMOUS:</p> <pre><code>\"( EFF[*].EFFECT = 'NON_SYNONYMOUS_CODING' )\"\n</code></pre> <p>May be you want only the ones that affect gene 'TCF7L2':</p> <pre><code>\"( EFF[*].EFFECT = 'NON_SYNONYMOUS_CODING' ) &amp;  ( EFF[*].GENE = 'TCF7L2' )\"\n</code></pre>"},{"location":"snpsift/filter/#snpeff-lof-and-nmd-fields","title":"SnpEff 'LOF' and 'NMD' fields","text":"<p>Similarly <code>LOF</code> and <code>NMD</code> sub-fields are available:</p> <ul> <li><code>LOF.GENE</code> and NMD.GENE</li> <li><code>LOF.GENEID</code> and NMD.GENEID</li> <li><code>LOF.NUMTR</code> and NMD.NUMTR</li> <li><code>LOF.PERC</code> and NMD.PERC</li> </ul> <p>For instance, if we want to obtain genes having a Loss of Function effect in more than 90% of the transcripts, you can do this:</p> <pre><code>$cat test.snpeff.vcf | java -Xmx1G -jar SnpSift.jar filter \"(exists LOF[*].PERC) &amp; (LOF[*].PERC &gt; 0.9)\"\n</code></pre> <p>Warning</p> <p>We assume that 'test.snpeff.vcf' was annotated with SnpEff using '-lof' command line option.</p>"},{"location":"snpsift/filter/#available-operands-and-functions","title":"Available operands and functions","text":"<p>The following operators and functions are interpreted by <code>SnpSift filter</code>:</p> Operand Description Data type Example = Equality test FLOAT, INT or STRING (REF = 'A') &gt; Greater than FLOAT or INT (DP &gt; 20) \u2265 Greater or equal than FLOAT or INT (DP \u2265 20) &lt; Less than FLOAT or INT (DP &lt; 20) \u2264 Less or equal than FLOAT or INT (DP \u2264 20) =~ Match regular expression STRING (REL =~ 'AC') !~ Does not match regular expression STRING (REL !~ 'AC') &amp; AND operator Boolean (DP &gt; 20) &amp; (REF = 'A') | OR operator Boolean (DP &gt; 20) | (REF = 'A') ! NOT operator Boolean ! (DP &gt; 20) exists The variable exists (not missing) Any (exists INDEL) has The right hand side expression is equalt to any of the items in a list consisting of separating the left hand side expression using delimiters: <code>&amp;</code>, <code>+</code>, <code>;</code>, <code>,</code>, <code>:</code>, <code>(', ')</code> ,<code>[', ']</code>.  Example: If the expression is: ANN[*].EFFECT has 'missense_variant'. If left hand side (ANN[*].EFFECT) has value 'missense_variant&amp;splice_region_variant', then it is transformed to a list: <code>['missense_variant', 'splice_region_variant']</code> Since the right hand side ('missense_variant') is in the list, the expression evaluates to 'true' Any (ANN[*].EFFECT has 'missense_variant') Function Description Data type Example <code>countHom()</code> Count number of homozygous genotypes No arguments (countHom() &gt; 0) <code>countHet()</code> Count number of heterozygous genotypes No arguments (countHet() &gt; 2) <code>countVariant()</code> Count number of genotypes that are variants (i.e. not reference 0/0) No arguments (countVariant() &gt; 5) <code>countRef()</code> Count number of genotypes that are NOT variants (i.e. reference 0/0) No arguments (countRef() &lt; 1) Genotype  Function Description Data type Example <code>isHom</code> Is homozygous genotype? Genotype isHom( GEN[0] ) <code>isHet</code> Is heterozygous genotype? Genotype isHet( GEN[0] ) <code>isVariant</code> Is genotype a variant? (i.e. not reference 0/0) Genotype isVariant( GEN[0] ) <code>isRef</code> Is genotype a reference? (i.e. 0/0) Genotype isRef( GEN[0] )"},{"location":"snpsift/filter/#using-sample-names-instead-of-sample-numbers","title":"Using sample names instead of sample numbers","text":"<p>As of version 4.1A, SnpSift allows to use sample names instead of sample numbers. This allows to create more readable expressions.</p> <p>Example:</p> <pre><code>$ cat cancer.vcf | java -jar SnpSift.jar filter \"GEN[Somatic].GT = '2/1'\"\n#CHROM  POS    ID   REF  ALT    QUAL  FILTER    INFO    FORMAT    Germline    Somatic\n1       69091  .    A    C,G    .     PASS      AC=1    GT        1/0         2/1\n</code></pre> <p>Note that we used <code>GEN[Somatic]</code> instead of <code>GEN[1]</code>.</p>"},{"location":"snpsift/genesets/","title":"SnpSift GeneSets","text":"<p>Annotating GeneSets, such as Gene Ontology (GO), KEGG, Reactome, etc.; can be quite useful to find significant variants.</p> <p>Gene set annotations can be added to a SnpEff annotated file using <code>SnpSift geneSets</code> command. The VCF file must be annotated using <code>SnpEff</code> before performing Gene Sets annotations. This is because we must know which gene the variant affects).</p> <p>Info</p> <p>You can download MSigDb from Broad Institute</p> <p>Usage example: <pre><code>$ java -jar SnpSift.jar geneSets -v db/msigDb/msigdb.v3.1.symbols.gmt test.ann.vcf &gt; test.eff.geneSets.vcf\n00:00:00.000    Reading MSigDb from file: 'db/msigDb/msigdb.v3.1.symbols.gmt'\n00:00:01.168    Done. Total:\n        8513 gene sets\n        31847 genes\n00:00:01.168    Annotating variants from: 'test.ann.vcf'\n00:00:01.298    Done.\n# Summary\n#       gene_set    gene_set_size   variants\n#       ACEVEDO_METHYLATED_IN_LIVER_CANCER_DN   940 8\n#       CHR1P36 504 281\n#       KEGG_OLFACTORY_TRANSDUCTION 389 8\n#       REACTOME_GPCR_DOWNSTREAM_SIGNALING  805 8\n#       REACTOME_OLFACTORY_SIGNALING_PATHWAY    328 8\n...\n#       REACTOME_SIGNALING_BY_GPCR  920 8\n\n$ cat test.eff.geneSets.vcf\n## INFO=&lt;ID=MSigDb,Number=.,Type=String,Description=\"Gene set from MSigDB database (GSEA)\"&gt;\n1   69849   .   G   A   454.73  PASS    AC=33;EFF=STOP_GAINED(HIGH|NONSENSE|tgG/tgA|W253*|305|OR4F5|protein_coding|CODING|ENST00000335137|1|1);MSigDb=ACEVEDO_METHYLATED_IN_LIVER_CANCER_DN,CHR1P36,KEGG_OLFACTORY_TRANSDUCTION,REACTOME_GPCR_DOWNSTREAM_SIGNALING,REACTOME_OLFACTORY_SIGNALING_PATHWAY,REACTOME_SIGNALING_BY_GPCR\n</code></pre></p>"},{"location":"snpsift/gt/","title":"SnpSift GT","text":"<p>Compress genotype calls, reducing the overall size of the VCF file.</p> <p>This is intended for compressing very large VCF in very large sequencing projects (e.g. thousands of samples).</p> <p>Info</p> <p>For instance, we've reduced 1Tb (1,000 Gb) VCF file to roughly 1Gb in a project that has over 10,000 samples.</p> <p>The underlying idea is quite simple. In large re-sequencing projects most of the variants are singletons. This means that most variants are present in only one of the samples. For those variants, you have thousands of samples that are homozygous reference (i.e. genotype entry is \"0/0\") and one that is a variant (e.g. '0/1' or '1/1').</p> <p>A trivial way to compress these VCF entries is just to state which sample has non-reference information. Intuitively, this is similar to the way used to represent sparse matrices (only store non-zero elements).</p> <p><code>SnpSift gt</code> creates three INFO fields. These three files are composed of comma separated indexes of samples having:</p> <ul> <li>HE: Indicated heterozygous variants (i.e. '0/1').</li> <li>HO: Indicated homozygous variants (i.e. '1/1').</li> <li>NA: Indicated missing genotype data (i.e. './.').</li> </ul> <p>You can use <code>-u</code> command line option to uncompress.</p> <p>E.g.: <pre><code>$ cat test.vcf\n#CHROM  POS     ID  REF  ALT  QUAL  FILTER  INFO  FORMAT  Sample_1  Sample_2  Sample_3  Sample_4  Sample_5  Sample_6  Sample_7  Sample_8  Sample_9  Sample_10  Sample_11  Sample_12  Sample_13  Sample_14  Sample_15\n1       861276  .   A    G    .     PASS    AC=1  GT      0/0       1/1       0/0       0/0       0/0       0/0       0/0       0/0       0/0       0/0        0/0        0/0        0/0        0/0        0/0\n\n#---\n# Compress genotypes\n#---\n$ java -jar SnpSift.jar gt test.vcf | tee test.gt.vcf\n##INFO=&lt;ID=HO,Number=.,Type=Integer,Description=\"List of sample indexes having homozygous ALT genotypes\"&gt;\n##INFO=&lt;ID=HE,Number=.,Type=Integer,Description=\"List of sample indexes having heterozygous ALT genotypes\"&gt;\n##INFO=&lt;ID=NA,Number=.,Type=Integer,Description=\"List of sample indexes having missing genotypes\"&gt;\n#CHROM  POS     ID  REF  ALT  QUAL  FILTER  INFO        FORMAT  Sample_1  Sample_2  Sample_3  Sample_4  Sample_5  Sample_6  Sample_7  Sample_8  Sample_9  Sample_10  Sample_11  Sample_12  Sample_13  Sample_14  Sample_15\n1       861276  .   A    G    .     PASS    AC=1;HO=1\n\n#---\n# Uncompress genotypes (command line option '-u')\n#---\n$ java -jar SnpSift.jar gt -u test.gt.vcf\n#CHROM  POS     ID  REF  ALT  QUAL  FILTER  INFO  FORMAT  Sample_1  Sample_2  Sample_3  Sample_4  Sample_5  Sample_6  Sample_7  Sample_8  Sample_9  Sample_10  Sample_11  Sample_12  Sample_13  Sample_14  Sample_15\n1       861276  .   A    G    .     PASS    AC=1  GT      0/0       1/1       0/0       0/0       0/0       0/0       0/0       0/0       0/0       0/0        0/0        0/0        0/0        0/0        0/0\n</code></pre></p> <p>Warning</p> <p>This is lossy compression. Note that only GT informations is compressed, all other information in genotype field is lost.</p>"},{"location":"snpsift/gwascatalog/","title":"SnpSift GWAS Catalog","text":"<p>Annotate using GWAS catalog.</p> <p>You need the GWAS catalog file (in TXT format), which can be downloaded here. <pre><code>$ java -jar SnpSift.jar gwasCat gwascatalog.txt test.vcf | tee test.gwas.vcf\n1   1005806 rs3934834   C   T   .   PASS    AF=0.091;GWASCAT=Body_mass_index    \n1   2069172 rs425277    C   T   .   PASS    AF=0.400;GWASCAT=Height\n1   2069681 rs3753242   C   T   .   PASS    AF=0.211;GWASCAT=Reasoning  \n1   2392648 rs2477686   G   C   .   PASS    AF=0.745;GWASCAT=Non_obstructive_azoospermia    \n1   2513216 rs734999    C   T   .   PASS    AF=0.547;GWASCAT=Ulcerative_colitis\n1   2526746 rs3748816   A   G   .   PASS    AF=0.489;GWASCAT=Celiac_disease\n1   3083712 rs2651899   T   C   .   PASS    AF=0.467;GWASCAT=Migraine   \n1   3280253 rs6658356   G   A   .   PASS    AF=0.070;GWASCAT=Response_to_statin_therapy\n1   4315204 rs966321    G   T   .   PASS    AF=0.522;GWASCAT=Factor_VII\n1   5170712 rs7513590   A   G   .   PASS    AF=0.256;GWASCAT=Anthropometric_traits  \n1   6279370 rs846111    G   C   .   PASS    AF=0.153;GWASCAT=QT_interval,QT_interval    \n1   6631431 rs11587438  C   T   .   PASS    AF=0.906;GWASCAT=White_blood_cell_types\n1   7879063 rs2797685   C   T   .   PASS    AF=0.186;GWASCAT=Crohn_s_disease    \n1   8021973 rs35675666  G   T   .   PASS    AF=0.093;GWASCAT=Ulcerative_colitis\n1   8046672 rs12727642  C   A   .   PASS    AF=0.101;GWASCAT=Celiac_disease\n1   8422676 rs2252865   T   C   .   PASS    AF=0.771;GWASCAT=Schizophrenia  \n1   8526142 rs4908760   G   A   .   PASS    AF=0.630;GWASCAT=Vitiligo   \n</code></pre></p>"},{"location":"snpsift/intersect/","title":"SnpSift Intersect","text":"<p>This command intersects several intervals files (e.g. BED, BigBed, TXT) and produces a result of all intersections.</p> <p>A typical usage example is to create a consensus of peaks from several Chip-Seq experiments.</p> <p>Algorithm: This command creates one interval forest for each input file. For every interval in all input files, finds all intervals that intersect at least <code>minOverlap</code> bases (default 1 base). If there are at least <code>cluster</code> number of intersecting intervals it creates a consensus interval from the intersections (or <code>union</code>) of all intervals found. The consensus interval, if any, is shown as result.</p> <p>Command line options: <pre><code>$ java -jar SnpSift.jar intersect\nSnpSift version 1.9d (build 2013-04-26), by Pablo Cingolani\nUsage: java -jar SnpSift.jar [options] file_1.bed file_2.bed ... file_N.bed\nOptions:\n        -minOverlap &lt;num&gt; : Minimum number of bases that two intervals have to overlap. Default : 0\n        -cluster &lt;num&gt;    : An interval has to intersect at least 'num' intervals (from other files) to be considered. Default: 0\n        -intersect        : Report the intersection of all intervals. Default: false\n        -union            : Report the union of all intervals. Default: true\n</code></pre></p>"},{"location":"snpsift/intervals/","title":"SnpSift Intervals","text":"<p>This is used to extract variants that intersect any interval.</p> <p>You must provide intervals as BED files.</p> <p>Command line options:</p> <ul> <li>'-x' : Filter out (exclude) VCF entries that match any interval in the BED files.</li> <li>'-i file.vcf' : Specify the input VCF file (default is STDIN).</li> </ul> <p>E.g.:</p> <pre><code>cat variants.vcf | java -jar SnpSift.jar intervals my_intervals.bed &gt; variants_intersecting_intervals.vcf\n</code></pre> <p>Warning</p> <p>BED file format is tab separated zero-based coordinates \"chr \\t start \\t end \" (for this application, all other fields in the BED file are ignored).</p> <p>Warning</p> <p>If BED file has header lines, they must start with a '#'</p>"},{"location":"snpsift/intervalsindex/","title":"SnpSift Intervals Index","text":"<p>This is used to extract variants that intersect any interval.</p> <p>Warning</p> <p>This is similar to \"SnpSift intervals\", but intended for huge VCF files, and relatively small number of intervals.</p> <p>This command indexes the VCF file, thus is optimized for huge VCF files. You must provide intervals as BED files. BED format is tab separated zero-based coordinates \"chr \\t start \\t end \" (for this application, all other fields in the BED file are ignored). You can use command line option '-if 1' if you want one-based coordinates.</p> <p>E.g.:</p> <pre><code>java -jar SnpSift.jar intidx variants.vcf my_intervals.bed &gt; variants_intersecting_intervals.vcf\n</code></pre> <p>You can also have genomic coordinate in the command line. Note that in this case, coordinates are assumed to be one-based (instead of zero-based, like in BED files):</p> <pre><code>java -jar SnpSift.jar intidx -c variants.vcf chr1:12345-23456 chr2:3456789-4567890  &gt; variants_intersecting_intervals.vcf\n</code></pre> <p>Warning</p> <p>BED file format is tab separated zero-based coordinates \"chr \\t start \\t end \" (for this application, all other fields in the BED file are ignored).</p> <p>Warning</p> <p>If BED file has header lines, they must start with a '#'</p>"},{"location":"snpsift/introduction/","title":"SnpSift","text":"<p>SnpSift is a toolbox that allows you to filter and manipulate annotated files.</p> <p>Once your genomic variants have been annotated, you need to filter them out in order to find the \"interesting / relevant variants\". Given the large data files, this is not a trivial task (e.g. you cannot load all the variants into XLS spreadsheet). SnpSift helps to perform this VCF file manipulation and filtering required at this stage in data processing pipelines.</p>"},{"location":"snpsift/introduction/#download-and-install","title":"Download and install","text":"<p>SnpSift is part of SnpEff main distribution, so please click on here and follow the instructions on how to download and install SnpEff.</p>"},{"location":"snpsift/introduction/#snpsift-utilities","title":"SnpSift utilities","text":"<p>SnpSift is a collection of tools to manipulate VCF (variant call format) files.</p> <p>Some examples of what you can do:</p> Operation Meaning Filter You can filter using arbitrary expressions, for instance <code>\"(QUAL &gt; 30) | (exists INDEL) | ( countHet() &lt; 2 )\"</code>. The actual expressions can be quite complex, so it allows for a lot of flexibility. Annotate You can add 'ID' and INFO fields from another \"VCF database\" (e.g.  typically dbSnp database in VCF format). CaseControl You can compare how many variants are in 'case' and in 'control' groups. Also calculates p-values (Fisher exact test). Intervals Filter variants that intersect with intervals. Intervals (intidx) Filter variants that intersect with intervals. Index the VCF file using memory mapped I/O to speed up the search. This is intended for huge VCF files and a small number of intervals to retrieve. Join Join by generic genomic regions (intersecting or closest). RmRefGen Remove reference genotype (i.e. replace '0/0' genotypes by '.') TsTv Calculate transition to transversion ratio. Extract fields Extract fields from a VCF file to a TXT (tab separated) format. Variant type Adds SNP/MNP/INS/DEL to info field. It also adds \"HOM/HET\" if there is only one sample. GWAS Catalog Annotate using GWAS Catalog. DbNSFP Annotate using dbNSFP: The dbNSFP is an integrated database of functional predictions from multiple algorithms (SIFT, Polyphen2, LRT and MutationTaster, PhyloP and GERP++, etc.) SplitChr Split a VCF file by chromosome"},{"location":"snpsift/introduction/#citing-snpsift","title":"Citing SnpSift","text":"<p>In order to cite SnpSift, please use the following example.</p>"},{"location":"snpsift/introduction/#source-code","title":"Source code","text":"<p>The project is hosted at GitHub.</p>"},{"location":"snpsift/join/","title":"SnpSift Join","text":"<p>Join files by genomic regions (i.e. chr:start-end).</p> <p>Files can be generic TXT (tab separated), VCF or BED.</p> <p>Usage example: <pre><code>Usage: java -jar SnpSift.jar join [options] file1 file2\nNote: It is assumed that both files fit in memory.\nOptions:\n    -if1 &lt;num&gt;       : Offset for file1 (e.g. 1 if coordinates are one-based. Default: 1\n    -if2 &lt;num&gt;       : Offset for file2 (e.g. 2 if coordinates are one-based. Default: 1\n    -cols1 &lt;colDef&gt;  : Column definition for file 1. Format: chrCol,startCol,endCol (e.g. '1,2,3').\n                       Shortcuts 'bed' or 'vcf' are allowed. Default: 'vcf\n    -cols2 &lt;colDef&gt;  : Column definition for file 2. Format: chrCol,startCol,endCol (e.g. '1,2,3').\n                       Shortcuts 'bed' or 'vcf' are allowed. Default: 'vcf\n    -all             : For each interval, show all intersecting.\n                       Default: show only one (the largest intersection)\n    -closest         : Show closest intervals in file2 if none intersect.\n                       Default: off\n    -empty           : Show intervals in file1 even if they do not intersect with any other interval.\n                       Default: off\n</code></pre></p> <p>Example: Join two bed files, showing intersecting or closest intervals</p> <pre><code>java -Xmx2G -jar SnpSift.jar join -v -cols1 bed -cols2 bed -closest file1.bed file2.bed\n</code></pre> <p>Example: Join one bed file and another file having chr:start-end in columns 7,8 and 9 respectively. Showing intervals form file1 that do not intersect any interval from file2</p> <pre><code>java -Xmx2G -jar SnpSift.jar join -v -cols1 bed -cols2 7,8,9 -empty file.bed my_weird_file.txt\n</code></pre>"},{"location":"snpsift/phastcons/","title":"SnpSift phastCons","text":"<p>Annotate using PhastCons conservation scores.</p> <p>Info</p> <p>You must download PhastCons files here.</p> <p>Info</p> <p>You also need a chromosome size file, which can be created using <code>samtools faidx</code>, or you can download it from here.</p> <p>Full example. Most of the example deals with downloading and installing PhastCons database, which is done only once. The real annotation process is done in the last line. <pre><code># Create a dir for PhastCons database\ncd ~/snpEff\nmkdir -p db/phastCons/\n\n# Download all PhastCons files\ncd db/phastCons/\nwget http://hgdownload.soe.ucsc.edu/goldenPath/hg19/phastCons100way/hg19.100way.phastCons/chr1.phastCons100way.wigFix.gz                  \nwget http://hgdownload.soe.ucsc.edu/goldenPath/hg19/phastCons100way/hg19.100way.phastCons/chr2.phastCons100way.wigFix.gz                  \nwget http://hgdownload.soe.ucsc.edu/goldenPath/hg19/phastCons100way/hg19.100way.phastCons/chr3.phastCons100way.wigFix.gz                  \nwget http://hgdownload.soe.ucsc.edu/goldenPath/hg19/phastCons100way/hg19.100way.phastCons/chr4.phastCons100way.wigFix.gz                  \nwget http://hgdownload.soe.ucsc.edu/goldenPath/hg19/phastCons100way/hg19.100way.phastCons/chr5.phastCons100way.wigFix.gz                  \nwget http://hgdownload.soe.ucsc.edu/goldenPath/hg19/phastCons100way/hg19.100way.phastCons/chr6.phastCons100way.wigFix.gz                  \nwget http://hgdownload.soe.ucsc.edu/goldenPath/hg19/phastCons100way/hg19.100way.phastCons/chr7.phastCons100way.wigFix.gz                  \nwget http://hgdownload.soe.ucsc.edu/goldenPath/hg19/phastCons100way/hg19.100way.phastCons/chr8.phastCons100way.wigFix.gz                  \nwget http://hgdownload.soe.ucsc.edu/goldenPath/hg19/phastCons100way/hg19.100way.phastCons/chr9.phastCons100way.wigFix.gz                  \nwget http://hgdownload.soe.ucsc.edu/goldenPath/hg19/phastCons100way/hg19.100way.phastCons/chr10.phastCons100way.wigFix.gz                 \nwget http://hgdownload.soe.ucsc.edu/goldenPath/hg19/phastCons100way/hg19.100way.phastCons/chr11.phastCons100way.wigFix.gz                 \nwget http://hgdownload.soe.ucsc.edu/goldenPath/hg19/phastCons100way/hg19.100way.phastCons/chr12.phastCons100way.wigFix.gz                 \nwget http://hgdownload.soe.ucsc.edu/goldenPath/hg19/phastCons100way/hg19.100way.phastCons/chr13.phastCons100way.wigFix.gz                 \nwget http://hgdownload.soe.ucsc.edu/goldenPath/hg19/phastCons100way/hg19.100way.phastCons/chr14.phastCons100way.wigFix.gz                 \nwget http://hgdownload.soe.ucsc.edu/goldenPath/hg19/phastCons100way/hg19.100way.phastCons/chr15.phastCons100way.wigFix.gz                 \nwget http://hgdownload.soe.ucsc.edu/goldenPath/hg19/phastCons100way/hg19.100way.phastCons/chr16.phastCons100way.wigFix.gz                 \nwget http://hgdownload.soe.ucsc.edu/goldenPath/hg19/phastCons100way/hg19.100way.phastCons/chr17.phastCons100way.wigFix.gz                 \nwget http://hgdownload.soe.ucsc.edu/goldenPath/hg19/phastCons100way/hg19.100way.phastCons/chr18.phastCons100way.wigFix.gz                 \nwget http://hgdownload.soe.ucsc.edu/goldenPath/hg19/phastCons100way/hg19.100way.phastCons/chr19.phastCons100way.wigFix.gz                 \nwget http://hgdownload.soe.ucsc.edu/goldenPath/hg19/phastCons100way/hg19.100way.phastCons/chr20.phastCons100way.wigFix.gz                 \nwget http://hgdownload.soe.ucsc.edu/goldenPath/hg19/phastCons100way/hg19.100way.phastCons/chr21.phastCons100way.wigFix.gz                 \nwget http://hgdownload.soe.ucsc.edu/goldenPath/hg19/phastCons100way/hg19.100way.phastCons/chr22.phastCons100way.wigFix.gz                 \nwget http://hgdownload.soe.ucsc.edu/goldenPath/hg19/phastCons100way/hg19.100way.phastCons/chrM.phastCons100way.wigFix.gz                  \nwget http://hgdownload.soe.ucsc.edu/goldenPath/hg19/phastCons100way/hg19.100way.phastCons/chrX.phastCons100way.wigFix.gz                  \nwget http://hgdownload.soe.ucsc.edu/goldenPath/hg19/phastCons100way/hg19.100way.phastCons/chrY.phastCons100way.wigFix.gz\n\n# Create a chromosome size file and name it \"genome.fai\"\nsamtools faidx path/to/genome/hg19.fa.gz\ncp path/to/genome/hg19.fa.gz.fai ./genome.fai\n\n# Now we are ready to annotate\njava -Xmx8g -jar SnpSift.jar phastCons ~/snpEff/db/phastCons file.vcf &gt; file.phastCons.vcf\n</code></pre></p> <p>You can annotate intervals using BED files and <code>-bed</code> command line option. In the output BED formatted intervals, the score column (fifth column), is the average conservation score of all bases within the interval.</p> <p>It is possible to extract sub-intervals having at least 'minScore' conservation score and 'len' length by using <code>-minScore score</code> and <code>-extract len</code> command line options. For instance, the following command:</p> <pre><code>java -jar SnpSift.jar phastCons -minScore 0.8 -extract 10 -bed path/to/phastCons/dir input.bed\n</code></pre> <p>extracts all subintervals from each line in <code>input.bed</code>, that has at least <code>10</code> bases length and a conservation score of <code>0.8</code></p>"},{"location":"snpsift/private/","title":"SnpSift Private","text":"<p>Annotate if a variant is private to a family.</p> <p>A <code>Private=Family_ID</code> is added to a variant's INFO field, if the variant is only found in one family. A TFAM file (see PLINK's documentation) specifies a mapping from sample IDs to family IDs.</p> <p>E.g.:</p> <pre><code>$ java -jar SnpSift.jar private pheotypes.tfam imp.ann.vcf &gt; imp.ann.private.vcf\n</code></pre> <p>An annotated variant may look like this:</p> <pre><code>1   1005806 rs3934834   C   T   .   PASS    AF=0.091;..;Private=Family_47\n</code></pre> <p>This indicates that the variant is only found in members of <code>Family_47</code>, according to the definitions in <code>pheotypes.tfam</code>.</p>"},{"location":"snpsift/rminfo/","title":"SnpSift RmInfo","text":"<p>This command removes INFO fields from a VCF file (i.e. removes annotations)</p> <p>Removing INFO fields is usually done because you want to re-annotate the VCF file, thus removing old INFO fields in order to add new ones later.</p> <p>SnpEff SnpSift only add annotations and do not change current ones. So, in order to re-annotate a file, you should first remove the old annotations and then re-annotate.</p> <p>The reason for this behavior is simply because replacing annotation values is considered a bad practice. Imagine that you have a VCF entry  in your re-annotated file having the value \"AA=1\": How do you know if this is from the old annotations or from the new ones? This confusion often leads to problems in downstream steps of your pipelines, so it's better to avoid the problem by first removing all the previous annotations and then adding the new ones.</p> <p>Usage example: <pre><code>$ cat test.snpeff.vcf\n#CHROM  POS     ID      REF ALT QUAL    FILTER  INFO\n1       734462  1032    G   A   .       s50     AC=348;EFF=DOWNSTREAM(MODIFIER|||||RP11-206L10.8|processed_transcript|NON_CODING|ENST00000447500||1),INTRON(MODIFIER|||||RP11-206L10.6|processed_transcript|NON_CODING|ENST00000429505|1|1)\n\n$ java -jar SnpSift.jar rmInfo test.snpeff.vcf EFF\n#CHROM  POS     ID      REF ALT QUAL    FILTER  INFO\n1       734462  1032    G   A   .       s50     AC=348\n</code></pre></p>"},{"location":"snpsift/rmrefgen/","title":"SnpSift RmRefGen","text":"<p>Remove reference genotypes.</p> <p>Replaces genotype information for non-variant samples.</p> <p>E.g. If you have this file: <pre><code>#CHROM  POS     ID      REF     ALT     QUAL    FILTER  INFO    FORMAT       M1                 M2                X1              X2              \n2L      426906  .       C       G       53.30   .       DP=169  GT:PL:GQ     0/1:7,0,255:4      0/1:7,0,255:4     0/0:0,0,0:6     0/0:0,30,255:35\n2L      601171  .       C       A       999.00  .       DP=154  GT:PL:GQ     0/1:81,0,141:78    0/1:42,0,251:39   0/0:0,0,0:4     0/0:0,33,255:36\n2L      648611  .       A       T       999.00  .       DP=225  GT:PL:GQ     0/1:52,0,42:47     1/1:75,21,0:14    0/0:0,0,0:3     0/0:0,60,255:61\n2L      807373  .       A       G       106.00  .       DP=349  GT:PL:GQ     0/1:14,0,65:12     0/1:60,0,42:50    0/0:0,0,0:4     0/0:0,69,255:72\n2L      816766  .       G       T       999.00  .       DP=411  GT:PL:GQ     0/1:108,0,45:53    0/1:7,0,255:6     0/0:0,0,0:4     0/0:0,57,255:59\n</code></pre></p> <p>You can run:</p> <pre><code> cat file.vcf | java -jar SnpSift.jar rmRefGen &gt; file_noref.vcf\n</code></pre> <p>and you get this (notice the last two columns, that had '0/0' genotype): <pre><code>#CHROM  POS     ID      REF     ALT     QUAL    FILTER  INFO    FORMAT       M1                 M2                X1    X2              \n2L      426906  .       C       G       53.30   .       DP=169  GT:PL:GQ     0/1:7,0,255:4      0/1:7,0,255:4     .     .\n2L      601171  .       C       A       999.00  .       DP=154  GT:PL:GQ     0/1:81,0,141:78    0/1:42,0,251:39   .     .\n2L      648611  .       A       T       999.00  .       DP=225  GT:PL:GQ     0/1:52,0,42:47     1/1:75,21,0:14    .     .\n2L      807373  .       A       G       106.00  .       DP=349  GT:PL:GQ     0/1:14,0,65:12     0/1:60,0,42:50    .     .\n2L      816766  .       G       T       999.00  .       DP=411  GT:PL:GQ     0/1:108,0,45:53    0/1:7,0,255:6     .     .\n</code></pre></p>"},{"location":"snpsift/split/","title":"SnpSift Split","text":"<p>Simply split (or join) VCF files. Allows to create one file per chromosome or one file every N lines.</p> <p>A typical usage for this command is to:</p> <ol> <li>Split very large VCF files <code>SnpSift split huge.vcf</code></li> <li>Perform some CPU intensive processing in parallel using several computers or cores</li> <li>Join the resulting VCF files <code>SnpSift split -j huge.000.vcf huge.001.vcf huge.002.vcf ...  &gt; huge.out.vcf</code>.</li> </ol> <p>E.g.: Splitting a VCF having human variants:</p> <pre><code>java -jar SnpSift.jar split myHugeVcf.vcf.gz\n</code></pre> <p>Will create files myHugeVcf.1.vcf, myHugeVcf.2.vcf, ... , myHugeVcf.22.vcf, myHugeVcf.X.vcf, myHugeVcf.Y.vcf</p> <p>You can also specify '-l' command line option to split the file every N lines.</p> <p>E.g.: Split a VCF file every 10,000 lines:</p> <pre><code>java -jar SnpSift.jar split -l 10000 myHugeVcf.vcf.gz\n</code></pre> <p>Will create files myHugeVcf.001.vcf, myHugeVcf.002.vcf, ...</p> <p>Info</p> <p>VCF header will be added to each file, so resulting files will be more than 10,000 lines.</p> <p>You can use <code>-j</code> (join) command line option to join a set of VCF files.</p> <pre><code>java -jar SnpSift.jar split -j huge.000.vcf huge.001.vcf huge.002.vcf ...  &gt; huge.out.vcf\n</code></pre>"},{"location":"snpsift/tstv/","title":"SnpSift TsTv","text":"<p>Calculate transition vs transversion ratios for each sample.</p> <p>Usage example: <pre><code>$ java -jar SnpSift.jar tstv hom s.vcf\n\nSample        : 1   2   3   4   5   6   7   8   9   10  11  12  Total\nTransitions   : 150488  150464  158752  156674  152936  160356  152276  155314  156484  149276  151182  153468  1847670\nTransversions : 70878   70358   73688   72434   70828   76150   72030   71958   72960   69348   70180   71688   862500\nTs/Tv         : 2.123   2.139   2.154   2.163   2.159   2.106   2.114   2.158   2.145   2.153   2.154   2.141   2.142\n</code></pre></p>"},{"location":"snpsift/varianttype/","title":"SnpSift Variant type","text":"<p>Adds an INFO field denoting variant type.</p> <p>It adds \"SNP/MNP/INS/DEL/MIXED\" in the INFO field. It also adds \"HOM/HET\", but this last one works if there is only one sample (otherwise it doesn't make any sense). <pre><code>$ java -jar SnpSift.jar varType  test.vcf | grep -v \"^#\" | head\n20  10469   .   C   G   100.0   PASS    SNP;HOM GT:AP   0|0:0.075,0.060\n20  10492   .   C   T   100.0   PASS    SNP;HET GT:AP   0|1:0.180,0.345\n20  10575   .   C   CG  100.0   PASS    DEL;HET GT:AP   0|1:0.000,0.000\n20  10611   .   CG  C   100.0   PASS    INS;HET GT:AP   0|1:0.000,0.010\n20  10618   .   GT  TA  100.0   PASS    MNP;HET GT:AP   0|1:0.020,0.030\n</code></pre></p>"},{"location":"snpsift/vcf2ped/","title":"SnpSift Vcf2Tped","text":"<p>Convert from VCF to PLINK's TPED file format.</p> <p>The <code>vcf2tped</code> command uses a VCF and a TFAP file as input, creating a TPED and a consolidated TFAM as outputs.</p> <p>Command line options are: <pre><code>$ java -jar SnpSift.jar vcf2tped\nSnpSift version 1.9d (build 2013-04-26), by Pablo Cingolani\nUsage: java -jar SnpSift.jar vcf2tped [options] file.tfam file.vcf outputName\nOptions:\n        -f             : Force. Overwrite new files if they exist. Default: false\n        -onlySnp       : Use only SNPs when converting VCF to TPED. Default: false\n        -onlyBiAllelic : Use only bi-allelic variants. Default: false\n        -useMissing    : Use entries with missing genotypes (otherwise they are filtered out). Default: false\n        -useMissingRef : Use entries with missing genotypes marking them as 'reference' instead of 'missing'. Default: false\nParameters:\n        file.tfam      : File with genotypes and groups information (in PLINK's TFAM format)\n        file.vcf       : A VCF file (variants and genotype data)\n        outputName     : Base name for the new TPED and TFAM files.\n</code></pre></p> <p><code>vcf2tped</code> command supports the following features:</p> <ul> <li>Output a TPED file:<ul> <li>Only samples present in both the input TFAM and the input VCF files are in the output TPED.</li> <li>Bi-allelic filter: <code>-onlyBiAllelic</code> option filters out non bi-allelic variants.</li> <li>Non SNP variants (InDels, MNPs, etc):<ul> <li>InDels and other non-SNP variants are converted for \"fake\" SNPs (some programs have problems handling non-SNP variants).</li> <li><code>-onlySnp</code> option filters out non SNP variants.</li> </ul> </li> <li>Missing variants:<ul> <li>Variants having missing data are filtered out by default.</li> <li><code>-useMissing</code> uses missing variants in TPED file.</li> <li><code>-useMissingRef</code> Converts missing variants to reference genotype.</li> </ul> </li> </ul> </li> <li>Output TFAM file:<ul> <li>Only samples present in both the input TFAM and the input VCF files are in the output TFAM.</li> <li>Samples are re-ordered to have the same order as the VCF file</li> </ul> </li> </ul>"},{"location":"snpsift/vcfcheck/","title":"SnpSift VcfCheck","text":"<p>Perform some basic check ups on VCF files to spot common problems.</p> <p><code>SnpSift vcfCheck</code> checks for some common problems where VCF files are not following the specification. Given that many common VCF problems cause analysis tools and pipelines to behave unexpectedly, this command is intended as a simple debugging tool.</p> <p>E.g.: <pre><code>$ java -jar SnpSift.jar vcfCheck bad.vcf\n\nWARNING: Malformed VCF entryfile 'bad.vcf', line 7:\n        Entry  : 3  148885779   .   A   ATT,AT  999.0   PASS    UK10KWES_AC=0,0;MDV=94\n        Errors :\n                INFO filed 'UK10KWES_AC' has 'Number=1' in header, but it contains '2' elements.\n                Cannot find header for INFO field 'MDV'\n\nWARNING: Malformed VCF entryfile 'bad.vcf', line 14:\n        Entry  : 3  148890104   .   TCA T   .   .   .\n        Errors :\n                File is not sorted: Position '3:148890104' after position '3:148890105'\n</code></pre></p>"}]}