#!/usr/bin/env bds

#-------------------------------------------------------------------------------
#
# Download genome data
#
#-------------------------------------------------------------------------------

ucscMysqlServer    := "genome-mysql.cse.ucsc.edu"
cse                := "hgdownload.cse.ucsc.edu"
soe                := "hgdownload.soe.ucsc.edu"
urlUcscCse         := "http://$cse/goldenPath"
urlUcscSoe         := "http://$soe/goldenPath"
ftpUcscSoe         := "ftp://$soe/goldenPath"

void downloadUcscGenome(string genome) {
	dg := new DownloadUcsc(genome)
	dg.download()
}

# Class to downoad files and query MySql database from UCSC
class DownloadUcsc extends DownloadGenome {

	void DownloadUcsc(string genome) {
		super.DownloadGenome(genome)
	}

	string downloadCytoBand() {
		localFile := "$downloadDir/cytoBand.txt.gz"
		url := "$urlUcscCse/$genome/database/cytoBand.txt.gz"
		if( !localFile.exists() ) wget(url, localFile)
		return localFile
	}

	
	# Download mRNA file and create a 'cds.fa.gz'
	string downloadCdsFasta() {
		log("Downloading '$genome' (UCSC): mRNA FASTA file")
		urlMrna := "$urlUcscSoe/$genome/bigZips/refMrna.fa.gz"
		localMrna := "$downloadDir/refMrna.fa.gz"
		wget(urlMrna, localMrna)
		wait

		cds := "$downloadDir/cds.fa.gz"
		task(cds <- localMrna) {
			sys echo 'Creating CDS FASTA from "$localMrna"'
			sys gunzip -c '$localMrna' | tr " " "." | gzip -c > '$cds'
		}

		return cds
	}

	# Download FASTA geome from UCSC
	string downloadFasta() {
		log("Downloading '$genome' (UCSC): Reference FASTA file")
		localFile := "$downloadDir/$genome\.fa.gz"
		if( localFile.exists() ) {
			println "Local file '$localFile' exists, skipping download"
			return localFile
		}

		urlFaGz := "$urlUcscCse/$genome/bigZips/$genome\.fa.gz"
		urlTar := "$urlUcscCse/$genome/bigZips/chromFa.tar.gz"
		if( urlFaGz.exists() ) {
			wgetTask(urlFaGz, localFile)
		} else if( urlTar.exists() ) {
			localTar := "$downloadDir/chromFa.tar.gz"
			wgetTask(urlTar, localTar)
			localFile = fastaFromTar(localTar) # Create fasta from tar
		} else {
			println "Could not download FASTA refernce genome file\n\tFASTA: '$urlFaGz'\n\tTAR: '$urlTar'"
		}

		return localFile
	}

	# Download genes file. Either download GTF or query MySql server
	string downloadGenes() {
		genes := downloadGtf()
		if( genes.isEmpty() ) {
			# GTF not found, let's query MySql database
			genes = query()
		}
		return genes
	}

	# Download geome from UCSC, ony if it has a GTF file
	string downloadGtf() {
		log("Downloading '$genome' (UCSC): GTF file")
		url := "$urlUcscSoe/$genome/bigZips/genes/$genome\.refGene.gtf.gz"
		gtf := "$downloadDir/genes.gtf.gz"
		return wgetTask(url, gtf) ? gtf : ''
	}

	string downloadProteinFasta() {
		# We don't get protein fasta files from UCSC: Nothing to do
		return ''
	}

	# Download other files
	string[] downloadOther() {
		cyto := downloadCytoBand()
		return [cyto]
	}

	# Create a single fasta file from a set of fasta in a tar
	string fastaFromTar(string tar) {
		log("Creating '$genome' FASTA file from tarball")
		fasta := "$downloadDir/$genome\.fa.gz"
		dirChr := "$downloadDir/chr"
		dirChr.mkdir()

		task( fasta <- tar ) {
			sys echo "Creating fasta file '$fasta' from tar file '$tar'"
			sys cd '$dirChr'
			sys tar -xvzf '$tar'
			sys rm -f '$fasta'
			sys cat `find . -iname "*.fa"` | gzip -c > 'fasta'
		}

		return fasta
	}

	string query() {
		# Query gene database
		if( ucscGenomesRefGene.has(genome) ) return queryUcscRefGene()
		return queryUcscXenoRefGene()
	}

	# Query MySql's database (RefSeq)
	string queryUcscRefGene() {
		refSeq := "$downloadDir/genes.refseq.gz"
		if( !refSeq.exists() ) {
			log("Querying UCSC database for RefSeq genes: $genome")
			query := "
				use $genome;
				select rg.bin as 'binNum'
						, CONCAT(rg.name,'.',gi.version) as 'name'
						, rg.chrom
						, rg.strand
						, rg.txStart
						, rg.txEnd
						, rg.cdsStart
						, rg.cdsEnd
						, rg.exonCount
						, rg.exonStarts
						, rg.exonEnds
						, rg.score
						, rg.name2
						, rg.cdsStartStat
						, rg.cdsEndStat
						, rg.exonFrames
				from refGene rg
					inner join hgFixed.gbCdnaInfo gi
					on rg.name=gi.acc
				;
				"
			sys echo "$query" | mysql --user=genome --host=$ucscMysqlServer -A $genome | gzip -c > '$refSeq'
		}
		return refSeq
	}

	# Query MySql's database (dump xenoRefGene table)
	string queryUcscXenoRefGene() {
		refSeq := "$downloadDir/genes.refseq\.gz"
		if( !refSeq.exists() ) {
			log("Querying database for xenoRefGene genes: $genome")
			query := "
				use $genome;
				select rg.bin as 'binNum'
						, rg.name as 'name'
						, rg.chrom
						, rg.strand
						, rg.txStart
						, rg.txEnd
						, rg.cdsStart
						, rg.cdsEnd
						, rg.exonCount
						, rg.exonStarts
						, rg.exonEnds
						, rg.score
						, rg.name2
						, rg.cdsStartStat
						, rg.cdsEndStat
						, rg.exonFrames
				from xenoRefGene rg
				;
				"
			sys echo "$query" | mysql --user=genome --host=$ucscMysqlServer -A $genome | gzip -c > '$refSeq' || true
		}
		return refSeq
	}
}

#	# Download geome from UCSC (Known genes)
#	void downloadUcscKg(string refdb) {
#		log("Download '$genome' (UCSC): Knonwn Genes")
#		ref := refdb + 'kg'
#
#		dir := "$dirDownload/ucsc/$genome"
#		dir.mkdir()
#		dir.chdir()
#
#		# Query database
#		queryUcscKg(ref, refdb, dir)
#
#		# Copy files to snpEff/data dir
#		sys mkdir -p $dirData/$genome; cd $dir ; cp -vf genes.kg.gz $dirData/$genome/
#		sys cd $dirData/genomes; rm -vf $genome\.fa.gz ; ln -s $refdb\.fa.gz $genome\.fa.gz
#	}
#
#	# Download geome from UCSC
#	void downloadGenomeFasta(string ref) {
#		log("Download $genome (UCSC)")
#
#		# Initialize
#		seDataDir := "$dirData/$genome"
#		seDataDir.mkdir()
#
#		dir := "$dirDownload/ucsc/$genome"
#		dir.mkdir()
#		dir.chdir()
#
#		ori := "$dir/ORI"
#		ori.mkdir()
#		ori.chdir()
#
#		# Download reference fasta
#		fagz := ref.downloadUcscGenomeFasta(dir)
#		if( !fagz.exists() ) error "Genome FASTA reference file '$fagz' not found"
#
#		# Download CDS fasta
#		cdsgz := ref.downloadUcscGenomeFastaMrna(dir)
#		if( cdsgz.isEmpty() ) error "CDS FASTA file '$cdsgz' not found"
#
#		# Query gene database
#		if( ucscGenomesRefGene.has(ref) ) queryUcscRefGene(ref, dir)
#		else queryUcscXenoRefGene(ref, dir)
#
#		# Copy files to snpEff/data dir
#		fagzData := "$dirData/genomes/$genome\.fa.gz"
#		if( fagzData <- fagz ) sys cp -vf $fagz $fagzData
#
#		sys cd $dir ; cp -vf cds.fa.gz genes.refseq.gz $seDataDir/
#	}


#	# Query MySql's database (RefSeq) for refLink table
#	string queryUcscRefLink() {
#		refLink := "$downloadDir/refLink.txt.gz"
#		if( !refLink.exists() ) {
#			log("Querying database for RefLink table: $genome")
#			query := "use $genome; select * from hgFixed.refLink;"
#			sys echo "$query" | mysql --user=genome --host=$ucscMysqlServer -A $genome | gzip -c > '$refLink'
#		}
#		return refLink
#	}
#

class DownloadUcscKg extends DownloadUcsc {
	string refdb
	void DownloadUcscKg(string genome) {
		this.genome = genome
		this.refdb = genome + 'kg'
		downloadDir = "$dirDownload/ucsc/$refdb"
		dirDataGenome = "$dirData/$refdb"

		dirDataGenome.mkdir()
		downloadDir.mkdir()
		downloadDir.chdir()
	}

	string query() {
		return queryUcscKg()
	}

	# Query MySql's database (KnonwGene)
	string queryUcscKg() {
		refSeq := "$downloadDir/genes.kg.gz"
		if( !refSeq.exists() ) {
			log("Querying database for KnownGenes genes: $genome")
			query := "
				use $genome;
				select kg.name as '#name'
						, kg.chrom
						, kg.strand
						, kg.txStart
						, kg.txEnd
						, kg.cdsStart
						, kg.cdsEnd
						, kg.exonCount
						, kg.exonStarts
						, kg.exonEnds
						, kg.proteinID
						, kg.alignID
				from knownGene kg
				;
				"
			sys echo "$query" | mysql --user=genome --host=$ucscMysqlServer -A $refdb | gzip -c > '$refSeq'
		}
		return refSeq
	}
}
