#!/usr/bin/env bds

#-------------------------------------------------------------------------------
#
# Download genome data
#
#-------------------------------------------------------------------------------

clinvar            := "clinvar.vcf.gz"
urlClinVarGrch37   := "ftp://ftp.ncbi.nlm.nih.gov/pub/clinvar/vcf_GRCh37/$clinvar"
urlClinVarGrch38   := "ftp://ftp.ncbi.nlm.nih.gov/pub/clinvar/vcf_GRCh38/$clinvar"
urlDbSnpGrch37     := "ftp://ftp.ncbi.nih.gov/snp/organisms/human_9606_b151_GRCh37p13/VCF/00-All.vcf.gz"
urlDbSnpGrch38     := "ftp://ftp.ncbi.nih.gov/snp/organisms/human_9606/VCF/00-All.vcf.gz"
urlGwasCatalog     := "https://www.ebi.ac.uk/gwas/api/search/downloads/alternative"
urlJaspar          := "http://jaspar.binf.ku.dk/html/DOWNLOAD/JASPAR_CORE/pfm/redundant/pfm_all.txt"
urlNextProt        := "ftp://ftp.nextprot.org/pub/current_release/xml"
urlPdb             := "rsync.wwpdb.org::ftp_data/structures/divided/pdb/"

#-------------------------------------------------------------------------------
# Download and build dbNsfp
#-------------------------------------------------------------------------------
void downloadDbNsfp() {
	# Download and create
	dbNsfp38 := new DbNsfp(dirDb, "GRCh38")
	dbNsfp38.download()
	dbNsfp38File := dbNsfp38.create('')
	wait

	# Create dbNsfp37 using 'dbNsfp38File'
	dbNsfp37 := new DbNsfp(dirDb, "GRCh37")
	dbNsfp37.create(dbNsfp38File)
}

#-------------------------------------------------------------------------------
# Download ClinVar
#-------------------------------------------------------------------------------
void downloadClinvar() {
	println "Download Clinvar"

	# GRCh37
	dir := "$dirDb/GRCh37/clinvar/"
	dir.mkdir()
	dir.chdir()
	if( !clinvar.exists() ) wgetTask(urlClinVarGrch37)

	# GRCh38
	dir = "$dirDb/GRCh38/clinvar/"
	dir.mkdir()
	dir.chdir()
	if( !clinvar.exists() ) wgetTask(urlClinVarGrch38)

	wait
}

#-------------------------------------------------------------------------------
# Download dbSnp
#-------------------------------------------------------------------------------
void downloadDbSnp() {
	println "Download dbSnp"

	dbsnp := "dbsnp.vcf.gz"

	# GRCh37
	dir := "$dirDb/GRCh37/dbSnp/"
	dir.mkdir()
	dir.chdir()
	if( !dbsnp.exists() ) {
		if( wget(urlDbSnpGrch37) ) {
			sys cp 00-All.vcf.gz $dbsnp
		}
	} else println "downloadDbSnp: File '$dir/$dbsnp' exists, skipping"

	# GRCh38
	dir = "$dirDb/GRCh38/dbSnp/"
	dir.mkdir()
	dir.chdir()
	if( !dbsnp.exists() ) {
		if( wget(urlDbSnpGrch38) ) {
			sys cp 00-All.vcf.gz $dbsnp
		}
	} else println "downloadDbSnp: File '$dir/$dbsnp' exists, skipping"

	wait
}

#-------------------------------------------------------------------------------
# Download GWAS catalog
#-------------------------------------------------------------------------------
void downloadGwasCatalog() {
	println "Download Gwas-Catalog"

	dir := "$dirDb/gwasCatalog"
	dir.mkdir()
	dir.chdir()

	if( wget(urlGwasCatalog) ) {
		localFile := urlGwasCatalog.baseName()
		sys cat $localFile | $dirScriptsBuild/gwascatalog2vcf.pl > gwascatalog.vcf
	}

	wait
}

#-------------------------------------------------------------------------------
# Download Jaspar
#-------------------------------------------------------------------------------
void downloadJaspar() {
	println "Download Jaspar"

	dir := "$dirDb/jaspar"
	dir.mkdir()
	dir.chdir()

	if( wget(urlJaspar) ) {
		sys gzip -c pfm_all.txt > pwms.bin
		println "Jaspar: File $dir/pwms.bin created"
	}
}

#-------------------------------------------------------------------------------
# Download NextProt
#-------------------------------------------------------------------------------
void downloadNextProt() {
	println "Download NextProt"

	dir := "$dirDb/nextProt"
	dir.mkdir()
	dir.chdir()
	
	downloadOk := "download.ok"
	if( ! downloadOk.exists() ) {
		println "Download NextProt"

		# Download each chromosome's XML file
		for( string chr : humanChrsDd ) {
			wgetTask("$urlNextProt/nextprot_chromosome_$chr\.xml.gz")
		}

		wait
		downloadOk.write("OK")	# Mark as downlaoded OK
	} else println "downloadNextProt: Done file '$dir/$downloadOk' exists, skippping"
}

#-------------------------------------------------------------------------------
# Download PDB
#-------------------------------------------------------------------------------
void downloadPdb() {
	println "Download PDB"

	dir := "$dirDb/pdb"
	dir.mkdir()
	dir.chdir()

	downloadOk := "download.ok"
	if( ! downloadOk.exists() ) {
		println "Download PDB"
		sys rsync -rlpt -v -z --delete --port=33444 $urlPdb .
		downloadOk.write("OK")	# Mark as downlaoded OK
	} else println "downloadPdb: Done file '$dir/$downloadOk' exists, skippping"
}

