
# Generic class to download a genome
class DownloadGenome {
	string genome			# Genome to download
	string downloadDir		# Where to download the files
	string downloadDirOri	# Where to download the original files, if there is a transformation needed
	string dirDataGenome	# SnpEff's data directory for this genome
	string cdsUrl, fastaUrl, genesUrl, protUrl
	string cdsLocal, fastaLocal, genesLocal, protLocal
	string genesExt			# Genes file extension ('gtf', 'gff', genBank', etc.)

	void DownloadGenome(string genome) {
		this.genome = genome
		dirDataGenome = "$dirData/$genome"
		dirDataGenome.mkdir()

		# Get class (short) name to infer download dir (remove the 'Download' prefix to the class name)
		className := type(this).toLower()
		if( className.startsWith('download') ) className = className.substr('download'.length())

		downloadDir = "$dirDownload/$className/$genome"
		log("Download '$genome', using download dir '$downloadDir'")
		downloadDir.mkdir()
		downloadDir.chdir()
	}

	void initLocal() {
		cdsLocal = cdsUrl.isEmpty() ? '' : downloadDir + '/' + cdsUrl.baseName()
		fastaLocal = fastaUrl.isEmpty() ? '' : downloadDir + '/' + fastaUrl.baseName()
		genesLocal = genesUrl.isEmpty() ? '' : downloadDir + '/' + genesUrl.baseName()
		protLocal = protUrl.isEmpty() ? '' : downloadDir + '/' + protUrl.baseName()
		genesExt = 'gtf'
	}
	
	# Download and install all genomic files for 'genome'
	void download() {
		initLocal()

		# Download files
		fa := downloadFasta()
		genes := downloadGenes()
		cds := downloadCdsFasta()
		prot := downloadProteinFasta()
		other := downloadOther()
		wait

		# Process files
		preProcess()
		genes = processGenes(genes)
		fa = processFasta(fa)
		cds = processCds(cds)
		prot = processProt(prot)

		# Install files
		install(fa, "$dirData/genomes/$genome\.fa.gz")
		install(genesLocal, dirDataGenome + "/genes.$genesExt\.gz")
		install(cdsLocal, dirDataGenome + "/cds.fa.gz")
		install(protLocal, dirDataGenome + "/proteing.fa.gz")
		for(string f: other) {
			install(f, dirDataGenome + '/' + f.baseName())
		}
	}
	
	# Download (and build) 'cds' FASTA file to local download dir
	# Returns: Path to file
	string downloadCdsFasta() {
		return downloadFile(cdsUrl, cdsLocal, "CDS FASTA", false)
	}

	# Download (and build) reference genome FASTA file to local download dir
	# Returns: Path to fasta file
	string downloadFasta() {
		return downloadFile(fastaUrl, fastaLocal, "FASTA reference", false)
	}

	# Download a file
	string downloadFile(string url, string localFile, string title, bool doWait) {
		log("Downloading '$genome' $title: URL '$url', file '$localFile'")
		if( url.isEmpty() ) {
			log("Downloading '$genome' $title: Empty URL, skipping")
			return ''
		}
		if( localFile.isEmpty() ) {
			log("Downloading '$genome' $title: Empty local file, skipping")
			return ''
		}
		if( localFile.exists() ) {
			println "Local file '$localFile' exists, skipping download"
			return localFile
		}

		wget(url, localFile, doWait, false)
		return localFile
	}

	# Download (and build) 'genes' file to local download dir
	# Returns: Path to file (GTF, GFF, RefSeq, GeneBank, etc.)
	string downloadGenes() {
		return downloadFile(genesUrl, genesLocal, "Genes", false)
	}

	# Download 'other' files
	# Returns: A list of all paths
	string[] downloadOther() {
		string[] files
		error("Unimplemented!")
		return files
	}

	# Download (and build) 'protein' FASTA file to local download dir
	# Returns: Path to file
	string downloadProteinFasta() {
		return downloadFile(protUrl, protLocal, "Protein FASTA", false)
	}

	# Install a file in 'dstDir' directory
	void install(string src, string dst) {
		if( src.isEmpty() ) return
		log("Installing file '$src' to '$dst'")
		dst.dirName().mkdir()
		task( dst <- src ) sys cp -vf '$src' '$dst'
	}

	# Pre-Process (default, do nothing)
	void preProcess()	return 

	# Process CDS file (default, do nothing)
	string processCds(string cds)	return cds

	# Process FASTA file (default, do nothing)
	string processFasta(string fa)	return fa

	# Process genes file (default, do nothing)
	string processGenes(string genes)	return genes

	# Process protein file (default, do nothing)
	string processProt(string prot)	return prot

}
